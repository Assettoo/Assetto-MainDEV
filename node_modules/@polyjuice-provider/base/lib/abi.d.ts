import { AbiOutput, AbiInput, AbiItem, AbiType, StateMutabilityType } from "web3-utils";
import { AddressMappingItem } from "@polyjuice-provider/godwoken/lib/addressTypes";
import { ByteOpt, Bytes } from "@polyjuice-provider/godwoken/schemas/abi/abi";
import { ShortAddress } from "./types";
import { HexString } from "@ckb-lumos/base";
export interface MethodIDs {
    [method_id: string]: AbiItem;
}
export interface DecodedMethodParam extends AbiInput {
    value: string | string[];
}
export interface DecodedMethod {
    name: string;
    params: DecodedMethodParam[];
}
export declare function serializeAbiItem(_abiItem: AbiItem): HexString;
export declare function deserializeBoolFromByteOpt(value: ByteOpt): boolean | undefined;
export declare function deserializeUtf8Bytes(value: Bytes): string;
export declare function deserializeAbiType(value: number): AbiType;
export declare function deserializeStateMutabilityType(value: number): StateMutabilityType;
export declare function deserializeAbiItem(value: HexString): AbiItem;
export declare function decodeInputDataByAbi(data: HexString, abiItem: AbiItem): DecodedMethod;
export declare function filterInterestedInput(data: HexString, abiItem: AbiItem): DecodedMethodParam[];
export declare function getAddressesFromInputDataByAbi(data: HexString, abiItem: AbiItem): string[];
export declare class Abi {
    abi_items: AbiItem[];
    interested_methods: AbiItem[];
    interested_method_ids: MethodIDs;
    constructor(_abi_items: AbiItem[]);
    get_method_ids(_abi_items: AbiItem[]): MethodIDs;
    filter_interested_methods(_abi_items: AbiItem[]): AbiItem[];
    filter_interested_inputs(_abiItem: AbiItem): AbiInput[];
    filter_interested_outputs(_abiItem: AbiItem): AbiOutput[];
    get_interested_methods(): AbiItem[];
    get_abi_items(): AbiItem[];
    decode_method(data: string): DecodedMethod;
    get_interested_abi_item_by_encoded_data(data: string): AbiItem | undefined;
    refactor_data_with_short_address(data: string, calculate_short_address: (addr: string) => Promise<ShortAddress>, _mapping_callback?: (data: AddressMappingItem[]) => any): Promise<string>;
    refactor_return_value_with_short_address(return_value: string, abi_item: AbiItem, calculate_origin_eth_address: (_short_addr: string) => Promise<HexString>): Promise<any>;
    read_abi_from_json_file(): void;
}
