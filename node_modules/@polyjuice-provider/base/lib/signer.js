"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const eth_sig_util_1 = require("eth-sig-util");
class Signer {
    constructor(private_key) {
        this.private_key = private_key;
    }
    // message without prefix "\x19Ethereum Signed Message:\n"
    async sign_with_metamask(message_without_prefix, address) {
        if (!window.ethereum) {
            alert("please install metamask!");
            throw new Error("metamask not found. if you are in nodejs env, you can try sign_with_private_key method.");
        }
        const _signature = await window.ethereum.request({
            method: "personal_sign",
            params: [message_without_prefix, address],
        });
        return _signature;
    }
    // message without prefix "\x19Ethereum Signed Message:\n"
    sign_with_private_key(message_without_prefix) {
        if (!this.private_key) {
            throw new Error("private key not found! cannot use this method!");
        }
        let privateKeyBuffer = Buffer.from(this.private_key.length === 40
            ? this.private_key
            : this.private_key.slice(2), "hex");
        const signature = (0, eth_sig_util_1.personalSign)(privateKeyBuffer, {
            data: message_without_prefix,
        });
        return signature;
    }
}
exports.default = Signer;
//# sourceMappingURL=signer.js.map