{"version":3,"sources":["../src/index.ts"],"names":["isBIish","value","match","BI","isBI","constructor","jsbi","_isBI","add","other","toBI","JSBI","toJSBI","sub","subtract","div","divide","mul","multiply","mod","remainder","abs","greaterThanOrEqual","unaryMinus","pow","exponentiate","and","bitwiseAnd","or","bitwiseOr","xor","bitwiseXor","not","bitwiseNot","mask","jsbiOther","lessThan","Error","length","toString","lessThanOrEqual","maskNum","leftShift","signedRightShift","shl","shr","eq","equal","lt","lte","gt","greaterThan","gte","isNegative","isZero","toNumber","toBigInt","BigInt","e","radix","toHexString","from","isBILike"],"mappings":"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","sourcesContent":["import JSBI from \"jsbi\";\nexport type BIish = number | string | bigint | BI;\n\nexport function isBIish(value: unknown): value is BIish {\n  return (\n    value !== null &&\n    ((typeof value === \"number\" && value % 1 === 0) ||\n      (typeof value === \"string\" &&\n        (!!value.match(/^0x(0|[0-9a-fA-F]+)$/) ||\n          !!value.match(/^-?[0-9]+$/))) ||\n      typeof value === \"bigint\" ||\n      BI.isBI(value))\n  );\n}\n\nexport class BI {\n  private readonly jsbi: JSBI;\n  readonly _isBI: boolean;\n\n  constructor(value: JSBI) {\n    this.jsbi = value;\n    this._isBI = true;\n  }\n\n  add(other: BIish): BI {\n    return toBI(JSBI.add(this.jsbi, toJSBI(other)));\n  }\n\n  sub(other: BIish): BI {\n    return toBI(JSBI.subtract(this.jsbi, toJSBI(other)));\n  }\n\n  div(other: BIish): BI {\n    return toBI(JSBI.divide(this.jsbi, toJSBI(other)));\n  }\n\n  mul(other: BIish): BI {\n    return toBI(JSBI.multiply(this.jsbi, toJSBI(other)));\n  }\n\n  mod(other: BIish): BI {\n    return toBI(JSBI.remainder(this.jsbi, toJSBI(other)));\n  }\n\n  abs(): BI {\n    if (JSBI.greaterThanOrEqual(this.jsbi, toJSBI(0))) {\n      return toBI(this.jsbi);\n    } else {\n      return toBI(JSBI.unaryMinus(this.jsbi));\n    }\n  }\n\n  pow(other: BIish): BI {\n    return toBI(JSBI.exponentiate(this.jsbi, toJSBI(other)));\n  }\n\n  and(other: BIish): BI {\n    return toBI(JSBI.bitwiseAnd(this.jsbi, toJSBI(other)));\n  }\n\n  or(other: BIish): BI {\n    return toBI(JSBI.bitwiseOr(this.jsbi, toJSBI(other)));\n  }\n\n  xor(other: BIish): BI {\n    return toBI(JSBI.bitwiseXor(this.jsbi, toJSBI(other)));\n  }\n\n  not(): BI {\n    return toBI(JSBI.bitwiseNot(this.jsbi));\n  }\n\n  mask(other: BIish): BI {\n    const jsbiOther = toJSBI(other);\n    if (\n      JSBI.lessThan(jsbiOther, toJSBI(0)) ||\n      JSBI.lessThan(this.jsbi, toJSBI(0))\n    ) {\n      throw new Error(\"mask works only with positive numbers\");\n    }\n\n    const length = toJSBI(this.jsbi.toString(2).length);\n    if (JSBI.lessThanOrEqual(length, jsbiOther)) {\n      return toBI(this.jsbi);\n    } else {\n      const maskNum = JSBI.leftShift(\n        JSBI.signedRightShift(this.jsbi, jsbiOther),\n        jsbiOther\n      );\n      return toBI(JSBI.bitwiseXor(this.jsbi, maskNum));\n    }\n  }\n\n  shl(other: BIish): BI {\n    return toBI(JSBI.leftShift(this.jsbi, toJSBI(other)));\n  }\n\n  shr(other: BIish): BI {\n    return toBI(JSBI.signedRightShift(this.jsbi, toJSBI(other)));\n  }\n\n  eq(other: BIish): boolean {\n    return JSBI.equal(this.jsbi, toJSBI(other));\n  }\n\n  lt(other: BIish): boolean {\n    return JSBI.lessThan(this.jsbi, toJSBI(other));\n  }\n\n  lte(other: BIish): boolean {\n    return JSBI.lessThanOrEqual(this.jsbi, toJSBI(other));\n  }\n\n  gt(other: BIish): boolean {\n    return JSBI.greaterThan(this.jsbi, toJSBI(other));\n  }\n\n  gte(other: BIish): boolean {\n    return JSBI.greaterThanOrEqual(this.jsbi, toJSBI(other));\n  }\n\n  isNegative(): boolean {\n    return JSBI.lessThan(this.jsbi, toJSBI(0));\n  }\n\n  isZero(): boolean {\n    return JSBI.equal(this.jsbi, toJSBI(0));\n  }\n\n  toNumber(): number {\n    return JSBI.toNumber(this.jsbi);\n  }\n\n  toBigInt(): bigint {\n    try {\n      return BigInt(this.jsbi.toString(10));\n    } catch (e) {\n      throw new Error(\"this platform does not support BigInt\");\n    }\n  }\n\n  toString(radix?: number): string {\n    radix = radix || 10;\n    return this.jsbi.toString(radix);\n  }\n\n  toHexString(): string {\n    if (JSBI.lessThan(this.jsbi, toJSBI(0))) {\n      return \"-0x\" + JSBI.unaryMinus(this.jsbi).toString(16);\n    } else {\n      return \"0x\" + this.jsbi.toString(16);\n    }\n  }\n\n  static from(value: unknown): BI {\n    if (value instanceof BI) {\n      return value;\n    } else if (isBIish(value)) {\n      return toBI(toJSBI(value));\n    } else if (value instanceof JSBI) {\n      return toBI(toJSBI(value.toString()));\n    } else {\n      throw new Error(`invalid type: ${value} can't be converted into BI`);\n    }\n  }\n\n  static isBI(value: unknown): value is BI {\n    return isBILike(value) && !!value._isBI;\n  }\n}\n\nfunction isBILike(value: unknown): value is Record<string, unknown> {\n  if (value == null) return false;\n  return typeof value === \"object\";\n}\n\nfunction toBI(value: JSBI): BI {\n  return new BI(value);\n}\n\nexport function toJSBI(value: BIish): JSBI {\n  if (typeof value === \"number\" || typeof value === \"string\") {\n    return JSBI.BigInt(value);\n  } else {\n    return JSBI.BigInt(value.toString());\n  }\n}\n"],"file":"index.js"}