{"version":3,"sources":["../src/index.ts"],"names":["asyncSleep","ms","Promise","r","setTimeout","handler","get","target","method","params","result","rpc","indexer","waitForBlockSync","RpcProxy","constructor","uri","waitForSyncCheckIntervalSeconds","blockDifference","rpcOptions","ToolkitRPC","resetIndexer","getProxy","Proxy","header","get_tip_header","blockNumber","BI","from","number","tip","sub","block_number","lte","RPC","rpcProxy","get_block","block_hash","verbosity","get_block_by_number","get_header","get_header_by_number","get_transaction","hash","get_block_hash","get_live_cell","out_point","with_data","get_tip_block_number","get_current_epoch","get_epoch_by_number","epoch_number","get_block_economic_state","get_transaction_proof","tx_hashes","verify_transaction_proof","tx_proof","get_fork_block","get_consensus","dry_run_transaction","tx","calculate_dao_maximum_withdraw","local_node_info","get_peers","get_banned_addresses","clear_banned_addresses","set_ban","address","command","ban_time","absolute","reason","undefined","sync_state","set_network_active","state","add_node","peer_id","remove_node","ping_peers","send_transaction","outputs_validator","tx_pool_info","clear_tx_pool","get_raw_tx_pool","verbose","get_blockchain_info","send_alert","alert"],"mappings":"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","sourcesContent":["import { RPC as ToolkitRPC } from \"@ckb-lumos/toolkit\";\nimport {\n  Alert,\n  BannedAddr,\n  Block,\n  BlockEconomicState,\n  CellWithStatus,\n  ChainInfo,\n  Consensus,\n  DryRunResult,\n  Epoch,\n  Hash,\n  Header,\n  HexNumber,\n  HexString,\n  Indexer,\n  LocalNode,\n  OutPoint,\n  RawTxPool,\n  RemoteNode,\n  SyncState,\n  Transaction,\n  TransactionProof,\n  TransactionWithStatus,\n  TxPoolIds,\n  TxPoolInfo,\n  TxPoolVerbosity,\n} from \"@ckb-lumos/base\";\nimport { BI } from \"@ckb-lumos/bi\";\n\nexport type SerializedBlock = HexString;\nexport type SerializedHeader = HexString;\nexport type OutputsValidator = \"default\" | \"passthrough\";\n\nfunction asyncSleep(ms = 0) {\n  return new Promise((r) => setTimeout(r, ms));\n}\n\nconst handler = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get: (target: any, method: string) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return async (...params: any) => {\n      const result = await target.rpc[method](...params);\n      if (target.indexer) {\n        await target.waitForBlockSync();\n      }\n      return result;\n    };\n  },\n};\n\nclass RpcProxy {\n  private rpc: ToolkitRPC;\n  private indexer: Indexer | undefined;\n  private waitForSyncCheckIntervalSeconds: number;\n  private blockDifference: number;\n\n  constructor(\n    uri: string,\n    indexer?: Indexer,\n    {\n      waitForSyncCheckIntervalSeconds = 1,\n      blockDifference = 3,\n      rpcOptions = {},\n    }: {\n      waitForSyncCheckIntervalSeconds?: number;\n      blockDifference?: number;\n      rpcOptions?: Record<string, unknown>;\n    } = {}\n  ) {\n    this.rpc = new ToolkitRPC(uri, rpcOptions);\n    this.indexer = indexer;\n    this.waitForSyncCheckIntervalSeconds = waitForSyncCheckIntervalSeconds;\n    this.blockDifference = blockDifference;\n  }\n\n  resetIndexer(indexer?: Indexer): void {\n    this.indexer = indexer;\n  }\n\n  getProxy() {\n    return new Proxy(this, handler);\n  }\n\n  async waitForBlockSync() {\n    if (!this.indexer) {\n      return;\n    }\n    const header: Header = await this.rpc.get_tip_header();\n    const blockNumber = BI.from(header.number);\n    while (true) {\n      const tip = await this.indexer.tip();\n      if (tip) {\n        if (blockNumber.sub(tip.block_number).lte(this.blockDifference)) {\n          // TODO: do we need to handle forks?\n          break;\n        }\n      }\n      await asyncSleep(this.waitForSyncCheckIntervalSeconds * 1000);\n    }\n  }\n}\n\nexport class RPC {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private rpcProxy: any;\n\n  /**\n   *\n   * @param uri\n   * @param indexer Will `waitForSync` after rpc call if provided.\n   * @param options\n   */\n  constructor(\n    uri: string,\n    indexer?: Indexer,\n    {\n      waitForSyncCheckIntervalSeconds = 1,\n      blockDifference = 3,\n      rpcOptions = {},\n    }: {\n      waitForSyncCheckIntervalSeconds?: number;\n      blockDifference?: number;\n      rpcOptions?: Record<string, unknown>;\n    } = {}\n  ) {\n    this.rpcProxy = new RpcProxy(uri, indexer, {\n      waitForSyncCheckIntervalSeconds,\n      blockDifference,\n      rpcOptions,\n    }).getProxy();\n  }\n\n  /**\n   *\n   * @param indexer If not provided or be undefined, will disable `waitForSync`, and if provided, will enable `waitForSync` with provided indexer.\n   */\n  resetIndexer(indexer?: Indexer): void {\n    this.rpcProxy.resetIndexer(indexer);\n  }\n\n  // Module Chain\n\n  async get_block(\n    block_hash: Hash,\n    verbosity: \"0x0\"\n  ): Promise<SerializedBlock | null>;\n  async get_block(block_hash: Hash, verbosity?: \"0x2\"): Promise<Block | null>;\n  async get_block(\n    block_hash: Hash,\n    verbosity?: HexNumber\n  ): Promise<Block | SerializedBlock | null> {\n    return this.rpcProxy.get_block(block_hash, verbosity || null);\n  }\n\n  async get_block_by_number(\n    block_number: HexNumber,\n    verbosity: \"0x0\"\n  ): Promise<SerializedBlock | null>;\n  async get_block_by_number(\n    block_number: HexNumber,\n    verbosity?: \"0x2\"\n  ): Promise<Block | null>;\n  async get_block_by_number(\n    block_number: HexNumber,\n    verbosity?: HexNumber\n  ): Promise<Block | SerializedBlock | null> {\n    return this.rpcProxy.get_block_by_number(block_number, verbosity || null);\n  }\n\n  async get_header(\n    block_hash: Hash,\n    verbosity: \"0x0\"\n  ): Promise<SerializedHeader | null>;\n  async get_header(block_hash: Hash, verbosity?: \"0x1\"): Promise<Header | null>;\n  async get_header(\n    block_hash: Hash,\n    verbosity?: HexNumber\n  ): Promise<Header | SerializedHeader | null> {\n    return this.rpcProxy.get_header(block_hash, verbosity || null);\n  }\n\n  async get_header_by_number(\n    block_number: HexNumber,\n    verbosity: \"0x0\"\n  ): Promise<SerializedHeader | null>;\n  async get_header_by_number(\n    block_number: HexNumber,\n    verbosity?: \"0x1\"\n  ): Promise<Header | null>;\n  async get_header_by_number(\n    block_number: HexNumber,\n    verbosity?: HexNumber\n  ): Promise<Header | SerializedHeader | null> {\n    return this.rpcProxy.get_header_by_number(block_number, verbosity || null);\n  }\n\n  async get_transaction(hash: Hash): Promise<TransactionWithStatus | null> {\n    return this.rpcProxy.get_transaction(hash);\n  }\n\n  async get_block_hash(block_number: HexNumber): Promise<Hash | null> {\n    return this.rpcProxy.get_block_hash(block_number);\n  }\n\n  async get_tip_header(verbosity: \"0x0\"): Promise<SerializedHeader>;\n  async get_tip_header(verbosity?: \"0x1\"): Promise<Header>;\n  async get_tip_header(\n    verbosity?: HexNumber\n  ): Promise<Header | SerializedHeader> {\n    return this.rpcProxy.get_tip_header(verbosity);\n  }\n\n  async get_live_cell(\n    out_point: OutPoint,\n    with_data: boolean\n  ): Promise<CellWithStatus> {\n    return this.rpcProxy.get_live_cell(out_point, with_data);\n  }\n\n  async get_tip_block_number(): Promise<HexNumber> {\n    return this.rpcProxy.get_tip_block_number();\n  }\n\n  async get_current_epoch(): Promise<Epoch> {\n    return this.rpcProxy.get_current_epoch();\n  }\n\n  async get_epoch_by_number(epoch_number: HexNumber): Promise<Epoch | null> {\n    return this.rpcProxy.get_epoch_by_number(epoch_number);\n  }\n\n  async get_block_economic_state(\n    block_hash: Hash\n  ): Promise<BlockEconomicState | null> {\n    return this.rpcProxy.get_block_economic_state(block_hash);\n  }\n\n  async get_transaction_proof(\n    tx_hashes: Hash[],\n    block_hash?: Hash\n  ): Promise<TransactionProof> {\n    return this.rpcProxy.get_transaction_proof(tx_hashes, block_hash || null);\n  }\n\n  async verify_transaction_proof(tx_proof: TransactionProof): Promise<Hash[]> {\n    return this.rpcProxy.verify_transaction_proof(tx_proof);\n  }\n\n  async get_fork_block(\n    block_hash: Hash,\n    verbosity: \"0x0\"\n  ): Promise<SerializedBlock | null>;\n  async get_fork_block(\n    block_hash: Hash,\n    verbosity?: \"0x2\"\n  ): Promise<Block | null>;\n  async get_fork_block(\n    block_hash: Hash,\n    verbosity?: HexNumber\n  ): Promise<Block | SerializedBlock | null> {\n    return this.rpcProxy.get_fork_block(\n      block_hash,\n      verbosity ? verbosity : null\n    );\n  }\n\n  async get_consensus(): Promise<Consensus> {\n    return this.rpcProxy.get_consensus();\n  }\n\n  // Module Experiment\n\n  async dry_run_transaction(tx: Transaction): Promise<DryRunResult> {\n    return this.rpcProxy.dry_run_transaction(tx);\n  }\n\n  async calculate_dao_maximum_withdraw(\n    out_point: OutPoint,\n    block_hash: Hash\n  ): Promise<HexNumber> {\n    return this.rpcProxy.calculate_dao_maximum_withdraw(out_point, block_hash);\n  }\n\n  // Module Net\n\n  async local_node_info(): Promise<LocalNode> {\n    return this.rpcProxy.local_node_info();\n  }\n\n  async get_peers(): Promise<RemoteNode[]> {\n    return this.rpcProxy.get_peers();\n  }\n\n  async get_banned_addresses(): Promise<BannedAddr> {\n    return this.rpcProxy.get_banned_addresses();\n  }\n\n  async clear_banned_addresses(): Promise<null> {\n    return this.rpcProxy.clear_banned_addresses();\n  }\n\n  async set_ban(\n    address: string,\n    command: string,\n    ban_time?: HexNumber,\n    absolute?: boolean,\n    reason?: string\n  ): Promise<null> {\n    return this.rpcProxy.set_ban(\n      address,\n      command,\n      ban_time || null,\n      absolute !== undefined ? absolute : null,\n      reason || null\n    );\n  }\n\n  async sync_state(): Promise<SyncState> {\n    return this.rpcProxy.sync_state();\n  }\n\n  async set_network_active(state: boolean): Promise<null> {\n    return this.rpcProxy.set_network_active(state);\n  }\n\n  async add_node(peer_id: string, address: string): Promise<null> {\n    return this.rpcProxy.add_node(peer_id, address);\n  }\n\n  async remove_node(peer_id: string): Promise<null> {\n    return this.rpcProxy.remove_node(peer_id);\n  }\n\n  async ping_peers(): Promise<null> {\n    return this.rpcProxy.ping_peers();\n  }\n\n  // Module pool\n\n  async send_transaction(\n    tx: Transaction,\n    outputs_validator?: OutputsValidator\n  ): Promise<Hash> {\n    return this.rpcProxy.send_transaction(tx, outputs_validator || null);\n  }\n\n  async tx_pool_info(): Promise<TxPoolInfo> {\n    return this.rpcProxy.tx_pool_info();\n  }\n\n  async clear_tx_pool(): Promise<null> {\n    return this.rpcProxy.clear_tx_pool();\n  }\n\n  async get_raw_tx_pool(verbose?: false): Promise<TxPoolIds>;\n  async get_raw_tx_pool(verbose: true): Promise<TxPoolVerbosity>;\n  async get_raw_tx_pool(verbose?: boolean): Promise<RawTxPool> {\n    return this.rpcProxy.get_raw_tx_pool(\n      verbose !== undefined ? verbose : null\n    );\n  }\n\n  // Module Stats\n\n  async get_blockchain_info(): Promise<ChainInfo> {\n    return this.rpcProxy.get_blockchain_info();\n  }\n\n  // Module Alert\n\n  async send_alert(alert: Alert): Promise<null> {\n    return this.rpcProxy.send_alert(alert);\n  }\n\n  // Module Miner\n}\n"],"file":"index.js"}