{"version":3,"sources":["../src/keystore.ts"],"names":["UnsupportedCipher","Error","constructor","IncorrectPassword","InvalidKeystore","CIPHER","CKB_CLI_ORIGIN","Keystore","theCrypto","id","origin","crypto","fromJson","json","object","JSON","parse","load","path","fs","readFileSync","save","dir","name","filename","overwrite","Path","join","existsSync","writeFileSync","toJson","stringify","isFromCkbCli","createEmpty","salt","randomBytes","iv","kdfparams","dklen","toString","n","r","p","ciphertext","cipherparams","cipher","kdf","mac","create","extendedPrivateKey","password","options","derivedKey","scryptSync","scryptOptions","createCipheriv","slice","Buffer","concat","update","from","serialize","final","isEmpty","decrypt","decipher","createDecipheriv","ExtendedPrivateKey","checkPassword","Keccak","digest","N","maxmem"],"mappings":"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","sourcesContent":["import crypto from \"crypto\";\nimport { Keccak } from \"sha3\";\nimport { v4 as uuid } from \"uuid\";\nimport fs from \"fs\";\nimport Path from \"path\";\n\nimport { ExtendedPrivateKey } from \"./extended_key\";\nimport { HexString } from \"@ckb-lumos/base\";\n\nexport type HexStringWithoutPrefix = string;\n\nexport class UnsupportedCipher extends Error {\n  constructor() {\n    super(\"Unsupported cipher!\");\n  }\n}\n\nexport class IncorrectPassword extends Error {\n  constructor() {\n    super(\"Incorrect password!\");\n  }\n}\n\nexport class InvalidKeystore extends Error {\n  constructor() {\n    super(\"Invalid keystore, please check your file integrity.\");\n  }\n}\n\nconst CIPHER = \"aes-128-ctr\";\nconst CKB_CLI_ORIGIN = \"ckb-cli\";\n\ninterface CipherParams {\n  iv: HexStringWithoutPrefix;\n}\n\ninterface KdfParams {\n  dklen: number;\n  n: number;\n  r: number;\n  p: number;\n  salt: HexStringWithoutPrefix;\n}\n\ninterface Crypto {\n  cipher: string;\n  cipherparams: CipherParams;\n  ciphertext: HexStringWithoutPrefix;\n  kdf: string;\n  kdfparams: KdfParams;\n  mac: HexStringWithoutPrefix;\n}\n\n// Encrypt and save master extended private key.\nexport default class Keystore {\n  crypto: Crypto;\n  id: string;\n  version: number = 3;\n  origin: string | undefined;\n\n  constructor(theCrypto: Crypto, id: string, origin?: string) {\n    this.crypto = theCrypto;\n    this.id = id;\n    this.origin = origin;\n  }\n\n  static fromJson(json: string): Keystore {\n    try {\n      const object = JSON.parse(json);\n      return new Keystore(object.crypto, object.id, object.origin);\n    } catch {\n      throw new InvalidKeystore();\n    }\n  }\n\n  /**\n   * Load keystore file from path.\n   *\n   * @param path\n   */\n  static load(path: string): Keystore {\n    const json = fs.readFileSync(path, \"utf-8\");\n    return this.fromJson(json);\n  }\n\n  /**\n   * Keystore file default name is `${id}.json`.\n   *\n   * @param dir\n   * @param options If you are sure to overwrite existing keystore file, set `overwrite` to true.\n   */\n  save(\n    dir: string,\n    {\n      name = this.filename(),\n      overwrite = false,\n    }: { name?: string; overwrite?: boolean } = {}\n  ): void {\n    const path: string = Path.join(dir, name);\n    if (!overwrite && fs.existsSync(path)) {\n      throw new Error(\"Keystore file already exists!\");\n    }\n    fs.writeFileSync(path, this.toJson());\n  }\n\n  private filename(): string {\n    return this.id + \".json\";\n  }\n\n  toJson(): string {\n    return JSON.stringify(this);\n  }\n\n  isFromCkbCli(): boolean {\n    return this.origin === CKB_CLI_ORIGIN;\n  }\n\n  // Create an empty keystore object that contains empty private key\n  static createEmpty(): Keystore {\n    const salt: Buffer = crypto.randomBytes(32);\n    const iv: Buffer = crypto.randomBytes(16);\n    const kdfparams: KdfParams = {\n      dklen: 32,\n      salt: salt.toString(\"hex\"),\n      n: 2 ** 18,\n      r: 8,\n      p: 1,\n    };\n    return new Keystore(\n      {\n        ciphertext: \"\",\n        cipherparams: {\n          iv: iv.toString(\"hex\"),\n        },\n        cipher: CIPHER,\n        kdf: \"scrypt\",\n        kdfparams,\n        mac: \"\",\n      },\n      uuid()\n    );\n  }\n\n  static create(\n    extendedPrivateKey: ExtendedPrivateKey,\n    password: string,\n    options: { salt?: Buffer; iv?: Buffer } = {}\n  ): Keystore {\n    const salt: Buffer = options.salt || crypto.randomBytes(32);\n    const iv: Buffer = options.iv || crypto.randomBytes(16);\n    const kdfparams: KdfParams = {\n      dklen: 32,\n      salt: salt.toString(\"hex\"),\n      n: 2 ** 18,\n      r: 8,\n      p: 1,\n    };\n    const derivedKey: Buffer = crypto.scryptSync(\n      password,\n      salt,\n      kdfparams.dklen,\n      Keystore.scryptOptions(kdfparams)\n    );\n\n    const cipher: crypto.Cipher = crypto.createCipheriv(\n      CIPHER,\n      derivedKey.slice(0, 16),\n      iv\n    );\n    if (!cipher) {\n      throw new UnsupportedCipher();\n    }\n    const ciphertext: Buffer = Buffer.concat([\n      cipher.update(\n        Buffer.from(extendedPrivateKey.serialize().slice(2), \"hex\")\n      ),\n      cipher.final(),\n    ]);\n\n    return new Keystore(\n      {\n        ciphertext: ciphertext.toString(\"hex\"),\n        cipherparams: {\n          iv: iv.toString(\"hex\"),\n        },\n        cipher: CIPHER,\n        kdf: \"scrypt\",\n        kdfparams,\n        mac: Keystore.mac(derivedKey, ciphertext),\n      },\n      uuid()\n    );\n  }\n\n  // Imported from xpub with empty private key.\n  isEmpty(): boolean {\n    return this.crypto.ciphertext === \"\" && this.crypto.mac === \"\";\n  }\n\n  // Decrypt and return serialized extended private key.\n  decrypt(password: string): HexString {\n    const derivedKey = this.derivedKey(password);\n    const ciphertext = Buffer.from(this.crypto.ciphertext, \"hex\");\n    if (Keystore.mac(derivedKey, ciphertext) !== this.crypto.mac) {\n      throw new IncorrectPassword();\n    }\n    const decipher = crypto.createDecipheriv(\n      this.crypto.cipher,\n      derivedKey.slice(0, 16),\n      Buffer.from(this.crypto.cipherparams.iv, \"hex\")\n    );\n    return (\n      \"0x\" +\n      Buffer.concat([decipher.update(ciphertext), decipher.final()]).toString(\n        \"hex\"\n      )\n    );\n  }\n\n  extendedPrivateKey(password: string): ExtendedPrivateKey {\n    return ExtendedPrivateKey.parse(this.decrypt(password));\n  }\n\n  checkPassword(password: string): boolean {\n    const derivedKey = this.derivedKey(password);\n    const ciphertext = Buffer.from(this.crypto.ciphertext, \"hex\");\n    return Keystore.mac(derivedKey, ciphertext) === this.crypto.mac;\n  }\n\n  derivedKey(password: string): Buffer {\n    const { kdfparams } = this.crypto;\n    return crypto.scryptSync(\n      password,\n      Buffer.from(kdfparams.salt, \"hex\"),\n      kdfparams.dklen,\n      Keystore.scryptOptions(kdfparams)\n    );\n  }\n\n  static mac(derivedKey: Buffer, ciphertext: Buffer): HexStringWithoutPrefix {\n    return new Keccak(256)\n      .update(Buffer.concat([derivedKey.slice(16, 32), ciphertext]))\n      .digest(\"hex\");\n  }\n\n  static scryptOptions(kdfparams: KdfParams): crypto.ScryptOptions {\n    return {\n      N: kdfparams.n,\n      r: kdfparams.r,\n      p: kdfparams.p,\n      maxmem: 128 * (kdfparams.n + kdfparams.p + 2) * kdfparams.r,\n    };\n  }\n}\n"],"file":"keystore.js"}