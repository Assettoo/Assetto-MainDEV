{"version":3,"sources":["../src/keychain.ts"],"names":["ec","EC","EMPTY_BUFFER","Buffer","from","Keychain","constructor","privateKey","chainCode","isNeutered","publicKey","calculateFingerprint","identifier","hash160","fingerprint","slice","readUInt32BE","fromSeed","seed","i","crypto","createHmac","update","digest","keychain","fromPublicKey","path","pathComponents","split","depth","length","index","parseInt","deriveChild","hardened","data","indexBuffer","allocUnsafe","pk","concat","alloc","writeUInt32BE","il","ir","child","publicKeyAdd","privateKeyAdd","parentFingerprint","derivePath","master","includes","bip32","entries","forEach","c","childIndex","sha256","createHash","factor","result","BN","iadd","cmp","curve","n","isub","toArrayLike","x","toRed","red","y","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","point","g","mul","add","encode"],"mappings":"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","sourcesContent":["import crypto from \"crypto\";\nimport { ec as EC } from \"elliptic\";\nimport BN from \"bn.js\";\nimport { privateToPublic } from \"./key\";\n\nconst ec = new EC(\"secp256k1\");\n\nconst EMPTY_BUFFER = Buffer.from(\"\");\n\n// BIP32 Keychain. Not a full implementation.\nexport default class Keychain {\n  privateKey: Buffer = EMPTY_BUFFER;\n  publicKey: Buffer = EMPTY_BUFFER;\n  chainCode: Buffer = EMPTY_BUFFER;\n  index: number = 0;\n  depth: number = 0;\n  identifier: Buffer = EMPTY_BUFFER;\n  fingerprint: number = 0;\n  parentFingerprint: number = 0;\n\n  constructor(privateKey: Buffer, chainCode: Buffer) {\n    this.privateKey = privateKey;\n    this.chainCode = chainCode;\n\n    if (!this.isNeutered()) {\n      this.publicKey = privateToPublic(this.privateKey);\n    }\n  }\n\n  calculateFingerprint(): void {\n    this.identifier = this.hash160(this.publicKey);\n    this.fingerprint = this.identifier.slice(0, 4).readUInt32BE(0);\n  }\n\n  public static fromSeed(seed: Buffer): Keychain {\n    const i = crypto\n      .createHmac(\"sha512\", Buffer.from(\"Bitcoin seed\", \"utf8\"))\n      .update(seed)\n      .digest();\n    const keychain = new Keychain(i.slice(0, 32), i.slice(32));\n    keychain.calculateFingerprint();\n    return keychain;\n  }\n\n  // Create a child keychain with extended public key and path.\n  // Children of this keychain should not have any hardened paths.\n  public static fromPublicKey(\n    publicKey: Buffer,\n    chainCode: Buffer,\n    path: String\n  ): Keychain {\n    const keychain = new Keychain(EMPTY_BUFFER, chainCode);\n    keychain.publicKey = publicKey;\n    keychain.calculateFingerprint();\n\n    const pathComponents = path.split(\"/\");\n    keychain.depth = pathComponents.length - 1;\n    keychain.index = parseInt(pathComponents[pathComponents.length - 1], 10);\n\n    return keychain;\n  }\n\n  public deriveChild(index: number, hardened: boolean): Keychain {\n    let data: Buffer;\n\n    const indexBuffer: Buffer = Buffer.allocUnsafe(4);\n\n    if (hardened) {\n      const pk = Buffer.concat([Buffer.alloc(1, 0), this.privateKey]);\n      indexBuffer.writeUInt32BE(index + 0x80000000, 0);\n      data = Buffer.concat([pk, indexBuffer]);\n    } else {\n      indexBuffer.writeUInt32BE(index, 0);\n      data = Buffer.concat([this.publicKey, indexBuffer]);\n    }\n\n    const i = crypto.createHmac(\"sha512\", this.chainCode).update(data).digest();\n    const il = i.slice(0, 32);\n    const ir = i.slice(32);\n\n    let child: Keychain;\n    if (this.isNeutered()) {\n      child = new Keychain(EMPTY_BUFFER, ir);\n      child.publicKey = Keychain.publicKeyAdd(this.publicKey, il);\n      child.calculateFingerprint();\n    } else {\n      const privateKey = Keychain.privateKeyAdd(this.privateKey, il);\n      child = new Keychain(privateKey, ir);\n      child.calculateFingerprint();\n    }\n\n    child.index = index;\n    child.depth = this.depth + 1;\n    child.parentFingerprint = this.fingerprint;\n\n    return child;\n  }\n\n  public derivePath(path: string): Keychain {\n    const master = [\"m\", `/`, \"\"];\n    if (master.includes(path)) {\n      return this;\n    }\n\n    let bip32: Keychain = this;\n\n    let entries = path.split(\"/\");\n    if (entries[0] === \"m\") {\n      entries = entries.slice(1);\n    }\n    entries.forEach((c) => {\n      const childIndex = parseInt(c, 10);\n      const hardened = c.length > 1 && c[c.length - 1] === \"'\";\n      bip32 = bip32.deriveChild(childIndex, hardened);\n    });\n\n    return bip32;\n  }\n\n  isNeutered(): Boolean {\n    return this.privateKey === EMPTY_BUFFER;\n  }\n\n  hash160(data: Buffer): Buffer {\n    const sha256 = crypto.createHash(\"sha256\").update(data).digest();\n    return crypto.createHash(\"ripemd160\").update(sha256).digest();\n  }\n\n  private static privateKeyAdd(privateKey: Buffer, factor: Buffer): Buffer {\n    const result = new BN(factor);\n    result.iadd(new BN(privateKey));\n    if (result.cmp(ec.curve.n) >= 0) {\n      result.isub(ec.curve.n);\n    }\n\n    return result.toArrayLike(Buffer, \"be\", 32);\n  }\n\n  private static publicKeyAdd(publicKey: Buffer, factor: Buffer): Buffer {\n    const x = new BN(publicKey.slice(1)).toRed(ec.curve.red);\n    let y = x.redSqr().redIMul(x).redIAdd(ec.curve.b).redSqrt();\n    if ((publicKey[0] === 0x03) !== y.isOdd()) {\n      y = y.redNeg();\n    }\n    const point = ec.curve.g.mul(new BN(factor)).add({ x, y });\n    return Buffer.from(point.encode(true, true));\n  }\n}\n"],"file":"keychain.js"}