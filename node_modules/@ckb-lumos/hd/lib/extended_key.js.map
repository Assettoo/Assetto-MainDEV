{"version":3,"sources":["../src/extended_key.ts"],"names":["AddressType","ExtendedPublicKey","constructor","publicKey","chainCode","serialize","slice","parse","serialized","utils","assertHexString","AccountExtendedPublicKey","publicKeyInfo","type","index","getPublicKey","blake160","key","publicKeyToBlake160","path","pathFor","pathForReceiving","Receiving","pathForChange","Change","ckbAccountPath","keychain","Keychain","fromPublicKey","Buffer","from","deriveChild","toString","ExtendedPrivateKey","privateKey","toExtendedPublicKey","toAccountExtendedPublicKey","masterKeychain","accountKeychain","derivePath","fromSeed","seed","privateKeyInfo","privateKeyInfoByPath","privateKeyInfoFromKeychain"],"mappings":"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","sourcesContent":["import Keychain from \"./keychain\";\nimport key, { privateToPublic } from \"./key\";\nimport { utils, HexString } from \"@ckb-lumos/base\";\nimport { assertPublicKey, assertChainCode, assertPrivateKey } from \"./helper\";\n\nexport enum AddressType {\n  Receiving = 0,\n  Change = 1,\n}\n\nexport interface PublicKeyInfo {\n  blake160: HexString;\n  path: string;\n  publicKey: HexString;\n}\n\nexport class ExtendedPublicKey {\n  publicKey: HexString;\n  chainCode: HexString;\n\n  constructor(publicKey: HexString, chainCode: HexString) {\n    assertPublicKey(publicKey);\n    assertChainCode(chainCode);\n\n    this.publicKey = publicKey;\n    this.chainCode = chainCode;\n  }\n\n  serialize(): HexString {\n    return this.publicKey + this.chainCode.slice(2);\n  }\n\n  static parse(serialized: HexString): ExtendedPublicKey {\n    utils.assertHexString(\"serialized\", serialized);\n    return new ExtendedPublicKey(\n      serialized.slice(0, 68),\n      \"0x\" + serialized.slice(68)\n    );\n  }\n}\n\n// Extended public key of the BIP44 path down to account level,\n// which is `m/44'/309'/0'`. This key will be persisted to wallet\n// and used to derive receiving/change addresses.\nexport class AccountExtendedPublicKey extends ExtendedPublicKey {\n  public static ckbAccountPath = `m/44'/309'/0'`;\n\n  static parse(serialized: HexString): AccountExtendedPublicKey {\n    utils.assertHexString(\"serialized\", serialized);\n    return new AccountExtendedPublicKey(\n      serialized.slice(0, 68),\n      \"0x\" + serialized.slice(68)\n    );\n  }\n\n  publicKeyInfo(type: AddressType, index: number): PublicKeyInfo {\n    const publicKey: string = this.getPublicKey(type, index);\n    const blake160: string = key.publicKeyToBlake160(publicKey);\n    return {\n      publicKey,\n      blake160,\n      path: AccountExtendedPublicKey.pathFor(type, index),\n    };\n  }\n\n  public static pathForReceiving(index: number) {\n    return AccountExtendedPublicKey.pathFor(AddressType.Receiving, index);\n  }\n\n  public static pathForChange(index: number) {\n    return AccountExtendedPublicKey.pathFor(AddressType.Change, index);\n  }\n\n  public static pathFor(type: AddressType, index: number): string {\n    return `${AccountExtendedPublicKey.ckbAccountPath}/${type}/${index}`;\n  }\n\n  private getPublicKey(type = AddressType.Receiving, index: number): HexString {\n    const keychain = Keychain.fromPublicKey(\n      Buffer.from(this.publicKey.slice(2), \"hex\"),\n      Buffer.from(this.chainCode.slice(2), \"hex\"),\n      AccountExtendedPublicKey.ckbAccountPath\n    )\n      .deriveChild(type, false)\n      .deriveChild(index, false);\n\n    return \"0x\" + keychain.publicKey.toString(\"hex\");\n  }\n}\n\nexport interface PrivateKeyInfo {\n  privateKey: HexString;\n  publicKey: HexString;\n  path: string;\n}\n\nexport class ExtendedPrivateKey {\n  privateKey: HexString;\n  chainCode: HexString;\n\n  constructor(privateKey: HexString, chainCode: HexString) {\n    assertPrivateKey(privateKey);\n    assertChainCode(chainCode);\n\n    this.privateKey = privateKey;\n    this.chainCode = chainCode;\n  }\n\n  serialize(): HexString {\n    return this.privateKey + this.chainCode.slice(2);\n  }\n\n  toExtendedPublicKey(): ExtendedPublicKey {\n    const publicKey: HexString = privateToPublic(this.privateKey);\n    return new ExtendedPublicKey(publicKey, this.chainCode);\n  }\n\n  toAccountExtendedPublicKey(): AccountExtendedPublicKey {\n    const masterKeychain = new Keychain(\n      Buffer.from(this.privateKey.slice(2), \"hex\"),\n      Buffer.from(this.chainCode.slice(2), \"hex\")\n    );\n    const accountKeychain = masterKeychain.derivePath(\n      AccountExtendedPublicKey.ckbAccountPath\n    );\n\n    return new AccountExtendedPublicKey(\n      \"0x\" + accountKeychain.publicKey.toString(\"hex\"),\n      \"0x\" + accountKeychain.chainCode.toString(\"hex\")\n    );\n  }\n\n  static fromSeed(seed: Buffer): ExtendedPrivateKey {\n    const keychain = Keychain.fromSeed(seed);\n    return new ExtendedPrivateKey(\n      \"0x\" + keychain.privateKey.toString(\"hex\"),\n      \"0x\" + keychain.chainCode.toString(\"hex\")\n    );\n  }\n\n  privateKeyInfo(type: AddressType, index: number): PrivateKeyInfo {\n    const path = AccountExtendedPublicKey.pathFor(type, index);\n    return this.privateKeyInfoByPath(path);\n  }\n\n  privateKeyInfoByPath(path: string): PrivateKeyInfo {\n    const keychain = new Keychain(\n      Buffer.from(this.privateKey.slice(2), \"hex\"),\n      Buffer.from(this.chainCode.slice(2), \"hex\")\n    ).derivePath(path);\n\n    return this.privateKeyInfoFromKeychain(keychain, path);\n  }\n\n  private privateKeyInfoFromKeychain(\n    keychain: Keychain,\n    path: string\n  ): PrivateKeyInfo {\n    return {\n      privateKey: \"0x\" + keychain.privateKey.toString(\"hex\"),\n      publicKey: \"0x\" + keychain.publicKey.toString(\"hex\"),\n      path: path,\n    };\n  }\n\n  static parse(serialized: HexString): ExtendedPrivateKey {\n    utils.assertHexString(\"serialized\", serialized);\n    return new ExtendedPrivateKey(\n      serialized.slice(0, 66),\n      \"0x\" + serialized.slice(66)\n    );\n  }\n}\n"],"file":"extended_key.js"}