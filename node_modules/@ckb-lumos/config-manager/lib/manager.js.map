{"version":3,"sources":["../src/manager.ts"],"names":["assertHexString","debugPath","string","test","Error","assertHash","hash","length","assertInteger","i","nonNullable","condition","validateConfig","config","SCRIPTS","scriptName","Object","keys","scriptConfig","CODE_HASH","hashType","HASH_TYPE","TX_HASH","INDEX","depType","DEP_TYPE","shortId","SHORT_ID","undefined","predefined","LINA","getConfig","initializeConfigLegacy","env","process","configName","LUMOS_CONFIG_NAME","configFile","LUMOS_CONFIG_FILE","configFilename","data","require","readFileSync","loadedConfig","JSON","parse","e","initializeConfig","inputConfig","logger","deprecated"],"mappings":"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","sourcesContent":["import deepFreeze from \"deep-freeze-strict\";\nimport { logger } from \"@ckb-lumos/base\";\nimport { Config } from \"./types\";\nimport { predefined } from \"./predefined\";\n\nfunction assertHexString(debugPath: string, string: string) {\n  if (!/^0x([0-9a-fA-F][0-9a-fA-F])*$/.test(string)) {\n    throw new Error(`${debugPath} must be a hex string!`);\n  }\n}\n\nfunction assertHash(debugPath: string, hash: string) {\n  assertHexString(debugPath, hash);\n  if (hash.length != 66) {\n    throw new Error(`${debugPath} must be a hex string of 66 bytes long!`);\n  }\n}\n\nfunction assertInteger(debugPath: string, i: string) {\n  if (i === \"0x0\") {\n    return;\n  }\n  if (!/^0x[1-9a-fA-F][0-9a-fA-F]*$/.test(i)) {\n    throw new Error(`${debugPath} must be a hex integer!`);\n  }\n}\n\nfunction nonNullable(\n  condition: unknown,\n  debugPath = \"variable\"\n): asserts condition {\n  if (!condition) throw new Error(`${debugPath} cannot be nil`);\n}\n\nexport function validateConfig(config: Config) {\n  if (typeof config.SCRIPTS !== \"object\" || config.SCRIPTS == null)\n    throw new Error();\n\n  for (const scriptName of Object.keys(config.SCRIPTS)) {\n    const scriptConfig = config.SCRIPTS[scriptName];\n\n    nonNullable(scriptConfig?.CODE_HASH);\n\n    assertHash(`SCRIPTS.${scriptName}.CODE_HASH`, scriptConfig.CODE_HASH);\n    const hashType = scriptConfig.HASH_TYPE;\n    if (hashType !== \"type\" && hashType !== \"data\") {\n      throw new Error(\n        `SCRIPTS.${scriptName}.HASH_TYPE must either be data or type!`\n      );\n    }\n    assertHash(`SCRIPTS.${scriptName}.TX_HASH`, scriptConfig.TX_HASH);\n    assertInteger(`SCRIPTS.${scriptName}.INDEX`, scriptConfig.INDEX);\n    const depType = scriptConfig.DEP_TYPE;\n    if (depType !== \"dep_group\" && depType !== \"code\") {\n      throw new Error(\n        `SCRIPTS.${scriptName}.DEP_TYPE must either be dep_group or code!`\n      );\n    }\n    const shortId = scriptConfig.SHORT_ID;\n    // Short ID is optional\n    if (shortId != undefined) {\n      if (typeof shortId !== \"number\") {\n        throw new Error(\"SHORT_ID must be a number!\");\n      }\n    }\n  }\n}\n\nlet config: Config = predefined.LINA;\n\nexport function getConfig(): Config {\n  return config;\n}\n\n/**\n * Initialize current app with a config. The initializaton steps work as follows:\n * 1. If `LUMOS_CONFIG_NAME` environment variable is set to a predefined config,\n * the predefined config is loaded;\n * 2. If `LUMOS_CONFIG_FILE` environment variable is set, it will be used as the\n * name of a file containing the Config to use.\n * 3. A file named `config.json` in current running directory will be used as the\n * file containing the Config to use.\n * @deprecated\n * @returns void\n */\nfunction initializeConfigLegacy() {\n  const env = process?.env;\n  const configName = env?.LUMOS_CONFIG_NAME;\n\n  if (\n    (configName === \"LINA\" || configName === \"AGGRON4\") &&\n    predefined[configName]\n  ) {\n    config = predefined[configName];\n    return;\n  }\n\n  const configFile = env?.LUMOS_CONFIG_FILE;\n  const configFilename = configFile || \"config.json\";\n  try {\n    const data = require(\"fs\").readFileSync(configFilename);\n    const loadedConfig = JSON.parse(data);\n    validateConfig(loadedConfig);\n    config = deepFreeze(loadedConfig);\n  } catch (e) {\n    throw new Error(`Error loading config from file ${configFilename}: ${e}`);\n  }\n}\n\nexport function initializeConfig(inputConfig?: Config): void {\n  if (!inputConfig) {\n    logger.deprecated(\n      \"initializeConfig with env will be deprecated, please migrate to initializeConfig(...)\"\n    );\n    initializeConfigLegacy();\n  } else {\n    validateConfig(inputConfig);\n    config = deepFreeze(inputConfig);\n  }\n}\n"],"file":"manager.js"}