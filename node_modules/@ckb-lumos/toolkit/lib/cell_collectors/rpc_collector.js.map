{"version":3,"sources":["../../src/cell_collectors/rpc_collector.js"],"names":["RPCCollector","constructor","rpc","lockHash","skipCellWithContent","loadData","loadBlockNumber","Reader","serializeJson","collect","to","get_tip_block_number","currentFrom","JSBI","BigInt","lessThanOrEqual","currentTo","add","greaterThan","cells","get_cells_by_lock_hash","cell","type","output_data_len","data","cellWithData","get_live_cell","out_point","content","block_number","header","get_header","block_hash","number","cellbase","cell_output","capacity","lock"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEO,MAAMA,YAAN,CAAmB;AACxBC,EAAAA,WAAW,CACTC,GADS,EAETC,QAFS,EAGT;AACEC,IAAAA,mBAAmB,GAAG,IADxB;AAEEC,IAAAA,QAAQ,GAAG,KAFb;AAGEC,IAAAA,eAAe,GAAG;AAHpB,MAII,EAPK,EAQT;AACA,SAAKJ,GAAL,GAAWA,GAAX;AACA,SAAKC,QAAL,GAAgB,IAAII,cAAJ,CAAWJ,QAAX,EAAqBK,aAArB,EAAhB;AACA,SAAKJ,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACD;;AAEa,SAAPG,OAAO,GAAG;AACf,UAAMC,EAAE,GAAG,4BAAkB,MAAM,KAAKR,GAAL,CAASS,oBAAT,EAAxB,CAAX;;AACA,QAAIC,WAAW,GAAGC,cAAKC,MAAL,CAAY,CAAZ,CAAlB;;AACA,WAAOD,cAAKE,eAAL,CAAqBH,WAArB,EAAkCF,EAAlC,CAAP,EAA8C;AAC5C,UAAIM,SAAS,GAAGH,cAAKI,GAAL,CAASL,WAAT,EAAsBC,cAAKC,MAAL,CAAY,GAAZ,CAAtB,CAAhB;;AACA,UAAID,cAAKK,WAAL,CAAiBF,SAAjB,EAA4BN,EAA5B,CAAJ,EAAqC;AACnCM,QAAAA,SAAS,GAAGN,EAAZ;AACD;;AACD,YAAMS,KAAK,GAAG,MAAM,KAAKjB,GAAL,CAASkB,sBAAT,CAClB,KAAKjB,QADa,EAElB,4BAAkBS,WAAlB,CAFkB,EAGlB,4BAAkBI,SAAlB,CAHkB,CAApB;;AAKA,WAAK,MAAMK,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,YAAI,KAAKf,mBAAT,EAA8B;AAC5B,cACEiB,IAAI,CAACC,IAAL,IACAT,cAAKK,WAAL,CACE,4BAAkBG,IAAI,CAACE,eAAvB,CADF,EAEEV,cAAKC,MAAL,CAAY,GAAZ,CAFF,CAFF,EAME;AACA;AACD;AACF;;AACD,YAAIU,IAAI,GAAG,IAAX;;AACA,YAAI,KAAKnB,QAAT,EAAmB;AACjB,gBAAMoB,YAAY,GAAG,MAAM,KAAKvB,GAAL,CAASwB,aAAT,CACzBL,IAAI,CAACM,SADoB,EAEzB,IAFyB,CAA3B;AAIAH,UAAAA,IAAI,GAAGC,YAAY,CAACJ,IAAb,CAAkBG,IAAlB,CAAuBI,OAA9B;AACD;;AACD,YAAIC,YAAY,GAAG,IAAnB;;AACA,YAAI,KAAKvB,eAAT,EAA0B;AACxB,gBAAMwB,MAAM,GAAG,MAAM,KAAK5B,GAAL,CAAS6B,UAAT,CAAoBV,IAAI,CAACW,UAAzB,CAArB;AACAH,UAAAA,YAAY,GAAGC,MAAM,CAACG,MAAtB;AACD;;AACD,cAAM;AACJC,UAAAA,QAAQ,EAAEb,IAAI,CAACa,QADX;AAEJC,UAAAA,WAAW,EAAE;AACXC,YAAAA,QAAQ,EAAEf,IAAI,CAACe,QADJ;AAEXC,YAAAA,IAAI,EAAEhB,IAAI,CAACgB,IAFA;AAGXf,YAAAA,IAAI,EAAED,IAAI,CAACC;AAHA,WAFT;AAOJK,UAAAA,SAAS,EAAEN,IAAI,CAACM,SAPZ;AAQJK,UAAAA,UAAU,EAAEX,IAAI,CAACW,UARb;AASJR,UAAAA,IAAI,EAAEA,IATF;AAUJD,UAAAA,eAAe,EAAEF,IAAI,CAACE,eAVlB;AAWJM,UAAAA;AAXI,SAAN;AAaD;;AACDjB,MAAAA,WAAW,GAAGC,cAAKI,GAAL,CAASD,SAAT,EAAoBH,cAAKC,MAAL,CAAY,CAAZ,CAApB,CAAd;AACD;AACF;;AAvEuB","sourcesContent":["import JSBI from \"jsbi\";\nimport { Reader } from \"../reader\";\nimport { HexStringToBigInt, BigIntToHexString } from \"../rpc\";\n\nexport class RPCCollector {\n  constructor(\n    rpc,\n    lockHash,\n    {\n      skipCellWithContent = true,\n      loadData = false,\n      loadBlockNumber = true,\n    } = {}\n  ) {\n    this.rpc = rpc;\n    this.lockHash = new Reader(lockHash).serializeJson();\n    this.skipCellWithContent = skipCellWithContent;\n    this.loadData = loadData;\n    this.loadBlockNumber = loadBlockNumber;\n  }\n\n  async *collect() {\n    const to = HexStringToBigInt(await this.rpc.get_tip_block_number());\n    let currentFrom = JSBI.BigInt(0);\n    while (JSBI.lessThanOrEqual(currentFrom, to)) {\n      let currentTo = JSBI.add(currentFrom, JSBI.BigInt(100));\n      if (JSBI.greaterThan(currentTo, to)) {\n        currentTo = to;\n      }\n      const cells = await this.rpc.get_cells_by_lock_hash(\n        this.lockHash,\n        BigIntToHexString(currentFrom),\n        BigIntToHexString(currentTo)\n      );\n      for (const cell of cells) {\n        if (this.skipCellWithContent) {\n          if (\n            cell.type ||\n            JSBI.greaterThan(\n              HexStringToBigInt(cell.output_data_len),\n              JSBI.BigInt(100)\n            )\n          ) {\n            continue;\n          }\n        }\n        let data = null;\n        if (this.loadData) {\n          const cellWithData = await this.rpc.get_live_cell(\n            cell.out_point,\n            true\n          );\n          data = cellWithData.cell.data.content;\n        }\n        let block_number = null;\n        if (this.loadBlockNumber) {\n          const header = await this.rpc.get_header(cell.block_hash);\n          block_number = header.number;\n        }\n        yield {\n          cellbase: cell.cellbase,\n          cell_output: {\n            capacity: cell.capacity,\n            lock: cell.lock,\n            type: cell.type,\n          },\n          out_point: cell.out_point,\n          block_hash: cell.block_hash,\n          data: data,\n          output_data_len: cell.output_data_len,\n          block_number,\n        };\n      }\n      currentFrom = JSBI.add(currentTo, JSBI.BigInt(1));\n    }\n  }\n}\n"],"file":"rpc_collector.js"}