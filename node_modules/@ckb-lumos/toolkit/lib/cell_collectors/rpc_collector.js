"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RPCCollector = void 0;

var _jsbi = _interopRequireDefault(require("jsbi"));

var _reader = require("../reader");

var _rpc = require("../rpc");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class RPCCollector {
  constructor(rpc, lockHash, {
    skipCellWithContent = true,
    loadData = false,
    loadBlockNumber = true
  } = {}) {
    this.rpc = rpc;
    this.lockHash = new _reader.Reader(lockHash).serializeJson();
    this.skipCellWithContent = skipCellWithContent;
    this.loadData = loadData;
    this.loadBlockNumber = loadBlockNumber;
  }

  async *collect() {
    const to = (0, _rpc.HexStringToBigInt)(await this.rpc.get_tip_block_number());

    let currentFrom = _jsbi.default.BigInt(0);

    while (_jsbi.default.lessThanOrEqual(currentFrom, to)) {
      let currentTo = _jsbi.default.add(currentFrom, _jsbi.default.BigInt(100));

      if (_jsbi.default.greaterThan(currentTo, to)) {
        currentTo = to;
      }

      const cells = await this.rpc.get_cells_by_lock_hash(this.lockHash, (0, _rpc.BigIntToHexString)(currentFrom), (0, _rpc.BigIntToHexString)(currentTo));

      for (const cell of cells) {
        if (this.skipCellWithContent) {
          if (cell.type || _jsbi.default.greaterThan((0, _rpc.HexStringToBigInt)(cell.output_data_len), _jsbi.default.BigInt(100))) {
            continue;
          }
        }

        let data = null;

        if (this.loadData) {
          const cellWithData = await this.rpc.get_live_cell(cell.out_point, true);
          data = cellWithData.cell.data.content;
        }

        let block_number = null;

        if (this.loadBlockNumber) {
          const header = await this.rpc.get_header(cell.block_hash);
          block_number = header.number;
        }

        yield {
          cellbase: cell.cellbase,
          cell_output: {
            capacity: cell.capacity,
            lock: cell.lock,
            type: cell.type
          },
          out_point: cell.out_point,
          block_hash: cell.block_hash,
          data: data,
          output_data_len: cell.output_data_len,
          block_number
        };
      }

      currentFrom = _jsbi.default.add(currentTo, _jsbi.default.BigInt(1));
    }
  }

}

exports.RPCCollector = RPCCollector;
//# sourceMappingURL=rpc_collector.js.map