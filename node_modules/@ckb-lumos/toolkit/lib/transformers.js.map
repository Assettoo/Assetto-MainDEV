{"version":3,"sources":["../src/transformers.js"],"names":["invokeSerializeJson","debugPath","value","Object","serializeJson","Function","call","transformObject","object","keys","Error","result","key","f","entries","camelKey","replace","group","toUpperCase","TransformScript","script","validation","code_hash","hash_type","args","validators","ValidateScript","TransformOutPoint","outPoint","tx_hash","index","ValidateOutPoint","toInvoke","transform","TransformCellInput","cellInput","since","previous_output","ValidateCellInput","TransformCellOutput","cellOutput","capacity","lock","type","ValidateCellOutput","TransformCellDep","cellDep","out_point","dep_type","ValidateCellDep","toInvokeArray","invokeFunction","array","map","item","i","TransformRawTransaction","rawTransaction","version","cell_deps","header_deps","inputs","outputs","outputs_data","ValidateRawTransaction","TransformTransaction","transaction","witnesses","ValidateTransaction","TransformRawHeader","rawHeader","compact_target","timestamp","number","epoch","parent_hash","transactions_root","proposals_hash","uncles_hash","dao","ValidateRawHeader","TransformHeader","header","nonce","ValidateHeader","TransformUncleBlock","uncleBlock","proposals","ValidateUncleBlock","TransformBlock","block","uncles","transactions","ValidateBlock","TransformCellbaseWitness","cellbaseWitness","message","ValidateCellbaseWitness","TransformWitnessArgs","witnessArgs","input_type","output_type","ValidateWitnessArgs"],"mappings":"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","sourcesContent":["// This package provides transformer functions that transform JavaScript objects\n// into JSON ready objects that can be passed to RPC. It following the following\n// rules:\n//\n// 1. If the specified object has a serializeJson method, it would invoke this\n// method and use the result to replace current object.\n// 2. It then restricts the keys of the object to keys required by the specified\n// entity(i.e., a Script would only have code_hash, hash_type, args keys),for each\n// sub-field, it then recursively perform the steps here from step 1.\n// 3. It then optionally run validator functions to ensure the resulting object\n// follows specified rules.\n//\n// Note rule 1 here provides the flexibility in defining your own structures: you\n// could define a class containing custom data structures, then provide a\n// serializeJson that transforms the custom one into the rigid data structure\n// required by CKB. You can also leverage the Reader class we provide as much as\n// possible. Since Reader class does provide serializeJson methods, transformers\n// here will transform them to valid hex strings required by CKB.\nimport * as validators from \"./validators\";\n\nfunction invokeSerializeJson(debugPath, value) {\n  if (value instanceof Object && value.serializeJson instanceof Function) {\n    return value.serializeJson.call(value);\n  }\n  return value;\n}\n\nfunction transformObject(debugPath, object, keys) {\n  object = invokeSerializeJson(debugPath, object);\n  if (!(object instanceof Object)) {\n    throw new Error(`Transformed ${debugPath} is not an object!`);\n  }\n  const result = {};\n\n  for (const [key, f] of Object.entries(keys)) {\n    let value = object[key];\n    if (!value) {\n      const camelKey = key.replace(/(_[a-z])/g, (group) =>\n        group.toUpperCase().replace(\"_\", \"\")\n      );\n      value = object[camelKey];\n    }\n    if (value) {\n      result[key] = f(`${debugPath}.${key}`, value);\n    }\n  }\n  return result;\n}\n\nexport function TransformScript(\n  script,\n  { validation = true, debugPath = \"script\" } = {}\n) {\n  script = transformObject(debugPath, script, {\n    code_hash: invokeSerializeJson,\n    hash_type: invokeSerializeJson,\n    args: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateScript(script, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return script;\n}\n\nexport function TransformOutPoint(\n  outPoint,\n  { validation = true, debugPath = \"out_point\" } = {}\n) {\n  outPoint = transformObject(debugPath, outPoint, {\n    tx_hash: invokeSerializeJson,\n    index: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateOutPoint(outPoint, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return outPoint;\n}\n\nfunction toInvoke(transform) {\n  return function (debugPath, value) {\n    return transform(value, {\n      validation: false,\n      debugPath,\n    });\n  };\n}\n\nexport function TransformCellInput(\n  cellInput,\n  { validation = true, debugPath = \"cell_input\" } = {}\n) {\n  cellInput = transformObject(debugPath, cellInput, {\n    since: invokeSerializeJson,\n    previous_output: toInvoke(TransformOutPoint),\n  });\n\n  if (validation) {\n    validators.ValidateCellInput(cellInput, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return cellInput;\n}\n\nexport function TransformCellOutput(\n  cellOutput,\n  { validation = true, debugPath = \"cell_output\" } = {}\n) {\n  cellOutput = transformObject(debugPath, cellOutput, {\n    capacity: invokeSerializeJson,\n    lock: toInvoke(TransformScript),\n    type: toInvoke(TransformScript),\n  });\n\n  if (validation) {\n    validators.ValidateCellOutput(cellOutput, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return cellOutput;\n}\n\nexport function TransformCellDep(\n  cellDep,\n  { validation = true, debugPath = \"cell_dep\" } = {}\n) {\n  cellDep = transformObject(debugPath, cellDep, {\n    out_point: toInvoke(TransformOutPoint),\n    dep_type: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateCellDep(cellDep, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return cellDep;\n}\n\nfunction toInvokeArray(invokeFunction) {\n  return function (debugPath, array) {\n    return array.map((item, i) => {\n      return invokeFunction(`${debugPath}[${i}]`, item);\n    });\n  };\n}\n\nexport function TransformRawTransaction(\n  rawTransaction,\n  { validation = true, debugPath = \"raw_transaction\" } = {}\n) {\n  rawTransaction = transformObject(debugPath, rawTransaction, {\n    version: invokeSerializeJson,\n    cell_deps: toInvokeArray(toInvoke(TransformCellDep)),\n    header_deps: toInvokeArray(invokeSerializeJson),\n    inputs: toInvokeArray(toInvoke(TransformCellInput)),\n    outputs: toInvokeArray(toInvoke(TransformCellOutput)),\n    outputs_data: toInvokeArray(invokeSerializeJson),\n  });\n\n  if (validation) {\n    validators.ValidateRawTransaction(rawTransaction, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return rawTransaction;\n}\n\nexport function TransformTransaction(\n  transaction,\n  { validation = true, debugPath = \"transaction\" } = {}\n) {\n  transaction = transformObject(debugPath, transaction, {\n    version: invokeSerializeJson,\n    cell_deps: toInvokeArray(toInvoke(TransformCellDep)),\n    header_deps: toInvokeArray(invokeSerializeJson),\n    inputs: toInvokeArray(toInvoke(TransformCellInput)),\n    outputs: toInvokeArray(toInvoke(TransformCellOutput)),\n    outputs_data: toInvokeArray(invokeSerializeJson),\n    witnesses: toInvokeArray(invokeSerializeJson),\n  });\n\n  if (validation) {\n    validators.ValidateTransaction(transaction, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return transaction;\n}\n\nexport function TransformRawHeader(\n  rawHeader,\n  { validation = true, debugPath = \"raw_header\" } = {}\n) {\n  rawHeader = transformObject(debugPath, rawHeader, {\n    version: invokeSerializeJson,\n    compact_target: invokeSerializeJson,\n    timestamp: invokeSerializeJson,\n    number: invokeSerializeJson,\n    epoch: invokeSerializeJson,\n    parent_hash: invokeSerializeJson,\n    transactions_root: invokeSerializeJson,\n    proposals_hash: invokeSerializeJson,\n    uncles_hash: invokeSerializeJson,\n    dao: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateRawHeader(rawHeader, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return rawHeader;\n}\n\nexport function TransformHeader(\n  header,\n  { validation = true, debugPath = \"header\" } = {}\n) {\n  header = transformObject(debugPath, header, {\n    version: invokeSerializeJson,\n    compact_target: invokeSerializeJson,\n    timestamp: invokeSerializeJson,\n    number: invokeSerializeJson,\n    epoch: invokeSerializeJson,\n    parent_hash: invokeSerializeJson,\n    transactions_root: invokeSerializeJson,\n    proposals_hash: invokeSerializeJson,\n    uncles_hash: invokeSerializeJson,\n    dao: invokeSerializeJson,\n    nonce: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateHeader(header, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return header;\n}\n\nexport function TransformUncleBlock(\n  uncleBlock,\n  { validation = true, debugPath = \"uncle_block\" } = {}\n) {\n  uncleBlock = transformObject(debugPath, uncleBlock, {\n    header: toInvoke(TransformHeader),\n    proposals: toInvokeArray(invokeSerializeJson),\n  });\n\n  if (validation) {\n    validators.ValidateUncleBlock(uncleBlock, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return uncleBlock;\n}\n\nexport function TransformBlock(\n  block,\n  { validation = true, debugPath = \"block\" } = {}\n) {\n  block = transformObject(debugPath, block, {\n    header: toInvoke(TransformHeader),\n    uncles: toInvokeArray(toInvoke(TransformUncleBlock)),\n    transactions: toInvokeArray(toInvoke(TransformTransaction)),\n    proposals: toInvokeArray(invokeSerializeJson),\n  });\n\n  if (validation) {\n    validators.ValidateBlock(block, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return block;\n}\n\nexport function TransformCellbaseWitness(\n  cellbaseWitness,\n  { validation = true, debugPath = \"cellbase_witness\" } = {}\n) {\n  cellbaseWitness = transformObject(debugPath, cellbaseWitness, {\n    lock: toInvoke(TransformScript),\n    message: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateCellbaseWitness(cellbaseWitness, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return cellbaseWitness;\n}\n\nexport function TransformWitnessArgs(\n  witnessArgs,\n  { validation = true, debugPath = \"witness_args\" } = {}\n) {\n  witnessArgs = transformObject(debugPath, witnessArgs, {\n    lock: invokeSerializeJson,\n    input_type: invokeSerializeJson,\n    output_type: invokeSerializeJson,\n  });\n\n  if (validation) {\n    validators.ValidateWitnessArgs(witnessArgs, {\n      debugPath: `(transformed) ${debugPath}`,\n    });\n  }\n  return witnessArgs;\n}\n"],"file":"transformers.js"}