{"version":3,"sources":["../src/reader.js"],"names":["BaseReader","constructor","__isByteLikeReader__","isReader","x","ArrayBufferReader","buffer","view","DataView","length","byteLength","indexAt","i","getUint8","toArrayBuffer","serializeJson","Array","prototype","map","call","Uint8Array","toString","slice","join","HexStringReader","string","parseInt","substr","ArrayBuffer","setUint8","Reader","input","startsWith","Error","from","fromRawString","c","charCodeAt"],"mappings":"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","sourcesContent":["class BaseReader {\n  constructor() {\n    /**\n     * instanceof would be nice here, but when a user use multi version of Reader that may cause problem\n     * @example\n     * const { Reader } = require('ckb-js-toolkit'); // ckb-js-toolkit@0.100.1\n     * const { readSomething } = require('other-serializer-lib'); // dependent on ckb-js-toolkit@0.100.0\n     *\n     * readSomething() instanceof Reader; // false\n     *\n     * @type {boolean}\n     * @protected\n     */\n    this.__isByteLikeReader__ = true;\n  }\n\n  static isReader(x) {\n    if (x == null) return false;\n    if (x instanceof BaseReader) return true;\n    return x.__isByteLikeReader__ === true;\n  }\n}\n\nclass ArrayBufferReader extends BaseReader {\n  constructor(buffer) {\n    super();\n    this.view = new DataView(buffer);\n  }\n\n  length() {\n    return this.view.byteLength;\n  }\n\n  indexAt(i) {\n    return this.view.getUint8(i);\n  }\n\n  toArrayBuffer() {\n    return this.view.buffer;\n  }\n\n  serializeJson() {\n    return (\n      \"0x\" +\n      Array.prototype.map\n        .call(new Uint8Array(this.view.buffer), (x) =>\n          (\"00\" + x.toString(16)).slice(-2)\n        )\n        .join(\"\")\n    );\n  }\n}\n\nclass HexStringReader extends BaseReader {\n  constructor(string) {\n    super();\n    this.string = string;\n  }\n\n  length() {\n    return this.string.length / 2 - 1;\n  }\n\n  indexAt(i) {\n    return parseInt(this.string.substr(2 + i * 2, 2), 16);\n  }\n\n  toArrayBuffer() {\n    const buffer = new ArrayBuffer(this.length());\n    const view = new DataView(buffer);\n\n    for (let i = 0; i < this.length(); i++) {\n      view.setUint8(i, this.indexAt(i));\n    }\n    return buffer;\n  }\n\n  serializeJson() {\n    return this.string;\n  }\n}\n\nexport class Reader extends BaseReader {\n  constructor(input) {\n    super();\n    if (\n      input instanceof HexStringReader ||\n      input instanceof ArrayBufferReader\n    ) {\n      return input;\n    }\n    if (typeof input === \"string\") {\n      if (!input.startsWith(\"0x\") || input.length % 2 !== 0) {\n        throw new Error(\n          \"Hex string must start with 0x, and has even numbered length!\"\n        );\n      }\n      return new HexStringReader(input);\n    }\n    if (input instanceof ArrayBuffer) {\n      return new ArrayBufferReader(input);\n    }\n    if (input instanceof Uint8Array) {\n      return new ArrayBufferReader(Uint8Array.from(input).buffer);\n    }\n    throw new Error(\"Reader can only accept hex string or ArrayBuffer!\");\n  }\n\n  static from(x) {\n    return new Reader(x);\n  }\n\n  static fromRawString(string) {\n    const buffer = new ArrayBuffer(string.length);\n    const view = new DataView(buffer);\n\n    for (let i = 0; i < string.length; i++) {\n      const c = string.charCodeAt(i);\n      if (c > 0xff) {\n        throw new Error(\"fromRawString can only accept UTF-8 raw string!\");\n      }\n      view.setUint8(i, c);\n    }\n    return new ArrayBufferReader(buffer);\n  }\n}\n"],"file":"reader.js"}