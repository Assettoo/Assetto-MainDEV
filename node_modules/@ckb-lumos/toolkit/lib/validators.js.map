{"version":3,"sources":["../src/validators.js"],"names":["assertObject","debugPath","object","Object","Error","assertObjectWithKeys","expectedKeys","optionalKeys","providedKeys","keys","sort","requiredLength","length","maximalLength","errorMessage","join","optionalProvidedKeys","filter","key","includes","find","assertHexString","string","test","assertHash","hash","assertInteger","i","ValidateScript","script","nestedValidation","code_hash","args","hash_type","ValidateOutPoint","outPoint","tx_hash","index","ValidateCellInput","cellInput","since","previous_output","ValidateCellOutput","cellOutput","capacity","lock","type","ValidateCellDep","cellDep","dep_type","out_point","assertArray","array","validateFunction","Array","isArray","toAssert","value","assertCommonTransaction","rawTransaction","version","cell_deps","header_deps","inputs","outputs","outputs_data","ValidateRawTransaction","ValidateTransaction","transaction","witnesses","assertCommonHeader","rawHeader","compact_target","timestamp","number","epoch","parent_hash","transactions_root","proposals_hash","uncles_hash","dao","ValidateRawHeader","ValidateHeader","header","nonce","assertProposalShortId","shortId","ValidateUncleBlock","uncleBlock","proposals","ValidateBlock","block","uncles","transactions","ValidateCellbaseWitness","cellbaseWitness","message","ValidateWitnessArgs","witnessArgs","input_type","output_type"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n// This package provides validator functions that check JSON objects are\n// following the correct format, so we can submit them to CKB via RPC\n// directly\n\nfunction assertObject(debugPath, object) {\n  if (!(object instanceof Object)) {\n    throw new Error(`${debugPath} is not an object!`);\n  }\n}\n\nfunction assertObjectWithKeys(\n  debugPath,\n  object,\n  expectedKeys,\n  optionalKeys = []\n) {\n  assertObject(debugPath, object);\n  const providedKeys = Object.keys(object).sort();\n  const requiredLength = expectedKeys.length;\n  const maximalLength = expectedKeys.length + optionalKeys.length;\n  const errorMessage = `${debugPath} does not have correct keys! Required keys: [${expectedKeys\n    .sort()\n    .join(\", \")}], optional keys: [${optionalKeys\n    .sort()\n    .join(\", \")}], actual keys: [${providedKeys.join(\", \")}]`;\n  if (\n    providedKeys.length < requiredLength ||\n    providedKeys.length > maximalLength\n  ) {\n    throw new Error(errorMessage);\n  }\n  let optionalProvidedKeys = providedKeys.filter(\n    (key) => !expectedKeys.includes(key)\n  );\n  if (providedKeys.length - optionalProvidedKeys.length !== requiredLength) {\n    throw new Error(errorMessage);\n  }\n  if (optionalProvidedKeys.find((key) => !optionalKeys.includes(key))) {\n    throw new Error(errorMessage);\n  }\n}\n\nfunction assertHexString(debugPath, string) {\n  if (!/^0x([0-9a-fA-F][0-9a-fA-F])*$/.test(string)) {\n    throw new Error(`${debugPath} must be a hex string!`);\n  }\n}\n\nfunction assertHash(debugPath, hash) {\n  assertHexString(debugPath, hash);\n  if (hash.length !== 66) {\n    throw new Error(`${debugPath} must be a hex string of 66 bytes long!`);\n  }\n}\n\nfunction assertInteger(debugPath, i) {\n  if (i === \"0x0\") {\n    return;\n  }\n  if (!/^0x[1-9a-fA-F][0-9a-fA-F]*$/.test(i)) {\n    throw new Error(`${debugPath} must be a hex integer!`);\n  }\n}\n\nexport function ValidateScript(\n  script,\n  { nestedValidation = true, debugPath = \"script\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    script,\n    [\"code_hash\", \"hash_type\", \"args\"],\n    []\n  );\n  assertHash(`${debugPath}.code_hash`, script.code_hash);\n  assertHexString(`${debugPath}.args`, script.args);\n\n  if (script.hash_type !== \"data\" && script.hash_type !== \"type\") {\n    throw new Error(`${debugPath}.hash_type must be either data or type!`);\n  }\n}\n\nexport function ValidateOutPoint(\n  outPoint,\n  { nestedValidation = true, debugPath = \"out_point\" } = {}\n) {\n  assertObjectWithKeys(debugPath, outPoint, [\"tx_hash\", \"index\"], []);\n  assertHash(`${debugPath}.tx_hash`, outPoint.tx_hash);\n  assertInteger(`${debugPath}.index`, outPoint.index);\n}\n\nexport function ValidateCellInput(\n  cellInput,\n  { nestedValidation = true, debugPath = \"cell_input\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellInput, [\"since\", \"previous_output\"], []);\n  assertInteger(`${debugPath}.since`, cellInput.since);\n\n  if (nestedValidation) {\n    ValidateOutPoint(cellInput.previous_output, {\n      debugPath: `${debugPath}.previous_output`,\n    });\n  }\n}\n\nexport function ValidateCellOutput(\n  cellOutput,\n  { nestedValidation = true, debugPath = \"cell_output\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellOutput, [\"capacity\", \"lock\"], [\"type\"]);\n  assertInteger(`${debugPath}.capacity`, cellOutput.capacity);\n\n  if (nestedValidation) {\n    ValidateScript(cellOutput.lock, {\n      debugPath: `${debugPath}.lock`,\n    });\n    if (cellOutput.type) {\n      ValidateScript(cellOutput.type, {\n        debugPath: `${debugPath}.type`,\n      });\n    }\n  }\n}\n\nexport function ValidateCellDep(\n  cellDep,\n  { nestedValidation = true, debugPath = \"cell_dep\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellDep, [\"out_point\", \"dep_type\"], []);\n  if (cellDep.dep_type !== \"code\" && cellDep.dep_type !== \"dep_group\") {\n    throw new Error(`${debugPath}.dep_type must be either code or dep_group!`);\n  }\n\n  if (nestedValidation) {\n    ValidateOutPoint(cellDep.out_point, {\n      debugPath: `${debugPath}.out_point`,\n    });\n  }\n}\n\nfunction assertArray(debugPath, array, validateFunction, nestedValidation) {\n  if (!Array.isArray(array)) {\n    throw new Error(`${debugPath} is not an array!`);\n  }\n  if (nestedValidation) {\n    for (let i = 0; i < array.length; i++) {\n      validateFunction(`${debugPath}[${i}]`, array[i]);\n    }\n  }\n}\n\nfunction toAssert(validateFunction, nestedValidation) {\n  return function (debugPath, value) {\n    validateFunction(value, {\n      nestedValidation: nestedValidation,\n      debugPath: debugPath,\n    });\n  };\n}\n\nfunction assertCommonTransaction(debugPath, rawTransaction, nestedValidation) {\n  assertInteger(`${debugPath}.version`, rawTransaction.version);\n  assertArray(\n    `${debugPath}.cell_deps`,\n    rawTransaction.cell_deps,\n    toAssert(ValidateCellDep, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.header_deps`,\n    rawTransaction.header_deps,\n    assertHash,\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.inputs`,\n    rawTransaction.inputs,\n    toAssert(ValidateCellInput, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.outputs`,\n    rawTransaction.outputs,\n    toAssert(ValidateCellOutput, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.outputs_data`,\n    rawTransaction.outputs_data,\n    assertHexString,\n    nestedValidation\n  );\n}\n\nexport function ValidateRawTransaction(\n  rawTransaction,\n  { nestedValidation = true, debugPath = \"raw_transaction\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    rawTransaction,\n    [\n      \"version\",\n      \"cell_deps\",\n      \"header_deps\",\n      \"inputs\",\n      \"outputs\",\n      \"outputs_data\",\n    ],\n    []\n  );\n  assertCommonTransaction(debugPath, rawTransaction, nestedValidation);\n}\n\nexport function ValidateTransaction(\n  transaction,\n  { nestedValidation = true, debugPath = \"transaction\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    transaction,\n    [\n      \"version\",\n      \"cell_deps\",\n      \"header_deps\",\n      \"inputs\",\n      \"outputs\",\n      \"outputs_data\",\n      \"witnesses\",\n    ],\n    []\n  );\n  assertCommonTransaction(debugPath, transaction, nestedValidation);\n  assertArray(\n    `${debugPath}.witnesses`,\n    transaction.witnesses,\n    assertHexString,\n    nestedValidation\n  );\n}\n\nfunction assertCommonHeader(debugPath, rawHeader) {\n  assertInteger(`${debugPath}.version`, rawHeader.version);\n  assertInteger(`${debugPath}.compact_target`, rawHeader.compact_target);\n  assertInteger(`${debugPath}.timestamp`, rawHeader.timestamp);\n  assertInteger(`${debugPath}.number`, rawHeader.number);\n  assertInteger(`${debugPath}.epoch`, rawHeader.epoch);\n  assertHash(`${debugPath}.parent_hash`, rawHeader.parent_hash);\n  assertHash(`${debugPath}.transactions_root`, rawHeader.transactions_root);\n  assertHash(`${debugPath}.proposals_hash`, rawHeader.proposals_hash);\n  assertHash(`${debugPath}.uncles_hash`, rawHeader.uncles_hash);\n  assertHash(`${debugPath}.dao`, rawHeader.dao);\n}\n\nexport function ValidateRawHeader(\n  rawHeader,\n  { nestedValidation = true, debugPath = \"raw_header\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    rawHeader,\n    [\n      \"version\",\n      \"compact_target\",\n      \"timestamp\",\n      \"number\",\n      \"epoch\",\n      \"parent_hash\",\n      \"transactions_root\",\n      \"proposals_hash\",\n      \"uncles_hash\",\n      \"dao\",\n    ],\n    []\n  );\n  assertCommonHeader(debugPath, rawHeader);\n}\n\nexport function ValidateHeader(\n  header,\n  { nestedValidation = true, debugPath = \"header\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    header,\n    [\n      \"version\",\n      \"compact_target\",\n      \"timestamp\",\n      \"number\",\n      \"epoch\",\n      \"parent_hash\",\n      \"transactions_root\",\n      \"proposals_hash\",\n      \"uncles_hash\",\n      \"dao\",\n      \"nonce\",\n    ],\n    []\n  );\n  assertHexString(`${debugPath}.nonce`, header.nonce);\n  if (header.nonce.length !== 34) {\n    throw new Error(\n      `${debugPath}.nonce must be a hex string of 34 bytes long!`\n    );\n  }\n}\n\nfunction assertProposalShortId(debugPath, shortId) {\n  assertHexString(debugPath, shortId);\n  if (shortId.length !== 22) {\n    throw new Error(`${debugPath} must be a hex string of 22 bytes long!`);\n  }\n}\n\nexport function ValidateUncleBlock(\n  uncleBlock,\n  { nestedValidation = true, debugPath = \"uncle_block\" } = {}\n) {\n  assertObjectWithKeys(debugPath, uncleBlock, [\"header\", \"proposals\"], []);\n\n  if (nestedValidation) {\n    ValidateHeader(uncleBlock.header, {\n      debugPath: `${debugPath}.header`,\n    });\n  }\n  assertArray(\n    `${debugPath}.proposals`,\n    uncleBlock.proposals,\n    assertProposalShortId,\n    nestedValidation\n  );\n}\n\nexport function ValidateBlock(\n  block,\n  { nestedValidation = true, debugPath = \"block\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    block,\n    [\"header\", \"uncles\", \"transactions\", \"proposals\"],\n    []\n  );\n\n  if (nestedValidation) {\n    ValidateHeader(block.header, {\n      debugPath: `${debugPath}.header`,\n    });\n  }\n  assertArray(\n    `${debugPath}.uncles`,\n    block.uncles,\n    toAssert(ValidateUncleBlock, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.transactions`,\n    block.transactions,\n    toAssert(ValidateTransaction, nestedValidation),\n    nestedValidation\n  );\n  assertArray(\n    `${debugPath}.proposals`,\n    block.proposals,\n    assertProposalShortId,\n    nestedValidation\n  );\n}\n\nexport function ValidateCellbaseWitness(\n  cellbaseWitness,\n  { nestedValidation = true, debugPath = \"cellbase_witness\" } = {}\n) {\n  assertObjectWithKeys(debugPath, cellbaseWitness, [\"lock\", \"message\"], []);\n  assertHexString(`${debugPath}.message`, cellbaseWitness.message);\n\n  if (nestedValidation) {\n    ValidateScript(cellbaseWitness.lock, {\n      debugPath: `${debugPath}.lock`,\n    });\n  }\n}\n\nexport function ValidateWitnessArgs(\n  witnessArgs,\n  { nestedValidation = true, debugPath = \"witness_args\" } = {}\n) {\n  assertObjectWithKeys(\n    debugPath,\n    witnessArgs,\n    [],\n    [\"lock\", \"input_type\", \"output_type\"]\n  );\n\n  if (witnessArgs.lock) {\n    assertHexString(`${debugPath}.lock`, witnessArgs.lock);\n  }\n  if (witnessArgs.input_type) {\n    assertHexString(`${debugPath}.input_type`, witnessArgs.input_type);\n  }\n  if (witnessArgs.output_type) {\n    assertHexString(`${debugPath}.output_type`, witnessArgs.output_type);\n  }\n}\n"],"file":"validators.js"}