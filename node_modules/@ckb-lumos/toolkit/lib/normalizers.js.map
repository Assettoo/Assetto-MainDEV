{"version":3,"sources":["../src/normalizers.js"],"names":["normalizeHexNumber","length","debugPath","value","ArrayBuffer","intValue","JSBI","BigInt","substr","Error","view","DataView","i","start","setUint8","parseInt","buffer","byteLength","array","Uint8Array","set","normalizeRawData","Reader","toArrayBuffer","normalizeObject","object","keys","result","key","f","Object","entries","NormalizeScript","script","code_hash","hash_type","args","NormalizeOutPoint","outPoint","tx_hash","index","toNormalize","normalize","NormalizeCellInput","cellInput","since","previous_output","NormalizeCellOutput","cellOutput","capacity","lock","type","type_","NormalizeCellDep","cellDep","out_point","dep_type","toNormalizeArray","normalizeFunction","map","item","NormalizeRawTransaction","rawTransaction","version","cell_deps","header_deps","inputs","outputs","outputs_data","NormalizeTransaction","transaction","witnesses","raw","NormalizeRawHeader","rawHeader","compact_target","timestamp","number","epoch","parent_hash","transactions_root","proposals_hash","uncles_hash","dao","NormalizeHeader","header","nonce","NormalizeUncleBlock","uncleBlock","proposals","NormalizeBlock","block","uncles","transactions","NormalizeCellbaseWitness","cellbaseWitness","message","NormalizeWitnessArgs","witnessArgs","input_type","output_type"],"mappings":"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","sourcesContent":["// This package provides normalizer functions. Even though CKB uses molecule\n// as the serialization layer. There is still CKB specific knowledge that does\n// not belong in molecule. For example, all numbers in CKB protocols are\n// serialized using little endian format. This package tries to encode such\n// knowledge. The goal here, is that you are free to use whatever types that\n// makes most sense to represent the values. As long as you pass your object\n// through the normalizers here, molecule should be able to serialize the values\n// into correct formats required by CKB.\n//\n// Note this is only used when you need to deal with CKB structures in molecule\n// format. If you are using RPCs or GraphQL to interact with CKB, chances are you\n// will not need this package.\nimport JSBI from \"jsbi\";\nimport { Reader } from \"./reader\";\nimport { BigIntToHexString } from \"./rpc\";\n\nfunction normalizeHexNumber(length) {\n  return function (debugPath, value) {\n    if (!(value instanceof ArrayBuffer)) {\n      let intValue = BigIntToHexString(JSBI.BigInt(value)).substr(2);\n      if (intValue.length % 2 !== 0) {\n        intValue = \"0\" + intValue;\n      }\n      if (intValue.length / 2 > length) {\n        throw new Error(\n          `${debugPath} is ${\n            intValue.length / 2\n          } bytes long, expected length is ${length}!`\n        );\n      }\n      const view = new DataView(new ArrayBuffer(length));\n      for (let i = 0; i < intValue.length / 2; i++) {\n        const start = intValue.length - (i + 1) * 2;\n        view.setUint8(i, parseInt(intValue.substr(start, 2), 16));\n      }\n      value = view.buffer;\n    }\n    if (value.byteLength < length) {\n      const array = new Uint8Array(length);\n      array.set(new Uint8Array(value), 0);\n      value = array.buffer;\n    }\n    return value;\n  };\n}\n\nfunction normalizeRawData(length) {\n  return function (debugPath, value) {\n    value = new Reader(value).toArrayBuffer();\n    if (length > 0 && value.byteLength !== length) {\n      throw new Error(\n        `${debugPath} has invalid length ${value.byteLength}, required: ${length}`\n      );\n    }\n    return value;\n  };\n}\n\nfunction normalizeObject(debugPath, object, keys) {\n  const result = {};\n\n  for (const [key, f] of Object.entries(keys)) {\n    const value = object[key];\n    if (!value) {\n      throw new Error(`${debugPath} is missing ${key}!`);\n    }\n    result[key] = f(`${debugPath}.${key}`, value);\n  }\n  return result;\n}\n\nexport function NormalizeScript(script, { debugPath = \"script\" } = {}) {\n  return normalizeObject(debugPath, script, {\n    code_hash: normalizeRawData(32),\n    hash_type: function (debugPath, value) {\n      switch (value) {\n        case \"data\":\n          return 0;\n        case \"type\":\n          return 1;\n        case 0:\n          return value;\n        case 1:\n          return value;\n        default:\n          throw new Error(`${debugPath}.hash_type has invalid value: ${value}`);\n      }\n    },\n    args: normalizeRawData(-1),\n  });\n}\n\nexport function NormalizeOutPoint(outPoint, { debugPath = \"out_point\" } = {}) {\n  return normalizeObject(debugPath, outPoint, {\n    tx_hash: normalizeRawData(32),\n    index: normalizeHexNumber(4),\n  });\n}\n\nfunction toNormalize(normalize) {\n  return function (debugPath, value) {\n    return normalize(value, {\n      debugPath,\n    });\n  };\n}\n\nexport function NormalizeCellInput(\n  cellInput,\n  { debugPath = \"cell_input\" } = {}\n) {\n  return normalizeObject(debugPath, cellInput, {\n    since: normalizeHexNumber(8),\n    previous_output: toNormalize(NormalizeOutPoint),\n  });\n}\n\nexport function NormalizeCellOutput(\n  cellOutput,\n  { debugPath = \"cell_output\" } = {}\n) {\n  const result = normalizeObject(debugPath, cellOutput, {\n    capacity: normalizeHexNumber(8),\n    lock: toNormalize(NormalizeScript),\n  });\n  if (cellOutput.type) {\n    result.type_ = NormalizeScript(cellOutput.type, {\n      debugPath: `${debugPath}.type`,\n    });\n  }\n  return result;\n}\n\nexport function NormalizeCellDep(cellDep, { debugPath = \"cell_dep\" } = {}) {\n  return normalizeObject(debugPath, cellDep, {\n    out_point: toNormalize(NormalizeOutPoint),\n    dep_type: function (debugPath, value) {\n      switch (value) {\n        case \"code\":\n          return 0;\n        case \"dep_group\":\n          return 1;\n        case 0:\n          return value;\n        case 1:\n          return value;\n        default:\n          throw new Error(`${debugPath}.dep_type has invalid value: ${value}`);\n      }\n    },\n  });\n}\n\nfunction toNormalizeArray(normalizeFunction) {\n  return function (debugPath, array) {\n    return array.map((item, i) => {\n      return normalizeFunction(`${debugPath}[${i}]`, item);\n    });\n  };\n}\n\nexport function NormalizeRawTransaction(\n  rawTransaction,\n  { debugPath = \"raw_transaction\" } = {}\n) {\n  return normalizeObject(debugPath, rawTransaction, {\n    version: normalizeHexNumber(4),\n    cell_deps: toNormalizeArray(toNormalize(NormalizeCellDep)),\n    header_deps: toNormalizeArray(normalizeRawData(32)),\n    inputs: toNormalizeArray(toNormalize(NormalizeCellInput)),\n    outputs: toNormalizeArray(toNormalize(NormalizeCellOutput)),\n    outputs_data: toNormalizeArray(normalizeRawData(-1)),\n  });\n}\n\nexport function NormalizeTransaction(\n  transaction,\n  { debugPath = \"transaction\" } = {}\n) {\n  const rawTransaction = NormalizeRawTransaction(transaction, {\n    debugPath: `(raw)${debugPath}`,\n  });\n  const result = normalizeObject(debugPath, transaction, {\n    witnesses: toNormalizeArray(normalizeRawData(-1)),\n  });\n  result.raw = rawTransaction;\n  return result;\n}\n\nexport function NormalizeRawHeader(\n  rawHeader,\n  { debugPath = \"raw_header\" } = {}\n) {\n  return normalizeObject(debugPath, rawHeader, {\n    version: normalizeHexNumber(4),\n    compact_target: normalizeHexNumber(4),\n    timestamp: normalizeHexNumber(8),\n    number: normalizeHexNumber(8),\n    epoch: normalizeHexNumber(8),\n    parent_hash: normalizeRawData(32),\n    transactions_root: normalizeRawData(32),\n    proposals_hash: normalizeRawData(32),\n    uncles_hash: normalizeRawData(32),\n    dao: normalizeRawData(32),\n  });\n}\n\nexport function NormalizeHeader(header, { debugPath = \"header\" } = {}) {\n  const rawHeader = NormalizeRawHeader(header, {\n    debugPath: `(raw)${debugPath}`,\n  });\n  const result = normalizeObject(debugPath, header, {\n    nonce: normalizeHexNumber(16),\n  });\n  result.raw = rawHeader;\n  return result;\n}\n\nexport function NormalizeUncleBlock(\n  uncleBlock,\n  { debugPath = \"uncle_block\" } = {}\n) {\n  return normalizeObject(debugPath, uncleBlock, {\n    header: toNormalize(NormalizeHeader),\n    proposals: toNormalizeArray(normalizeRawData(10)),\n  });\n}\n\nexport function NormalizeBlock(block, { debugPath = \"block\" } = {}) {\n  return normalizeObject(debugPath, block, {\n    header: toNormalize(NormalizeHeader),\n    uncles: toNormalizeArray(toNormalize(NormalizeUncleBlock)),\n    transactions: toNormalizeArray(toNormalize(NormalizeTransaction)),\n    proposals: toNormalizeArray(normalizeRawData(10)),\n  });\n}\n\nexport function NormalizeCellbaseWitness(\n  cellbaseWitness,\n  { debugPath = \"cellbase_witness\" } = {}\n) {\n  return normalizeObject(debugPath, cellbaseWitness, {\n    lock: toNormalize(NormalizeScript),\n    message: normalizeRawData(-1),\n  });\n}\n\nexport function NormalizeWitnessArgs(\n  witnessArgs,\n  { debugPath = \"witness_args\" } = {}\n) {\n  const result = {};\n  if (witnessArgs.lock) {\n    result.lock = normalizeRawData(-1)(`${debugPath}.lock`, witnessArgs.lock);\n  }\n  if (witnessArgs.input_type) {\n    result.input_type = normalizeRawData(-1)(\n      `${debugPath}.input_type`,\n      witnessArgs.input_type\n    );\n  }\n  if (witnessArgs.output_type) {\n    result.output_type = normalizeRawData(-1)(\n      `${debugPath}.output_type`,\n      witnessArgs.output_type\n    );\n  }\n  return result;\n}\n"],"file":"normalizers.js"}