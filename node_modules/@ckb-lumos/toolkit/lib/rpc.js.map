{"version":3,"sources":["../src/rpc.js"],"names":["mergeOptions","overrideOptions","defaultOptions","headers","Object","assign","batchHandler","get","target","method","receiver","response","uri","body","JSON","stringify","payload","json","params","id","push","jsonrpc","handler","Proxy","Math","round","random","data","Error","error","result","RPC","constructor","create","HexStringToBigInt","hexString","JSBI","BigInt","BigIntToHexString","bigInt","toString"],"mappings":"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","sourcesContent":["import fetch from \"cross-fetch\";\nimport JSBI from \"jsbi\";\n\nfunction mergeOptions(overrideOptions, defaultOptions) {\n  defaultOptions = defaultOptions || {};\n  const headers = Object.assign(\n    {},\n    defaultOptions.headers || {},\n    overrideOptions.headers || {}\n  );\n  return Object.assign({}, defaultOptions, overrideOptions, {\n    headers: headers,\n  });\n}\n\nconst batchHandler = {\n  get: (target, method, receiver) => {\n    if (method === \"send\") {\n      return async () => {\n        const response = await fetch(\n          target.uri,\n          mergeOptions(\n            {\n              method: \"post\",\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n              body: JSON.stringify(target.payload),\n            },\n            target.defaultOptions\n          )\n        );\n        return await response.json();\n      };\n    }\n    return (...params) => {\n      const id = target.id;\n      target.id = target.id + 1;\n      target.payload.push({\n        jsonrpc: \"2.0\",\n        id: id,\n        method: method,\n        params: params,\n      });\n      return receiver;\n    };\n  },\n};\n\nconst handler = {\n  get: (target, method) => {\n    if (method === \"batch\") {\n      return () => {\n        return new Proxy(\n          {\n            id: Math.round(Math.random() * 10000000),\n            payload: [],\n            uri: target.uri,\n            defaultOptions: target.defaultOptions,\n          },\n          batchHandler\n        );\n      };\n    }\n    return async (...params) => {\n      const id = Math.round(Math.random() * 10000000);\n      const response = await fetch(\n        target.uri,\n        mergeOptions(\n          {\n            method: \"post\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n              jsonrpc: \"2.0\",\n              id: id,\n              method: method,\n              params: params,\n            }),\n          },\n          target.defaultOptions\n        )\n      );\n      const data = await response.json();\n      if (data.id !== id) {\n        throw new Error(\"JSONRPCError: response ID does not match request ID!\");\n      }\n      if (data.error) {\n        throw new Error(\n          `JSONRPCError: server error ${JSON.stringify(data.error)}`\n        );\n      }\n      return data.result;\n    };\n  },\n};\n\nexport class RPC {\n  constructor(uri, defaultOptions = {}) {\n    this.uri = uri;\n    this.defaultOptions = defaultOptions;\n    return new Proxy(this, handler);\n  }\n\n  static create(uri) {\n    return new RPC(uri);\n  }\n}\n\nexport function HexStringToBigInt(hexString) {\n  return JSBI.BigInt(hexString);\n}\n\nexport function BigIntToHexString(bigInt) {\n  return \"0x\" + bigInt.toString(16);\n}\n"],"file":"rpc.js"}