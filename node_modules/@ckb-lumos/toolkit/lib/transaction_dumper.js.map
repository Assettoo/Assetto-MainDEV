{"version":3,"sources":["../src/transaction_dumper.js"],"names":["TransactionDumper","constructor","rpc","validateTransaction","depGroupUnpacker","dumpByHash","txHash","tx","get_transaction","transaction","hash","dump","mockInputs","input","inputs","output","data","header","_resolveOutPoint","previous_output","push","mockCellDeps","cellDep","cell_deps","out_point","cell_dep","dep_type","Error","outPoints","Reader","outPoint","mockHeaderDeps","headerDep","header_deps","get_header","JSON","stringify","mock_info","txStatus","tx_hash","index","JSBI","toNumber","BigInt","outputs","length","outputs_data","tx_status","status","block_hash"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEO,MAAMA,iBAAN,CAAwB;AAC7BC,EAAAA,WAAW,CACTC,GADS,EAET;AAAEC,IAAAA,mBAAmB,GAAG,IAAxB;AAA8BC,IAAAA,gBAAgB,GAAG;AAAjD,MAA0D,EAFjD,EAGT;AACA,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKC,mBAAL,GAA2BA,mBAA3B;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACD;;AAEe,QAAVC,UAAU,CAACC,MAAD,EAAS;AACvB,UAAMC,EAAE,GAAG,CAAC,MAAM,KAAKL,GAAL,CAASM,eAAT,CAAyBF,MAAzB,CAAP,EAAyCG,WAApD;AACA,WAAOF,EAAE,CAACG,IAAV;AACA,WAAO,MAAM,KAAKC,IAAL,CAAUJ,EAAV,CAAb;AACD;;AAES,QAAJI,IAAI,CAACJ,EAAD,EAAK;AACb,QAAI,KAAKJ,mBAAT,EAA8B;AAC5B,2CAAoBI,EAApB;AACD;;AACD,UAAMK,UAAU,GAAG,EAAnB;;AACA,SAAK,MAAMC,KAAX,IAAoBN,EAAE,CAACO,MAAvB,EAA+B;AAC7B,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA;AAAhB,UAA2B,MAAM,KAAKC,gBAAL,CACrCL,KAAK,CAACM,eAD+B,CAAvC;AAGAP,MAAAA,UAAU,CAACQ,IAAX,CAAgB;AAAEP,QAAAA,KAAF;AAASE,QAAAA,MAAT;AAAiBC,QAAAA,IAAjB;AAAuBC,QAAAA;AAAvB,OAAhB;AACD;;AACD,UAAMI,YAAY,GAAG,EAArB;;AACA,SAAK,MAAMC,OAAX,IAAsBf,EAAE,CAACgB,SAAzB,EAAoC;AAClC,YAAM;AAAER,QAAAA,MAAF;AAAUC,QAAAA,IAAV;AAAgBC,QAAAA;AAAhB,UAA2B,MAAM,KAAKC,gBAAL,CACrCI,OAAO,CAACE,SAD6B,CAAvC;AAGAH,MAAAA,YAAY,CAACD,IAAb,CAAkB;AAChBK,QAAAA,QAAQ,EAAEH,OADM;AAEhBP,QAAAA,MAFgB;AAGhBC,QAAAA,IAHgB;AAIhBC,QAAAA;AAJgB,OAAlB;;AAMA,UAAIK,OAAO,CAACI,QAAR,KAAqB,WAAzB,EAAsC;AACpC,YAAI,CAAC,KAAKtB,gBAAV,EAA4B;AAC1B,gBAAM,IAAIuB,KAAJ,CACJ,4EADI,CAAN;AAGD;;AACD,cAAMC,SAAS,GAAG,KAAKxB,gBAAL,CAAsB,IAAIyB,cAAJ,CAAWb,IAAX,CAAtB,CAAlB;;AACA,aAAK,MAAMc,QAAX,IAAuBF,SAAvB,EAAkC;AAChC,4CAAiBE,QAAjB;AACA,gBAAM;AAAEf,YAAAA,MAAF;AAAUC,YAAAA,IAAV;AAAgBC,YAAAA;AAAhB,cAA2B,MAAM,KAAKC,gBAAL,CACrCY,QADqC,CAAvC;AAGAT,UAAAA,YAAY,CAACD,IAAb,CAAkB;AAChBK,YAAAA,QAAQ,EAAE;AACRD,cAAAA,SAAS,EAAEM,QADH;AAERJ,cAAAA,QAAQ,EAAE;AAFF,aADM;AAKhBX,YAAAA,MALgB;AAMhBC,YAAAA,IANgB;AAOhBC,YAAAA;AAPgB,WAAlB;AASD;AACF;AACF;;AACD,UAAMc,cAAc,GAAG,EAAvB;;AACA,SAAK,MAAMC,SAAX,IAAwBzB,EAAE,CAAC0B,WAA3B,EAAwC;AACtCF,MAAAA,cAAc,CAACX,IAAf,CAAoB,MAAM,KAAKlB,GAAL,CAASgC,UAAT,CAAoBF,SAApB,CAA1B;AACD;;AACD,WAAOG,IAAI,CAACC,SAAL,CAAe;AACpBC,MAAAA,SAAS,EAAE;AACTvB,QAAAA,MAAM,EAAEF,UADC;AAETW,QAAAA,SAAS,EAAEF,YAFF;AAGTY,QAAAA,WAAW,EAAEF;AAHJ,OADS;AAMpBxB,MAAAA;AANoB,KAAf,CAAP;AAQD;;AAEqB,QAAhBW,gBAAgB,CAACM,SAAD,EAAY;AAChC,UAAMc,QAAQ,GAAG,MAAM,KAAKpC,GAAL,CAASM,eAAT,CAAyBgB,SAAS,CAACe,OAAnC,CAAvB;;AACA,QAAI,CAACD,QAAD,IAAa,CAACA,QAAQ,CAAC7B,WAA3B,EAAwC;AACtC,YAAM,IAAIkB,KAAJ,CAAW,eAAcH,SAAS,CAACe,OAAQ,mBAA3C,CAAN;AACD;;AACD,UAAMhC,EAAE,GAAG+B,QAAQ,CAAC7B,WAApB;;AACA,UAAM+B,KAAK,GAAGC,cAAKC,QAAL,CAAcD,cAAKE,MAAL,CAAYnB,SAAS,CAACgB,KAAtB,CAAd,CAAd;;AACA,QAAIA,KAAK,IAAIjC,EAAE,CAACqC,OAAH,CAAWC,MAAxB,EAAgC;AAC9B,YAAM,IAAIlB,KAAJ,CACH,eAAcH,SAAS,CAACe,OAAQ,yBAAwBC,KAAM,GAD3D,CAAN;AAGD;;AACD,UAAMxB,IAAI,GAAG;AACXD,MAAAA,MAAM,EAAER,EAAE,CAACqC,OAAH,CAAWJ,KAAX,CADG;AAEXxB,MAAAA,IAAI,EAAET,EAAE,CAACuC,YAAH,CAAgBN,KAAhB;AAFK,KAAb;;AAIA,QAAIF,QAAQ,CAACS,SAAT,CAAmBC,MAAnB,KAA8B,WAAlC,EAA+C;AAC7ChC,MAAAA,IAAI,CAACC,MAAL,GAAcqB,QAAQ,CAACS,SAAT,CAAmBE,UAAjC;AACD;;AACD,WAAOjC,IAAP;AACD;;AAhG4B","sourcesContent":["import JSBI from \"jsbi\";\nimport { Reader } from \"./reader\";\nimport { ValidateTransaction, ValidateOutPoint } from \"./validators\";\n\nexport class TransactionDumper {\n  constructor(\n    rpc,\n    { validateTransaction = true, depGroupUnpacker = null } = {}\n  ) {\n    this.rpc = rpc;\n    this.validateTransaction = validateTransaction;\n    this.depGroupUnpacker = depGroupUnpacker;\n  }\n\n  async dumpByHash(txHash) {\n    const tx = (await this.rpc.get_transaction(txHash)).transaction;\n    delete tx.hash;\n    return await this.dump(tx);\n  }\n\n  async dump(tx) {\n    if (this.validateTransaction) {\n      ValidateTransaction(tx);\n    }\n    const mockInputs = [];\n    for (const input of tx.inputs) {\n      const { output, data, header } = await this._resolveOutPoint(\n        input.previous_output\n      );\n      mockInputs.push({ input, output, data, header });\n    }\n    const mockCellDeps = [];\n    for (const cellDep of tx.cell_deps) {\n      const { output, data, header } = await this._resolveOutPoint(\n        cellDep.out_point\n      );\n      mockCellDeps.push({\n        cell_dep: cellDep,\n        output,\n        data,\n        header,\n      });\n      if (cellDep.dep_type === \"dep_group\") {\n        if (!this.depGroupUnpacker) {\n          throw new Error(\n            \"depGroupUnpacker must be provided when the transaction contains dep_group!\"\n          );\n        }\n        const outPoints = this.depGroupUnpacker(new Reader(data));\n        for (const outPoint of outPoints) {\n          ValidateOutPoint(outPoint);\n          const { output, data, header } = await this._resolveOutPoint(\n            outPoint\n          );\n          mockCellDeps.push({\n            cell_dep: {\n              out_point: outPoint,\n              dep_type: \"code\",\n            },\n            output,\n            data,\n            header,\n          });\n        }\n      }\n    }\n    const mockHeaderDeps = [];\n    for (const headerDep of tx.header_deps) {\n      mockHeaderDeps.push(await this.rpc.get_header(headerDep));\n    }\n    return JSON.stringify({\n      mock_info: {\n        inputs: mockInputs,\n        cell_deps: mockCellDeps,\n        header_deps: mockHeaderDeps,\n      },\n      tx,\n    });\n  }\n\n  async _resolveOutPoint(out_point) {\n    const txStatus = await this.rpc.get_transaction(out_point.tx_hash);\n    if (!txStatus || !txStatus.transaction) {\n      throw new Error(`Transaction ${out_point.tx_hash} cannot be found!`);\n    }\n    const tx = txStatus.transaction;\n    const index = JSBI.toNumber(JSBI.BigInt(out_point.index));\n    if (index >= tx.outputs.length) {\n      throw new Error(\n        `Transaction ${out_point.tx_hash} does not have output ${index}!`\n      );\n    }\n    const data = {\n      output: tx.outputs[index],\n      data: tx.outputs_data[index],\n    };\n    if (txStatus.tx_status.status === \"committed\") {\n      data.header = txStatus.tx_status.block_hash;\n    }\n    return data;\n  }\n}\n"],"file":"transaction_dumper.js"}