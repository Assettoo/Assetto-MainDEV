{"version":3,"sources":["../src/services.ts"],"names":["instanceOfScriptWrapper","object","UnwrapScriptWrapper","inputScript","script","generateSearchKey","queries","undefined","filter","script_type","lock","type","block_range","fromBlock","toBlock","BI","from","add","toString","outputDataLenRange","output_data_len_range","outputCapacityRange","output_capacity_range","Error","getHexStringBytes","hexString","utils","assertHexString","Math","ceil","substr","length","requestBatch","rpcUrl","data","res","method","body","JSON","stringify","headers","status","result","json","error","request","ckbIndexerUrl","params","id","jsonrpc"],"mappings":"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","sourcesContent":["import { utils, Script, ScriptWrapper, HexString } from \"@ckb-lumos/base\";\nimport {\n  CKBIndexerQueryOptions,\n  HexadecimalRange,\n  SearchFilter,\n  ScriptType,\n  SearchKey,\n} from \"./type\";\nimport fetch from \"cross-fetch\";\nimport { BI } from \"@ckb-lumos/bi\";\n\nfunction instanceOfScriptWrapper(object: unknown): object is ScriptWrapper {\n  return typeof object === \"object\" && object != null && \"script\" in object;\n}\nconst UnwrapScriptWrapper = (inputScript: ScriptWrapper | Script): Script => {\n  if (instanceOfScriptWrapper(inputScript)) {\n    return inputScript.script;\n  }\n  return inputScript;\n};\nconst generateSearchKey = (queries: CKBIndexerQueryOptions): SearchKey => {\n  let script: Script | undefined = undefined;\n  const filter: SearchFilter = {};\n  let script_type: ScriptType | undefined = undefined;\n  if (queries.lock) {\n    const lock = UnwrapScriptWrapper(queries.lock);\n    script = lock as Script;\n    script_type = \"lock\";\n    if (queries.type && typeof queries.type !== \"string\") {\n      const type = UnwrapScriptWrapper(queries.type);\n      filter.script = type as Script;\n    }\n  } else if (queries.type && typeof queries.type !== \"string\") {\n    const type = UnwrapScriptWrapper(queries.type);\n    script = type as Script;\n    script_type = \"type\";\n  }\n  let block_range: HexadecimalRange | null = null;\n  if (queries.fromBlock && queries.toBlock) {\n    //toBlock+1 cause toBlock need to be included\n    block_range = [\n      queries.fromBlock,\n      `0x${BI.from(queries.toBlock).add(1).toString(16)}`,\n    ];\n  }\n  if (block_range) {\n    filter.block_range = block_range;\n  }\n  if (queries.outputDataLenRange) {\n    filter.output_data_len_range = queries.outputDataLenRange;\n  }\n  if (queries.outputCapacityRange) {\n    filter.output_capacity_range = queries.outputCapacityRange;\n  }\n  if (!script) {\n    throw new Error(\"Either lock or type script must be provided!\");\n  }\n  if (!script_type) {\n    throw new Error(\"script_type must be provided\");\n  }\n  return {\n    script,\n    script_type,\n    filter,\n  };\n};\n\nconst getHexStringBytes = (hexString: HexString) => {\n  utils.assertHexString(\"\", hexString);\n  return Math.ceil(hexString.substr(2).length / 2);\n};\n\nconst requestBatch = async (rpcUrl: string, data: unknown): Promise<any> => {\n  const res: Response = await fetch(rpcUrl, {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  if (res.status !== 200) {\n    throw new Error(`indexer request failed with HTTP code ${res.status}`);\n  }\n  const result = await res.json();\n  if (result.error !== undefined) {\n    throw new Error(\n      `indexer request rpc failed with error: ${JSON.stringify(result.error)}`\n    );\n  }\n  return result;\n};\n\nconst request = async (\n  ckbIndexerUrl: string,\n  method: string,\n  params?: any\n): Promise<any> => {\n  const res = await fetch(ckbIndexerUrl, {\n    method: \"POST\",\n    body: JSON.stringify({\n      id: 0,\n      jsonrpc: \"2.0\",\n      method,\n      params,\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  if (res.status !== 200) {\n    throw new Error(`indexer request failed with HTTP code ${res.status}`);\n  }\n  const data = await res.json();\n  if (data.error !== undefined) {\n    throw new Error(\n      `indexer request rpc failed with error: ${JSON.stringify(data.error)}`\n    );\n  }\n  return data.result;\n};\n\nexport {\n  generateSearchKey,\n  getHexStringBytes,\n  instanceOfScriptWrapper,\n  requestBatch,\n  request,\n};\n"],"file":"services.js"}