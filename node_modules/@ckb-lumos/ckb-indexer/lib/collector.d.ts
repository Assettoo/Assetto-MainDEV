import { Cell, BaseCellCollector } from "@ckb-lumos/base";
import { CKBIndexerQueryOptions, OtherQueryOptions } from "./type";
import { CkbIndexer } from "./indexer";
/** CellCollector will not get cell with block_hash by default, please use OtherQueryOptions.withBlockHash and OtherQueryOptions.CKBRpcUrl to get block_hash if you need. */
export declare class CKBCellCollector implements BaseCellCollector {
    indexer: CkbIndexer;
    queries: CKBIndexerQueryOptions;
    otherQueryOptions?: OtherQueryOptions | undefined;
    constructor(indexer: CkbIndexer, queries: CKBIndexerQueryOptions, otherQueryOptions?: OtherQueryOptions | undefined);
    validateQueryOption(queries: CKBIndexerQueryOptions): void;
    convertQueryOptionToSearchKey(): void;
    private getLiveCell;
    private shouldSkipped;
    count(): Promise<number>;
    private request;
    private getLiveCellWithBlockHash;
    /** collect cells without block_hash by default.if you need block_hash, please add OtherQueryOptions.withBlockHash and OtherQueryOptions.ckbRpcUrl when constructor CellCollect.
     * don't use OtherQueryOption if you don't need block_hash,cause it will slowly your collect.
     */
    collect(): AsyncGenerator<Cell, void, unknown>;
}
