{"version":3,"sources":["../src/rpc.ts"],"names":["handler","get","target","method","params","result","rpc","RpcProxy","constructor","uri","ToolkitRPC","getProxy","Proxy","RPC","rpcProxy","get_tip","get_cells","searchKey","order","limit","after_cursor","get_transactions","get_cells_capacity","get_indexer_info"],"mappings":";;;;;;;AAAA;;AAeA,MAAMA,OAAO,GAAG;AACdC,EAAAA,GAAG,EAAE,CAACC,MAAD,EAAcC,MAAd,KAAiC;AACpC,WAAO,OAAO,GAAGC,MAAV,KAA0B;AAC/B,YAAMC,MAAM,GAAG,MAAMH,MAAM,CAACI,GAAP,CAAWH,MAAX,EAAmB,GAAGC,MAAtB,CAArB;AACA,aAAOC,MAAP;AACD,KAHD;AAID;AANa,CAAhB;;AAQA,MAAME,QAAN,CAAe;AAEbC,EAAAA,WAAW,CAACC,GAAD,EAAc;AACvB,SAAKH,GAAL,GAAW,IAAII,YAAJ,CAAeD,GAAf,CAAX;AACD;;AAEDE,EAAAA,QAAQ,GAAG;AACT,WAAO,IAAIC,KAAJ,CAAU,IAAV,EAAgBZ,OAAhB,CAAP;AACD;;AARY;;AAWR,MAAMa,GAAN,CAAU;AAGf;AACF;AACA;AACA;AACEL,EAAAA,WAAW,CAACC,GAAD,EAAc;AACvB,SAAKK,QAAL,GAAgB,IAAIP,QAAJ,CAAaE,GAAb,EAAkBE,QAAlB,EAAhB;AACD;;AAEY,QAAPI,OAAO,GAAiB;AAC5B,WAAO,KAAKD,QAAL,CAAcC,OAAd,EAAP;AACD;;AACc,QAATC,SAAS,CACbC,SADa,EAEbC,KAFa,EAGbC,KAHa,EAIbC,YAJa,EAKa;AAC1B,WAAO,KAAKN,QAAL,CAAcE,SAAd,CAAwBC,SAAxB,EAAmCC,KAAnC,EAA0CC,KAA1C,EAAiDC,YAAjD,CAAP;AACD;;AACqB,QAAhBC,gBAAgB,CACpBJ,SADoB,EAEpBC,KAFoB,EAGpBC,KAHoB,EAIpBC,YAJoB,EAKa;AACjC,WAAO,KAAKN,QAAL,CAAcO,gBAAd,CACLJ,SADK,EAELC,KAFK,EAGLC,KAHK,EAILC,YAJK,CAAP;AAMD;;AACuB,QAAlBE,kBAAkB,CACtBL,SADsB,EAEW;AACjC,WAAO,KAAKH,QAAL,CAAcQ,kBAAd,CAAiCL,SAAjC,CAAP;AACD;;AACqB,QAAhBM,gBAAgB,GAAoB;AACxC,WAAO,KAAKT,QAAL,CAAcS,gBAAd,EAAP;AACD;;AA1Cc","sourcesContent":["import { RPC as ToolkitRPC } from \"@ckb-lumos/toolkit\";\nimport { HexString, Tip } from \"@ckb-lumos/base\";\nimport {\n  GetCellsResults,\n  IndexerTransactionList,\n  Order,\n  SearchKey,\n} from \"./type\";\n\ninterface GetCellsCapacityResult {\n  capacity: HexString;\n  block_hash: HexString;\n  block_number: HexString;\n}\n\nconst handler = {\n  get: (target: any, method: string) => {\n    return async (...params: any) => {\n      const result = await target.rpc[method](...params);\n      return result;\n    };\n  },\n};\nclass RpcProxy {\n  private rpc: ToolkitRPC;\n  constructor(uri: string) {\n    this.rpc = new ToolkitRPC(uri);\n  }\n\n  getProxy() {\n    return new Proxy(this, handler);\n  }\n}\n\nexport class RPC {\n  private rpcProxy: any;\n\n  /**\n   *\n   * @param uri  indexer uri\n   */\n  constructor(uri: string) {\n    this.rpcProxy = new RpcProxy(uri).getProxy();\n  }\n\n  async get_tip(): Promise<Tip> {\n    return this.rpcProxy.get_tip();\n  }\n  async get_cells(\n    searchKey: SearchKey,\n    order: Order,\n    limit: HexString,\n    after_cursor?: string\n  ): Promise<GetCellsResults> {\n    return this.rpcProxy.get_cells(searchKey, order, limit, after_cursor);\n  }\n  async get_transactions(\n    searchKey: SearchKey,\n    order: Order,\n    limit: HexString,\n    after_cursor?: string\n  ): Promise<IndexerTransactionList> {\n    return this.rpcProxy.get_transactions(\n      searchKey,\n      order,\n      limit,\n      after_cursor\n    );\n  }\n  async get_cells_capacity(\n    searchKey: SearchKey\n  ): Promise<GetCellsCapacityResult> {\n    return this.rpcProxy.get_cells_capacity(searchKey);\n  }\n  async get_indexer_info(): Promise<string> {\n    return this.rpcProxy.get_indexer_info();\n  }\n}\n"],"file":"rpc.js"}