{"version":3,"sources":["../src/indexer.ts"],"names":["DefaultTerminator","stop","push","defaultLogger","level","message","console","log","CkbIndexer","constructor","ckbIndexerUrl","ckbRpcUrl","uri","getCkbRpc","RPC","tip","res","asyncSleep","timeout","Promise","resolve","setTimeout","waitForSync","blockDifference","rpcTipNumber","parseInt","get_tip_header","number","indexerTipNumber","block_number","collector","queries","otherQueryOptions","CKBCellCollector","request","method","params","getCells","searchKey","terminator","searchKeyFilter","infos","cursor","lastCursor","sizeLimit","order","index","toString","liveCells","objects","last_cursor","liveCell","cell","cell_output","output","data","output_data","out_point","length","getTransactions","txs","concat","running","start","startForever","subscribe","isSubscribeRunning","scheduleLoop","lock","type","Error","toBlock","skip","emitter","IndexerEmitter","argsLen","outputData","fromBlock","utils","assertHexadecimal","BI","from","validators","ValidateScript","emitters","loop","poll","then","catch","e","stack","block_hash","block","publishAppendBlockEvents","nextBlockNumber","add","header","parent_hash","txIndex","tx","transactions","entries","blockNumber","requestData","inputs","map","input","id","jsonrpc","previous_output","tx_hash","transactionResponse","response","item","cellIndex","outputCell","result","transaction","outputs","outputs_data","forEach","filterEvents","outputIndex","emitMedianTimeEvents","undefined","checkFilterOptions","emit","emitterScript","script","checkBlockNumber","lte","checkOutputData","checkScript","code_hash","hash_type","checkArgs","args","emitterArgs","substring","medianTimeEmitters","info","medianTime","median_time","medianTimeEmitter","subscribeMedianTime","EventEmitter"],"mappings":"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","sourcesContent":["import {\n  Cell,\n  CellCollector,\n  HexString,\n  Indexer,\n  Script,\n  Tip,\n  Output,\n  utils,\n  Block,\n} from \"@ckb-lumos/base\";\nimport { validators } from \"@ckb-lumos/toolkit\";\nimport { RPC } from \"@ckb-lumos/rpc\";\nimport { request, requestBatch } from \"./services\";\nimport { CKBCellCollector } from \"./collector\";\nimport { EventEmitter } from \"events\";\nimport {\n  GetTransactionRPCResult,\n  CKBIndexerQueryOptions,\n  GetCellsResults,\n  GetLiveCellsResult,\n  IndexerTransaction,\n  IndexerTransactionList,\n  IndexerEmitter,\n  OutputToVerify,\n  SearchKey,\n  SearchKeyFilter,\n  Terminator,\n  OtherQueryOptions,\n} from \"./type\";\nimport { BI } from \"@ckb-lumos/bi\";\n\nconst DefaultTerminator: Terminator = () => {\n  return { stop: false, push: true };\n};\n\nfunction defaultLogger(level: string, message: string) {\n  console.log(`[${level}] ${message}`);\n}\n\n/** CkbIndexer.collector will not get cell with block_hash by default, please use OtherQueryOptions.withBlockHash and OtherQueryOptions.CKBRpcUrl to get block_hash if you need. */\nexport class CkbIndexer implements Indexer {\n  uri: string;\n  medianTimeEmitters: EventEmitter[] = [];\n  emitters: IndexerEmitter[] = [];\n  isSubscribeRunning = false;\n  constructor(public ckbIndexerUrl: string, public ckbRpcUrl: string) {\n    this.uri = ckbRpcUrl;\n  }\n\n  private getCkbRpc(): RPC {\n    return new RPC(this.ckbRpcUrl);\n  }\n\n  async tip(): Promise<Tip> {\n    const res = await request(this.ckbIndexerUrl, \"get_tip\");\n    return res as Tip;\n  }\n\n  asyncSleep(timeout: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, timeout));\n  }\n\n  async waitForSync(blockDifference = 0): Promise<void> {\n    const rpcTipNumber = parseInt(\n      (await this.getCkbRpc().get_tip_header()).number,\n      16\n    );\n    while (true) {\n      const indexerTipNumber = parseInt((await this.tip()).block_number, 16);\n      if (indexerTipNumber + blockDifference >= rpcTipNumber) {\n        return;\n      }\n      await this.asyncSleep(1000);\n    }\n  }\n\n  /** collector cells without block_hash by default.if you need block_hash, please add OtherQueryOptions.withBlockHash and OtherQueryOptions.ckbRpcUrl.\n   * don't use OtherQueryOption if you don't need block_hash,cause it will slowly your collect.\n   */\n  collector(\n    queries: CKBIndexerQueryOptions,\n    otherQueryOptions?: OtherQueryOptions\n  ): CellCollector {\n    return new CKBCellCollector(this, queries, otherQueryOptions);\n  }\n\n  private async request(\n    method: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    params?: any,\n    ckbIndexerUrl: string = this.ckbIndexerUrl\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): Promise<any> {\n    return request(ckbIndexerUrl, method, params);\n  }\n\n  public async getCells(\n    searchKey: SearchKey,\n    terminator: Terminator = DefaultTerminator,\n    searchKeyFilter: SearchKeyFilter = {}\n  ): Promise<GetCellsResults> {\n    const infos: Cell[] = [];\n    let cursor: string | undefined = searchKeyFilter.lastCursor;\n    const sizeLimit = searchKeyFilter.sizeLimit || 100;\n    const order = searchKeyFilter.order || \"asc\";\n    const index = 0;\n    while (true) {\n      const params = [searchKey, order, `0x${sizeLimit.toString(16)}`, cursor];\n      const res: GetLiveCellsResult = await this.request(\"get_cells\", params);\n      const liveCells = res.objects;\n      cursor = res.last_cursor;\n      for (const liveCell of liveCells) {\n        const cell: Cell = {\n          cell_output: liveCell.output,\n          data: liveCell.output_data,\n          out_point: liveCell.out_point,\n          block_number: liveCell.block_number,\n        };\n        const { stop, push } = terminator(index, cell);\n        if (push) {\n          infos.push(cell);\n        }\n        if (stop) {\n          return {\n            objects: infos,\n            lastCursor: cursor,\n          };\n        }\n      }\n      if (liveCells.length <= sizeLimit) {\n        break;\n      }\n    }\n    return {\n      objects: infos,\n      lastCursor: cursor,\n    };\n  }\n\n  public async getTransactions(\n    searchKey: SearchKey,\n    searchKeyFilter: SearchKeyFilter = {}\n  ): Promise<IndexerTransactionList> {\n    let infos: IndexerTransaction[] = [];\n    let cursor: string | undefined = searchKeyFilter.lastCursor;\n    const sizeLimit = searchKeyFilter.sizeLimit || 100;\n    const order = searchKeyFilter.order || \"asc\";\n    while (true) {\n      const params = [searchKey, order, `0x${sizeLimit.toString(16)}`, cursor];\n      const res = await this.request(\"get_transactions\", params);\n      const txs = res.objects;\n      cursor = res.last_cursor as string;\n      infos = infos.concat(txs);\n      if (txs.length <= sizeLimit) {\n        break;\n      }\n    }\n    return {\n      objects: infos,\n      lastCursor: cursor,\n    };\n  }\n\n  running(): boolean {\n    return true;\n  }\n\n  start(): void {\n    defaultLogger(\n      \"warn\",\n      \"deprecated: no need to start the ckb-indexer manually\"\n    );\n  }\n\n  startForever(): void {\n    defaultLogger(\n      \"warn\",\n      \"deprecated: no need to startForever the ckb-indexer manually\"\n    );\n  }\n\n  stop(): void {\n    defaultLogger(\n      \"warn\",\n      \"deprecated: no need to stop the ckb-indexer manually\"\n    );\n  }\n\n  subscribe(queries: CKBIndexerQueryOptions): EventEmitter {\n    this.isSubscribeRunning = true;\n    this.scheduleLoop();\n    if (queries.lock && queries.type) {\n      throw new Error(\n        \"The notification machanism only supports you subscribing for one script once so far!\"\n      );\n    }\n    if (queries.toBlock !== null || queries.skip !== null) {\n      defaultLogger(\n        \"warn\",\n        \"The passing fields such as toBlock and skip are ignored in subscribe() method.\"\n      );\n    }\n    const emitter = new IndexerEmitter();\n    emitter.argsLen = queries.argsLen;\n    emitter.outputData = queries.data;\n    if (queries.fromBlock) {\n      utils.assertHexadecimal(\"fromBlock\", queries.fromBlock);\n    }\n    emitter.fromBlock = !queries.fromBlock\n      ? BI.from(0)\n      : BI.from(queries.fromBlock);\n    if (queries.lock) {\n      validators.ValidateScript(queries.lock);\n      emitter.lock = queries.lock as Script;\n    } else if (queries.type && queries.type !== \"empty\") {\n      validators.ValidateScript(queries.type);\n      emitter.type = queries.type as Script;\n    } else {\n      throw new Error(\"Either lock or type script must be provided!\");\n    }\n    this.emitters.push(emitter);\n    return emitter;\n  }\n\n  private loop() {\n    if (!this.isSubscribeRunning) {\n      return;\n    }\n    this.poll()\n      .then((timeout) => {\n        this.scheduleLoop(timeout);\n      })\n      .catch((e) => {\n        defaultLogger(\n          \"error\",\n          `Error occurs: ${e} ${e.stack}, stopping indexer!`\n        );\n        this.isSubscribeRunning = false;\n      });\n  }\n\n  private scheduleLoop(timeout = 1) {\n    setTimeout(() => {\n      this.loop();\n    }, timeout);\n  }\n\n  private async poll() {\n    let timeout = 1;\n    const tip = await this.tip();\n    const { block_number, block_hash } = tip;\n    if (block_number === \"0x0\") {\n      const block: Block = await this.request(\n        \"get_block_by_number\",\n        [block_number],\n        this.ckbRpcUrl\n      );\n      await this.publishAppendBlockEvents(block);\n    }\n    const nextBlockNumber = BI.from(block_number).add(1);\n    const block = await this.request(\n      \"get_block_by_number\",\n      [`0x${nextBlockNumber.toString(16)}`],\n      this.ckbRpcUrl\n    );\n    if (block) {\n      if (block.header.parent_hash === block_hash) {\n        await this.publishAppendBlockEvents(block);\n      } else {\n        const block: Block = await this.request(\n          \"get_block_by_number\",\n          [block_number],\n          this.ckbRpcUrl\n        );\n        await this.publishAppendBlockEvents(block);\n      }\n    } else {\n      const block = await this.request(\n        \"get_block_by_number\",\n        [block_number],\n        this.ckbRpcUrl\n      );\n      await this.publishAppendBlockEvents(block);\n      timeout = 3 * 1000;\n    }\n    return timeout;\n  }\n\n  private async publishAppendBlockEvents(block: Block) {\n    for (const [txIndex, tx] of block.transactions.entries()) {\n      const blockNumber = block.header.number;\n      // publish changed events if subscribed script exists in previous output cells , skip the cellbase.\n      if (txIndex > 0) {\n        const requestData = tx.inputs.map((input, index) => {\n          return {\n            id: index,\n            jsonrpc: \"2.0\",\n            method: \"get_transaction\",\n            params: [input.previous_output.tx_hash],\n          };\n        });\n\n        // batch request by block\n        const transactionResponse: OutputToVerify[] = await requestBatch(\n          this.ckbRpcUrl,\n          requestData\n        ).then((response: GetTransactionRPCResult[]) => {\n          return response.map(\n            (item: GetTransactionRPCResult, index: number) => {\n              const cellIndex = tx.inputs[index].previous_output.index;\n              const outputCell =\n                item.result.transaction.outputs[parseInt(cellIndex)];\n              const outputData =\n                item.result.transaction.outputs_data[parseInt(cellIndex)];\n              return { output: outputCell, outputData } as OutputToVerify;\n            }\n          );\n        });\n        transactionResponse.forEach(({ output, outputData }) => {\n          this.filterEvents(output, blockNumber, outputData);\n        });\n      }\n      // publish changed events if subscribed script exists in output cells.\n      for (const [outputIndex, output] of tx.outputs.entries()) {\n        const outputData = tx.outputs_data[outputIndex];\n        this.filterEvents(output, blockNumber, outputData);\n      }\n    }\n    await this.emitMedianTimeEvents();\n  }\n\n  private filterEvents(\n    output: Output,\n    blockNumber: string,\n    outputData: HexString\n  ) {\n    for (const emitter of this.emitters) {\n      if (\n        emitter.lock !== undefined &&\n        this.checkFilterOptions(\n          emitter,\n          blockNumber,\n          outputData,\n          emitter.lock,\n          output.lock\n        )\n      ) {\n        emitter.emit(\"changed\");\n      }\n    }\n    if (output.type !== null) {\n      for (const emitter of this.emitters) {\n        if (\n          emitter.type !== undefined &&\n          this.checkFilterOptions(\n            emitter,\n            blockNumber,\n            outputData,\n            emitter.type,\n            output.type\n          )\n        ) {\n          emitter.emit(\"changed\");\n        }\n      }\n    }\n  }\n\n  private checkFilterOptions(\n    emitter: IndexerEmitter,\n    blockNumber: string,\n    outputData: string,\n    emitterScript: Script,\n    script: Script | undefined\n  ) {\n    const checkBlockNumber = emitter.fromBlock\n      ? BI.from(emitter.fromBlock).lte(blockNumber)\n      : true;\n    const checkOutputData =\n      emitter.outputData === \"any\" || !emitter.outputData\n        ? true\n        : emitter.outputData === outputData;\n    const checkScript = !script\n      ? true\n      : emitterScript.code_hash === script.code_hash &&\n        emitterScript.hash_type === script.hash_type &&\n        this.checkArgs(emitter.argsLen, emitterScript.args, script.args);\n    return checkBlockNumber && checkOutputData && checkScript;\n  }\n\n  private checkArgs(\n    argsLen: number | \"any\" | undefined,\n    emitterArgs: HexString,\n    args: HexString\n  ) {\n    if (argsLen === -1 || (!argsLen && argsLen !== 0)) {\n      return emitterArgs === args;\n    } else if (typeof argsLen === \"number\" && args.length === argsLen * 2 + 2) {\n      return args.substring(0, emitterArgs.length) === emitterArgs;\n    } else if (argsLen === \"any\") {\n      return args.substring(0, emitterArgs.length) === emitterArgs;\n    } else {\n      return false;\n    }\n  }\n\n  private async emitMedianTimeEvents() {\n    if (this.medianTimeEmitters.length === 0) {\n      return;\n    }\n    const info = await request(this.ckbRpcUrl, \"get_blockchain_info\");\n    const medianTime = info.median_time;\n    for (const medianTimeEmitter of this.medianTimeEmitters) {\n      medianTimeEmitter.emit(\"changed\", medianTime);\n    }\n  }\n\n  subscribeMedianTime(): EventEmitter {\n    this.isSubscribeRunning = true;\n    this.scheduleLoop();\n    const medianTimeEmitter = new EventEmitter();\n    this.medianTimeEmitters.push(medianTimeEmitter);\n    return medianTimeEmitter;\n  }\n}\n"],"file":"indexer.js"}