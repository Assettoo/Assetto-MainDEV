{"version":3,"sources":["../src/common.ts"],"names":["ScriptValue","values","defaultLogger","level","message","console","log","lockScriptInfos","configHashCode","_predefinedInfos","_customInfos","infos","resetLockScriptInfos","getLockScriptInfos","registerCustomLockScriptInfos","generateLockScriptInfos","config","undefined","getPredefinedInfos","secpTemplate","SCRIPTS","SECP256K1_BLAKE160","multisigTemplate","SECP256K1_BLAKE160_MULTISIG","acpTemplate","ANYONE_CAN_PAY","predefinedInfos","push","code_hash","CODE_HASH","hash_type","HASH_TYPE","lockScriptInfo","secp256k1Blake160","secp256k1Blake160Multisig","anyoneCanPay","utils","hashCode","Buffer","from","JSON","stringify","length","transfer","txSkeleton","fromInfos","toAddress","amount","changeAddress","tipHeader","useLocktimeCellsFirst","LocktimePoolCellCollector","LocktimePoolCellCollectorClass","_amount","BI","Error","toScript","targetOutput","cell_output","capacity","toString","lock","type","data","targetLockScriptInfo","find","setupOutputCell","update","outputs","injectCapacity","enableDeductCapacity","deductAmount","changeLockScript","fromScript","changeCell","minimalChangeCapacity","changeCapacity","result","locktimePool","injectCapacityWithoutChangeCompatible","LocktimeCellCollector","gt","_commonTransferCompatible","eq","lt","sub","payFee","prepareSigningEntries","_commonTransfer","BigInt","cellProvider","get","getInputKey","input","out_point","tx_hash","index","previousInputs","add","fromScripts","map","fromInfo","_deductCapacityCompatible","loop1","cellCollectors","CellCollector","cellCollector","inputCell","collect","inputKey","has","collectInputCompatible","needCapacity","inputCapacity","availableCapacity","deductCapacity","_capacity","lastFreezedOutput","filter","field","maxBy","i","size","output","validate","equals","clonedOutput","parse","cellCapacity","gte","since","defaultWitness","setupInputCell","lastOutputIndex","lastOutput","lastOutputCapacity","lastOutputFixedEntryIndex","findIndex","fixedEntry","destroyable","_needCapacity","remove","fixedEntries","minimalOutputCapacity","canUseCapacity","clonedLastOutput","outputCapacity","inputLock","payFeeByFeeRate","feeRate","newTxSkeleton","currentTransactionSize","getTransactionSize","fee","calculateFeeCompatible","calculateFee","ratio","base","mul","div","tx","getTransactionSizeByTx","serializedTx","normalizers","NormalizeTransaction","byteLength","__tests__"],"mappings":"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","sourcesContent":["import {\n  parseAddress,\n  TransactionSkeletonType,\n  Options,\n  createTransactionFromSkeleton,\n  minimalCellCapacityCompatible,\n} from \"@ckb-lumos/helpers\";\nimport secp256k1Blake160Multisig from \"./secp256k1_blake160_multisig\";\nimport { FromInfo, parseFromInfo } from \"./from_info\";\nimport secp256k1Blake160 from \"./secp256k1_blake160\";\nimport { getConfig, Config } from \"@ckb-lumos/config-manager\";\nimport locktimePool, {\n  CellCollector as LocktimePoolCellCollectorClass,\n} from \"./locktime_pool\";\nimport {\n  Address,\n  Header,\n  Script,\n  values,\n  Cell,\n  HexString,\n  Hash,\n  PackedSince,\n  utils,\n  Transaction,\n} from \"@ckb-lumos/base\";\nimport anyoneCanPay from \"./anyone_can_pay\";\nconst { ScriptValue } = values;\nimport { Set } from \"immutable\";\nimport { SerializeTransaction } from \"@ckb-lumos/base/lib/core\";\nimport { normalizers } from \"@ckb-lumos/toolkit\";\nimport { isAcpScript } from \"./helper\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { CellCollectorConstructor } from \"./type\";\n\nfunction defaultLogger(level: string, message: string) {\n  console.log(`[${level}] ${message}`);\n}\n/**\n * CellCollector should be a class which implement CellCollectorInterface.\n * If you want to work well with `transfer`, `injectCapacity`, `payFee`, `payFeeByFeeRate`,\n *  please add the `output` at the end of `txSkeleton.get(\"outputs\")`\n */\nexport interface LockScriptInfo {\n  code_hash: Hash;\n  hash_type: \"type\" | \"data\";\n  lockScriptInfo: {\n    CellCollector: CellCollectorConstructor;\n    setupInputCell(\n      txSkeleton: TransactionSkeletonType,\n      inputCell: Cell,\n      fromInfo?: FromInfo,\n      options?: {\n        config?: Config;\n        defaultWitness?: HexString;\n        since?: PackedSince;\n      }\n    ): Promise<TransactionSkeletonType>;\n    prepareSigningEntries(\n      txSkeleton: TransactionSkeletonType,\n      options: Options\n    ): TransactionSkeletonType;\n    setupOutputCell?: (\n      txSkeleton: TransactionSkeletonType,\n      outputCell: Cell,\n      options: Options\n    ) => Promise<TransactionSkeletonType>;\n  };\n}\ntype LockScriptInfosType = {\n  configHashCode: number;\n  _predefinedInfos: LockScriptInfo[];\n  _customInfos: LockScriptInfo[];\n  infos: LockScriptInfo[];\n};\n/**\n * `infos` includes predefined and customized.\n */\nconst lockScriptInfos: LockScriptInfosType = {\n  configHashCode: 0,\n  _predefinedInfos: [],\n  _customInfos: [],\n  get infos(): LockScriptInfo[] {\n    return [...this._predefinedInfos, ...this._customInfos];\n  },\n};\n\nfunction resetLockScriptInfos(): void {\n  lockScriptInfos.configHashCode = 0;\n  lockScriptInfos._predefinedInfos = [];\n  lockScriptInfos._customInfos = [];\n}\n\nfunction getLockScriptInfos(): LockScriptInfosType {\n  return lockScriptInfos;\n}\n\nexport function registerCustomLockScriptInfos(infos: LockScriptInfo[]): void {\n  lockScriptInfos._customInfos = infos;\n}\n\nfunction generateLockScriptInfos({ config = undefined }: Options = {}): void {\n  config = config || getConfig();\n\n  // lazy load\n  const getPredefinedInfos = () => {\n    const secpTemplate = config?.SCRIPTS.SECP256K1_BLAKE160;\n    const multisigTemplate = config?.SCRIPTS.SECP256K1_BLAKE160_MULTISIG;\n    const acpTemplate = config?.SCRIPTS.ANYONE_CAN_PAY;\n\n    const predefinedInfos: LockScriptInfo[] = [];\n\n    if (secpTemplate) {\n      predefinedInfos.push({\n        code_hash: secpTemplate.CODE_HASH,\n        hash_type: secpTemplate.HASH_TYPE,\n        lockScriptInfo: secp256k1Blake160,\n      });\n    } else {\n      defaultLogger(\n        \"warn\",\n        \"SECP256K1_BLAKE160 script info not found in config!\"\n      );\n    }\n\n    if (multisigTemplate) {\n      predefinedInfos.push({\n        code_hash: multisigTemplate.CODE_HASH,\n        hash_type: multisigTemplate.HASH_TYPE,\n        lockScriptInfo: secp256k1Blake160Multisig,\n      });\n    } else {\n      defaultLogger(\n        \"warn\",\n        \"SECP256K1_BLAKE160_MULTISIG script info not found in config!\"\n      );\n    }\n\n    if (acpTemplate) {\n      predefinedInfos.push({\n        code_hash: acpTemplate.CODE_HASH,\n        hash_type: acpTemplate.HASH_TYPE,\n        lockScriptInfo: anyoneCanPay,\n      });\n    } else {\n      defaultLogger(\"warn\", \"ANYONE_CAN_PAY script info not found in config!\");\n    }\n\n    return predefinedInfos;\n  };\n\n  const configHashCode: number = utils.hashCode(\n    Buffer.from(JSON.stringify(config))\n  );\n\n  if (lockScriptInfos.infos.length === 0) {\n    lockScriptInfos._predefinedInfos = getPredefinedInfos();\n    lockScriptInfos.configHashCode = configHashCode;\n  } else {\n    if (configHashCode !== lockScriptInfos.configHashCode) {\n      defaultLogger(`warn`, \"`config` changed, regenerate lockScriptInfos!\");\n      lockScriptInfos._predefinedInfos = getPredefinedInfos();\n      lockScriptInfos.configHashCode = configHashCode;\n    }\n  }\n}\n\n/**\n *\n * @param txSkeleton\n * @param fromInfos\n * @param toAddress\n * @param changeAddress\n * @param amount\n * @param tipHeader will not use locktime cells if tipHeader not provided\n * @param options\n */\nexport async function transfer(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  toAddress: Address,\n  amount: BIish,\n  changeAddress?: Address,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    LocktimePoolCellCollector = LocktimePoolCellCollectorClass,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    LocktimePoolCellCollector?: CellCollectorConstructor;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const _amount = BI.from(amount);\n  if (!toAddress) {\n    throw new Error(\"You must provide a to address!\");\n  }\n\n  const toScript: Script = parseAddress(toAddress, { config });\n  const targetOutput: Cell = {\n    cell_output: {\n      capacity: \"0x\" + _amount.toString(16),\n      lock: toScript,\n      type: undefined,\n    },\n    data: \"0x\",\n  };\n\n  generateLockScriptInfos({ config });\n\n  const targetLockScriptInfo:\n    | LockScriptInfo\n    | undefined = lockScriptInfos.infos.find((lockScriptInfo) => {\n    return (\n      lockScriptInfo.code_hash === toScript.code_hash &&\n      lockScriptInfo.hash_type === toScript.hash_type\n    );\n  });\n\n  if (\n    targetLockScriptInfo &&\n    targetLockScriptInfo.lockScriptInfo?.setupOutputCell\n  ) {\n    txSkeleton = await targetLockScriptInfo.lockScriptInfo.setupOutputCell(\n      txSkeleton,\n      targetOutput,\n      {\n        config,\n      }\n    );\n  } else {\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push(targetOutput);\n    });\n  }\n\n  txSkeleton = await injectCapacity(\n    txSkeleton,\n    fromInfos,\n    _amount.toString(),\n    changeAddress,\n    tipHeader,\n    {\n      config,\n      useLocktimeCellsFirst,\n      LocktimePoolCellCollector,\n    }\n  );\n\n  return txSkeleton;\n}\n\nexport async function injectCapacity(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: BIish,\n  changeAddress?: Address,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    LocktimePoolCellCollector = LocktimePoolCellCollectorClass,\n    enableDeductCapacity = true,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    LocktimePoolCellCollector?: CellCollectorConstructor;\n    enableDeductCapacity?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const _amount = BI.from(amount);\n  let deductAmount = _amount;\n\n  if (fromInfos.length === 0) {\n    throw new Error(\"No from info provided!\");\n  }\n\n  const changeLockScript: Script = parseFromInfo(\n    changeAddress || fromInfos[0],\n    { config }\n  ).fromScript;\n  const changeCell: Cell = {\n    cell_output: {\n      capacity: \"0x0\",\n      lock: changeLockScript,\n      type: undefined,\n    },\n    data: \"0x\",\n  };\n  const minimalChangeCapacity: BI = BI.from(\n    minimalCellCapacityCompatible(changeCell)\n  );\n  let changeCapacity: BI = BI.from(0);\n  if (useLocktimeCellsFirst) {\n    if (tipHeader) {\n      const result = await locktimePool.injectCapacityWithoutChangeCompatible(\n        txSkeleton,\n        fromInfos,\n        deductAmount.toString(),\n        tipHeader,\n        minimalChangeCapacity.toString(),\n        {\n          config,\n          LocktimeCellCollector: LocktimePoolCellCollector,\n          enableDeductCapacity,\n        }\n      );\n      txSkeleton = result.txSkeleton;\n      deductAmount = BI.from(result.capacity);\n      // if deductAmount > 0, changeCapacity must be 0\n      changeCapacity = BI.from(result.changeCapacity);\n    }\n\n    if (deductAmount.gt(0)) {\n      const result = await _commonTransferCompatible(\n        txSkeleton,\n        fromInfos,\n        deductAmount,\n        minimalChangeCapacity,\n        { config, enableDeductCapacity }\n      );\n      txSkeleton = result.txSkeleton;\n      deductAmount = result.capacity;\n      changeCapacity = result.changeCapacity;\n    } else if (\n      deductAmount.eq(0) &&\n      changeCapacity.gt(0) &&\n      changeCapacity.lt(minimalChangeCapacity)\n    ) {\n      const result = await _commonTransferCompatible(\n        txSkeleton,\n        fromInfos,\n        minimalChangeCapacity.sub(changeCapacity),\n        BI.from(0),\n        { config, enableDeductCapacity }\n      );\n      txSkeleton = result.txSkeleton;\n      deductAmount = result.capacity;\n      changeCapacity = result.changeCapacity;\n    }\n  } else {\n    const result = await _commonTransferCompatible(\n      txSkeleton,\n      fromInfos,\n      deductAmount,\n      minimalChangeCapacity,\n      { config, enableDeductCapacity }\n    );\n    txSkeleton = result.txSkeleton;\n    deductAmount = result.capacity;\n    changeCapacity = result.changeCapacity;\n\n    if (tipHeader) {\n      if (deductAmount.gt(0)) {\n        const result = await locktimePool.injectCapacityWithoutChangeCompatible(\n          txSkeleton,\n          fromInfos,\n          deductAmount.toString(),\n          tipHeader,\n          minimalChangeCapacity.toString(),\n          {\n            config,\n            LocktimeCellCollector: LocktimePoolCellCollector,\n            enableDeductCapacity,\n          }\n        );\n        txSkeleton = result.txSkeleton;\n        deductAmount = BI.from(result.capacity);\n        changeCapacity = BI.from(result.changeCapacity);\n      } else if (\n        deductAmount.eq(0) &&\n        changeCapacity.gt(0) &&\n        changeCapacity.lt(minimalChangeCapacity)\n      ) {\n        const result = await locktimePool.injectCapacityWithoutChangeCompatible(\n          txSkeleton,\n          fromInfos,\n          minimalChangeCapacity.sub(changeCapacity).toString(),\n          tipHeader,\n          0,\n          {\n            config,\n            LocktimeCellCollector: LocktimePoolCellCollector,\n            enableDeductCapacity,\n          }\n        );\n        txSkeleton = result.txSkeleton;\n        deductAmount = BI.from(result.capacity);\n        changeCapacity = BI.from(result.changeCapacity);\n      }\n    }\n  }\n\n  if (deductAmount.gt(0)) {\n    throw new Error(\"Not enough capacity in from infos!\");\n  }\n\n  if (changeCapacity.gt(0) && changeCapacity.lt(minimalChangeCapacity)) {\n    throw new Error(\"Not enough capacity in from infos for change!\");\n  }\n\n  if (changeCapacity.gt(0)) {\n    changeCell.cell_output.capacity = \"0x\" + changeCapacity.toString(16);\n\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push(changeCell);\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport async function payFee(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: BIish,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    enableDeductCapacity = true,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    enableDeductCapacity?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  return injectCapacity(txSkeleton, fromInfos, amount, undefined, tipHeader, {\n    config,\n    useLocktimeCellsFirst,\n    enableDeductCapacity,\n  });\n}\n\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  { config = undefined }: Options = {}\n): TransactionSkeletonType {\n  config = config || getConfig();\n\n  generateLockScriptInfos({ config });\n\n  for (const lockScriptInfo of lockScriptInfos.infos) {\n    txSkeleton = lockScriptInfo.lockScriptInfo.prepareSigningEntries(\n      txSkeleton,\n      { config }\n    );\n  }\n\n  return txSkeleton;\n}\n\nasync function _commonTransfer(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: bigint,\n  minimalChangeCapacity: bigint,\n  {\n    config = undefined,\n    enableDeductCapacity = true,\n  }: Options & { enableDeductCapacity?: boolean } = {}\n): Promise<{\n  txSkeleton: TransactionSkeletonType;\n  capacity: bigint;\n  changeCapacity: bigint;\n}> {\n  const result = await _commonTransferCompatible(\n    txSkeleton,\n    fromInfos,\n    amount,\n    minimalChangeCapacity,\n    {\n      config,\n      enableDeductCapacity,\n    }\n  );\n  return {\n    txSkeleton: result.txSkeleton,\n    capacity: BigInt(result.capacity.toString()),\n    changeCapacity: BigInt(result.changeCapacity.toString()),\n  };\n}\n\nasync function _commonTransferCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  amount: BIish,\n  minimalChangeCapacity: BIish,\n  {\n    config = undefined,\n    enableDeductCapacity = true,\n  }: Options & { enableDeductCapacity?: boolean } = {}\n): Promise<{\n  txSkeleton: TransactionSkeletonType;\n  capacity: BI;\n  changeCapacity: BI;\n}> {\n  config = config || getConfig();\n  let _amount = BI.from(amount);\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(\"Cell Provider is missing!\");\n  }\n\n  const getInputKey = (input: Cell) =>\n    `${input.out_point?.tx_hash}_${input.out_point?.index}`;\n  let previousInputs = Set<string>();\n  for (const input of txSkeleton.get(\"inputs\")) {\n    previousInputs = previousInputs.add(getInputKey(input));\n  }\n\n  const fromScripts: Script[] = fromInfos.map((fromInfo) => {\n    return parseFromInfo(fromInfo, { config }).fromScript;\n  });\n\n  for (const fromScript of fromScripts) {\n    if (enableDeductCapacity && _amount.gt(0)) {\n      [txSkeleton, _amount] = _deductCapacityCompatible(\n        txSkeleton,\n        fromScript,\n        _amount\n      );\n    }\n  }\n\n  generateLockScriptInfos({ config });\n\n  let changeCapacity: BI = BI.from(0);\n\n  if (_amount.gt(0)) {\n    // collect cells\n    loop1: for (const fromInfo of fromInfos) {\n      const cellCollectors = lockScriptInfos.infos.map((lockScriptInfo) => {\n        return new lockScriptInfo.lockScriptInfo.CellCollector(\n          fromInfo,\n          cellProvider,\n          {\n            config,\n          }\n        );\n      });\n\n      for (const cellCollector of cellCollectors) {\n        for await (const inputCell of cellCollector.collect()) {\n          const inputKey: string = getInputKey(inputCell);\n          if (previousInputs.has(inputKey)) {\n            continue;\n          }\n          previousInputs = previousInputs.add(inputKey);\n          const result = await collectInputCompatible(\n            txSkeleton,\n            inputCell,\n            fromInfo,\n            {\n              config,\n              needCapacity: _amount,\n            }\n          );\n          txSkeleton = result.txSkeleton;\n\n          const inputCapacity: BI = BI.from(result.availableCapacity);\n          let deductCapacity: BI = inputCapacity;\n          if (deductCapacity.gt(_amount)) {\n            deductCapacity = _amount;\n          }\n          _amount = _amount.sub(deductCapacity);\n          changeCapacity = changeCapacity.add(\n            inputCapacity.sub(deductCapacity)\n          );\n\n          if (\n            _amount.eq(0) &&\n            (changeCapacity.eq(0) || changeCapacity.gt(minimalChangeCapacity))\n          ) {\n            break loop1;\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    txSkeleton,\n    capacity: _amount,\n    changeCapacity,\n  };\n}\n\nfunction _deductCapacityCompatible(\n  txSkeleton: TransactionSkeletonType,\n  fromScript: Script,\n  capacity: BIish\n): [TransactionSkeletonType, BI] {\n  /*\n   * First, check if there is any output cells that contains enough capacity\n   * for us to tinker with.\n   *\n   * TODO: the solution right now won't cover all cases, some outputs before the\n   * last output might still be tinkerable, right now we are working on the\n   * simple solution, later we can change this for more optimizations.\n   */\n  let _capacity = BI.from(capacity);\n  const lastFreezedOutput = txSkeleton\n    .get(\"fixedEntries\")\n    .filter(({ field }) => field === \"outputs\")\n    .maxBy(({ index }) => index);\n  let i = lastFreezedOutput ? lastFreezedOutput.index + 1 : 0;\n  for (; i < txSkeleton.get(\"outputs\").size && _capacity.gt(0); i++) {\n    const output = txSkeleton.get(\"outputs\").get(i);\n    if (\n      output &&\n      new ScriptValue(output.cell_output.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    ) {\n      const clonedOutput: Cell = JSON.parse(JSON.stringify(output));\n      const cellCapacity = BI.from(clonedOutput.cell_output.capacity);\n      const availableCapacity: BI = cellCapacity;\n      let deductCapacity;\n      if (_capacity.gte(availableCapacity)) {\n        deductCapacity = availableCapacity;\n      } else {\n        deductCapacity = cellCapacity.sub(\n          minimalCellCapacityCompatible(clonedOutput)\n        );\n        if (deductCapacity.gt(capacity)) {\n          deductCapacity = capacity;\n        }\n      }\n      _capacity = _capacity.sub(deductCapacity);\n      clonedOutput.cell_output.capacity =\n        \"0x\" + cellCapacity.sub(deductCapacity).toString(16);\n\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.update(i, () => clonedOutput);\n      });\n    }\n  }\n  // Remove all output cells with capacity equal to 0\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.filter(\n      (output) =>\n        BI.from(output.cell_output.capacity).toString() !==\n        BI.from(0).toString()\n    );\n  });\n\n  return [txSkeleton, _capacity];\n}\n\n// Alter output generated by `setupInputCell`\nasync function collectInputCompatible(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  fromInfo?: FromInfo,\n  {\n    config = undefined,\n    since = undefined,\n    defaultWitness = \"0x\",\n    needCapacity = undefined,\n  }: Options & {\n    defaultWitness?: HexString;\n    since?: PackedSince;\n    needCapacity?: BIish;\n  } = {}\n): Promise<{\n  txSkeleton: TransactionSkeletonType;\n  availableCapacity: BI;\n}> {\n  config = config || getConfig();\n\n  txSkeleton = await setupInputCell(txSkeleton, inputCell, fromInfo, {\n    config,\n    since,\n    defaultWitness,\n  });\n\n  const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n  const lastOutput: Cell | undefined = txSkeleton\n    .get(\"outputs\")\n    .get(lastOutputIndex);\n  /* c8 ignore next 3 */\n  if (!lastOutput) {\n    throw new Error(\"Impossible: can not find last output\");\n  }\n  const lastOutputCapacity: BI = BI.from(lastOutput.cell_output.capacity);\n  const lastOutputFixedEntryIndex: number = txSkeleton\n    .get(\"fixedEntries\")\n    .findIndex((fixedEntry) => {\n      return (\n        fixedEntry.field === \"outputs\" && fixedEntry.index === lastOutputIndex\n      );\n    });\n  const fromScript: Script = inputCell.cell_output.lock;\n\n  let availableCapacity: BI = BI.from(0);\n  if (config.SCRIPTS.ANYONE_CAN_PAY && isAcpScript(fromScript, config)) {\n    const destroyable = !!(\n      fromInfo &&\n      typeof fromInfo === \"object\" &&\n      \"destroyable\" in fromInfo &&\n      fromInfo.destroyable\n    );\n    const _needCapacity = needCapacity\n      ? BI.from(needCapacity)\n      : lastOutputCapacity;\n\n    if (destroyable) {\n      availableCapacity = lastOutputCapacity;\n      // remove output & fixedEntry added by `setupInputCell`\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.remove(lastOutputIndex);\n      });\n      if (lastOutputFixedEntryIndex >= 0) {\n        txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n          return fixedEntries.remove(lastOutputFixedEntryIndex);\n        });\n      }\n    } else {\n      // Ignore `fixedEntries` and update capacity of output which generated by `setupInputCell`\n      const minimalOutputCapacity: BI = BI.from(\n        minimalCellCapacityCompatible(lastOutput)\n      );\n      const canUseCapacity = lastOutputCapacity.sub(minimalOutputCapacity);\n      const clonedLastOutput: Cell = JSON.parse(JSON.stringify(lastOutput));\n      let outputCapacity: BI = minimalOutputCapacity;\n      availableCapacity = canUseCapacity;\n      if (_needCapacity.lt(canUseCapacity)) {\n        outputCapacity = lastOutputCapacity.sub(_needCapacity);\n        availableCapacity = _needCapacity;\n      }\n      clonedLastOutput.cell_output.capacity =\n        \"0x\" + outputCapacity.toString(16);\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.update(lastOutputIndex, () => clonedLastOutput);\n      });\n    }\n  } else {\n    // Ignore if last output is fixed.\n    if (lastOutputFixedEntryIndex < 0) {\n      // Remove last output\n      availableCapacity = BI.from(\n        txSkeleton.get(\"outputs\").get(lastOutputIndex)?.cell_output.capacity\n      );\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.remove(lastOutputIndex);\n      });\n    }\n  }\n\n  return {\n    txSkeleton,\n    availableCapacity,\n  };\n}\n\n/**\n * A function to transfer input to output, and add input & output to txSkeleton.\n * And it will deal with cell deps and witnesses too. (Add the input required cell deps and witnesses.)\n * It should be noted that the output must be added to the end of txSkeleton.get(\"outputs\").\n *\n * @param txSkeleton\n * @param inputCell\n * @param fromInfo\n * @param options\n */\nexport async function setupInputCell(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  fromInfo?: FromInfo,\n  {\n    config = undefined,\n    since = undefined,\n    defaultWitness = undefined,\n  }: Options & {\n    since?: PackedSince;\n    defaultWitness?: HexString;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  generateLockScriptInfos({ config });\n  const inputLock = inputCell.cell_output.lock;\n\n  const targetLockScriptInfo:\n    | LockScriptInfo\n    | undefined = lockScriptInfos.infos.find((lockScriptInfo) => {\n    return (\n      lockScriptInfo.code_hash === inputLock.code_hash &&\n      lockScriptInfo.hash_type === inputLock.hash_type\n    );\n  });\n\n  if (!targetLockScriptInfo) {\n    throw new Error(`No LockScriptInfo found for setupInputCell!`);\n  }\n\n  return targetLockScriptInfo.lockScriptInfo.setupInputCell(\n    txSkeleton,\n    inputCell,\n    fromInfo,\n    {\n      config,\n      since,\n      defaultWitness,\n    }\n  );\n}\n\nexport async function payFeeByFeeRate(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  feeRate: BIish,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    useLocktimeCellsFirst = true,\n    enableDeductCapacity = true,\n  }: {\n    config?: Config;\n    useLocktimeCellsFirst?: boolean;\n    enableDeductCapacity?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  let size = 0;\n  let newTxSkeleton: TransactionSkeletonType = txSkeleton;\n\n  /**\n   * Only one case `currentTransactionSize < size` :\n   * change output capacity equals current fee (feeA), so one output reduced,\n   * and if reduce the fee, change output will add again, fee will increase to feeA.\n   */\n  let currentTransactionSize: number = getTransactionSize(newTxSkeleton);\n  while (currentTransactionSize > size) {\n    size = currentTransactionSize;\n    const fee: BI = calculateFeeCompatible(size, feeRate);\n\n    newTxSkeleton = await payFee(txSkeleton, fromInfos, fee, tipHeader, {\n      config,\n      useLocktimeCellsFirst,\n      enableDeductCapacity,\n    });\n    currentTransactionSize = getTransactionSize(newTxSkeleton);\n  }\n\n  return newTxSkeleton;\n}\n\nfunction calculateFee(size: number, feeRate: bigint): bigint {\n  const result = calculateFeeCompatible(size, feeRate);\n  return BigInt(result.toString());\n}\n\nfunction calculateFeeCompatible(size: number, feeRate: BIish): BI {\n  const ratio = BI.from(1000);\n  const base = BI.from(size).mul(feeRate);\n  const fee = base.div(ratio);\n  if (fee.mul(ratio).lt(base)) {\n    return fee.add(1);\n  }\n  return BI.from(fee);\n}\n\nfunction getTransactionSize(txSkeleton: TransactionSkeletonType): number {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  return getTransactionSizeByTx(tx);\n}\n\nfunction getTransactionSizeByTx(tx: Transaction): number {\n  const serializedTx = SerializeTransaction(\n    normalizers.NormalizeTransaction(tx)\n  );\n  // 4 is serialized offset bytesize\n  const size = serializedTx.byteLength + 4;\n  return size;\n}\n\nexport default {\n  transfer,\n  payFee,\n  prepareSigningEntries,\n  injectCapacity,\n  setupInputCell,\n  registerCustomLockScriptInfos,\n  payFeeByFeeRate,\n  __tests__: {\n    _commonTransfer,\n    resetLockScriptInfos,\n    getLockScriptInfos,\n    generateLockScriptInfos,\n    getTransactionSizeByTx,\n    getTransactionSize,\n    calculateFee,\n    calculateFeeCompatible,\n  },\n};\n"],"file":"common.js"}