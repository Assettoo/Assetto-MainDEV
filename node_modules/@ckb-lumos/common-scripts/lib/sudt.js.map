{"version":3,"sources":["../src/sudt.ts"],"names":["toBigUInt128LE","computeScriptHash","utils","ScriptValue","values","issueToken","txSkeleton","fromInfo","amount","capacity","tipHeader","config","undefined","template","SCRIPTS","SUDT","Error","out_point","tx_hash","TX_HASH","index","INDEX","dep_type","DEP_TYPE","fromScript","toScript","sudtTypeScript","code_hash","CODE_HASH","hash_type","HASH_TYPE","args","targetOutput","cell_output","lock","type","data","block_hash","_capacity","BI","from","toString","update","outputs","push","outputIndex","get","size","fixedEntries","field","common","injectCapacity","transfer","fromInfos","sudtToken","toAddress","changeAddress","LocktimePoolCellCollector","LocktimeCellCollector","splitChangeCell","_amount","SUDT_SCRIPT","length","fromScripts","map","changeOutputLockScript","lte","sudtType","_generateSudtScript","cellProvider","toAddressInputCapacity","toAddressInputAmount","toAddressCellCollector","AnyoneCanPayCellCollector","queryOptions","toAddressInput","collect","next","value","inputs","witnesses","add","changeCell","changeCellWithoutSudt","changeCapacity","changeAmount","previousInputs","input","cellCollectorInfos","forEach","locktimePoolCellCollector","cellCollector","secpCollector","secp256k1Blake160","CellCollector","multisigCollector","secp256k1Blake160Multisig","acpCollector","anyoneCanPay","isAnyoneCanPay","destroyable","locktimeCellCollector","inputCell","key","has","setupInputCell","lastOutputIndex","remove","fixedEntryIndex","findIndex","fixedEntry","inputCapacity","inputAmount","deductCapacity","sub","deductAmount","gt","currentChangeCapacity","currentChangeAmount","acpChangeCell","eq","changeOutputIndex","output","validate","equals","gte","originOutput","clonedOutput","JSON","parse","stringify","minimalChangeCellCapcaity","minimalChangeCellWithoutSudtCapacity","splitFlag","set","lt","token","ownerForSudt","lockHash"],"mappings":"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","sourcesContent":["import { addCellDep, isAcpScript } from \"./helper\";\nimport {\n  utils,\n  Hash,\n  Address,\n  Cell,\n  Script,\n  Header,\n  CellCollector as CellCollectorInterface,\n  values,\n} from \"@ckb-lumos/base\";\nconst { toBigUInt128LE, computeScriptHash } = utils;\nimport secp256k1Blake160Multisig from \"./secp256k1_blake160_multisig\";\nimport { FromInfo, parseFromInfo } from \"./from_info\";\nimport common from \"./common\";\nimport {\n  parseAddress,\n  TransactionSkeletonType,\n  Options,\n  minimalCellCapacityCompatible,\n} from \"@ckb-lumos/helpers\";\nimport { Set, List } from \"immutable\";\nimport { getConfig, Config } from \"@ckb-lumos/config-manager\";\nimport { CellCollector as LocktimeCellCollector } from \"./locktime_pool\";\nimport anyoneCanPay, {\n  CellCollector as AnyoneCanPayCellCollector,\n} from \"./anyone_can_pay\";\nconst { ScriptValue } = values;\nimport secp256k1Blake160 from \"./secp256k1_blake160\";\nimport { readBigUInt128LECompatible } from \"@ckb-lumos/base/lib/utils\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\n\nexport type Token = Hash;\n\n/**\n * Issue an sUDT cell\n *\n * @param txSkeleton\n * @param fromInfo\n * @param amount\n * @param capacity\n * @param tipHeader\n * @param options\n */\nexport async function issueToken(\n  txSkeleton: TransactionSkeletonType,\n  fromInfo: FromInfo,\n  amount: BIish,\n  capacity?: BIish,\n  tipHeader?: Header,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const template = config.SCRIPTS.SUDT;\n\n  if (!template) {\n    throw new Error(\"Provided config does not have SUDT script setup!\");\n  }\n\n  txSkeleton = addCellDep(txSkeleton, {\n    out_point: {\n      tx_hash: template.TX_HASH,\n      index: template.INDEX,\n    },\n    dep_type: template.DEP_TYPE,\n  });\n\n  const fromScript = parseFromInfo(fromInfo, { config }).fromScript;\n\n  const toScript = fromScript;\n\n  const sudtTypeScript = {\n    code_hash: template.CODE_HASH,\n    hash_type: template.HASH_TYPE,\n    args: computeScriptHash(fromScript),\n  };\n\n  const targetOutput: Cell = {\n    cell_output: {\n      capacity: \"0x0\",\n      lock: toScript,\n      type: sudtTypeScript,\n    },\n    data: toBigUInt128LE(amount),\n    out_point: undefined,\n    block_hash: undefined,\n  };\n\n  if (!capacity) {\n    capacity = minimalCellCapacityCompatible(targetOutput);\n  }\n  let _capacity = BI.from(capacity);\n  targetOutput.cell_output.capacity = \"0x\" + _capacity.toString(16);\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(targetOutput);\n  });\n\n  const outputIndex = txSkeleton.get(\"outputs\").size - 1;\n\n  // fix entry\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push({\n      field: \"outputs\",\n      index: outputIndex,\n    });\n  });\n\n  txSkeleton = await common.injectCapacity(\n    txSkeleton,\n    [fromInfo],\n    BI.from(BI.from(targetOutput.cell_output.capacity)),\n    undefined,\n    tipHeader,\n    {\n      config,\n    }\n  );\n\n  return txSkeleton;\n}\n\n/**\n *\n * @param txSkeleton\n * @param fromInfos\n * @param sudtToken\n * @param toAddress\n * @param amount\n * @param changeAddress if not provided, will use first fromInfo\n * @param capacity\n * @param tipHeader\n * @param options When `splitChangeCell = true` && change amount > 0 && change capacity >= minimalCellCapacity(change cell with sudt) + minimalCellCapacity(change cell without sudt), change cell will split to two change cells, one with sudt and one without.\n */\nexport async function transfer(\n  txSkeleton: TransactionSkeletonType,\n  fromInfos: FromInfo[],\n  sudtToken: Token,\n  toAddress: Address,\n  amount: BIish,\n  changeAddress?: Address,\n  capacity?: BIish,\n  tipHeader?: Header,\n  {\n    config = undefined,\n    LocktimePoolCellCollector = LocktimeCellCollector,\n    splitChangeCell = false,\n  }: Options & {\n    LocktimePoolCellCollector?: any;\n    splitChangeCell?: boolean;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  let _amount = BI.from(amount);\n  let _capacity = capacity ? BI.from(capacity) : undefined;\n\n  const SUDT_SCRIPT = config.SCRIPTS.SUDT;\n\n  if (!SUDT_SCRIPT) {\n    throw new Error(\"Provided config does not have SUDT script setup!\");\n  }\n\n  if (fromInfos.length === 0) {\n    throw new Error(\"`fromInfos` can't be empty!\");\n  }\n\n  if (!toAddress) {\n    throw new Error(\"You must provide a to address!\");\n  }\n  const toScript = parseAddress(toAddress, { config });\n\n  const fromScripts: Script[] = fromInfos.map(\n    (fromInfo) => parseFromInfo(fromInfo, { config }).fromScript\n  );\n  const changeOutputLockScript = changeAddress\n    ? parseAddress(changeAddress, { config })\n    : fromScripts[0];\n\n  if (_amount.lte(0)) {\n    throw new Error(\"amount must be greater than 0\");\n  }\n\n  const sudtType = _generateSudtScript(sudtToken, config);\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(\"Cell provider is missing!\");\n  }\n\n  // if toScript is an anyone-can-pay script\n  let toAddressInputCapacity: BI = BI.from(0);\n  let toAddressInputAmount: BI = BI.from(0);\n  if (isAcpScript(toScript, config)) {\n    const toAddressCellCollector = new AnyoneCanPayCellCollector(\n      toAddress,\n      cellProvider,\n      {\n        config,\n        queryOptions: {\n          type: sudtType,\n          data: \"any\",\n        },\n      }\n    );\n\n    const toAddressInput: Cell | void = (\n      await toAddressCellCollector.collect().next()\n    ).value;\n    if (!toAddressInput) {\n      throw new Error(`toAddress ANYONE_CAN_PAY input not found!`);\n    }\n\n    txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n      return inputs.push(toAddressInput);\n    });\n\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n      return witnesses.push(\"0x\");\n    });\n\n    toAddressInputCapacity = BI.from(toAddressInput.cell_output.capacity);\n    toAddressInputAmount = BI.from(\n      readBigUInt128LECompatible(toAddressInput.data)\n    );\n  }\n\n  const targetOutput: Cell = {\n    cell_output: {\n      capacity: \"0x0\",\n      lock: toScript,\n      type: sudtType,\n    },\n    data: toBigUInt128LE(_amount.toString()),\n    out_point: undefined,\n    block_hash: undefined,\n  };\n  if (isAcpScript(toScript, config)) {\n    if (!_capacity) {\n      _capacity = BI.from(0);\n    }\n    targetOutput.cell_output.capacity =\n      \"0x\" + toAddressInputCapacity.add(_capacity).toString(16);\n    targetOutput.data = toBigUInt128LE(toAddressInputAmount.add(_amount));\n  } else {\n    if (!_capacity) {\n      _capacity = BI.from(minimalCellCapacityCompatible(targetOutput));\n    }\n    targetOutput.cell_output.capacity = \"0x\" + _capacity.toString(16);\n  }\n\n  // collect cells with which includes sUDT info\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(targetOutput);\n  });\n\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push({\n      field: \"outputs\",\n      index: txSkeleton.get(\"outputs\").size - 1,\n    });\n  });\n\n  txSkeleton = addCellDep(txSkeleton, {\n    out_point: {\n      tx_hash: SUDT_SCRIPT.TX_HASH,\n      index: SUDT_SCRIPT.INDEX,\n    },\n    dep_type: SUDT_SCRIPT.DEP_TYPE,\n  });\n\n  // collect cells\n  const changeCell: Cell = {\n    cell_output: {\n      capacity: \"0x0\",\n      lock: changeOutputLockScript,\n      type: sudtType,\n    },\n    data: toBigUInt128LE(BI.from(0).toString()),\n    out_point: undefined,\n    block_hash: undefined,\n  };\n  const changeCellWithoutSudt: Cell = {\n    cell_output: {\n      capacity: \"0x0\",\n      lock: changeOutputLockScript,\n      type: undefined,\n    },\n    data: \"0x\",\n    out_point: undefined,\n    block_hash: undefined,\n  };\n  let changeCapacity = BI.from(0);\n  let changeAmount = BI.from(0);\n  let previousInputs = Set<string>();\n  for (const input of txSkeleton.get(\"inputs\")) {\n    previousInputs = previousInputs.add(\n      `${input.out_point!.tx_hash}_${input.out_point!.index}`\n    );\n  }\n  let cellCollectorInfos: List<{\n    cellCollector: CellCollectorInterface;\n    index: number;\n    isAnyoneCanPay?: boolean;\n    destroyable?: boolean;\n  }> = List();\n  if (tipHeader) {\n    fromInfos.forEach((fromInfo, index) => {\n      const locktimePoolCellCollector = new LocktimePoolCellCollector(\n        fromInfo,\n        cellProvider,\n        {\n          config,\n          tipHeader,\n          queryOptions: {\n            type: sudtType,\n            data: \"any\",\n          },\n        }\n      );\n\n      cellCollectorInfos = cellCollectorInfos.push({\n        cellCollector: locktimePoolCellCollector,\n        index,\n      });\n    });\n  }\n  fromInfos.forEach((fromInfo, index) => {\n    const secpCollector = new secp256k1Blake160.CellCollector(\n      fromInfo,\n      cellProvider,\n      {\n        config,\n        queryOptions: {\n          type: sudtType,\n          data: \"any\",\n        },\n      }\n    );\n    const multisigCollector = new secp256k1Blake160Multisig.CellCollector(\n      fromInfo,\n      cellProvider,\n      {\n        config,\n        queryOptions: {\n          type: sudtType,\n          data: \"any\",\n        },\n      }\n    );\n    const acpCollector = new anyoneCanPay.CellCollector(\n      fromInfo,\n      cellProvider,\n      {\n        config,\n        queryOptions: {\n          type: sudtType,\n          data: \"any\",\n        },\n      }\n    );\n\n    cellCollectorInfos = cellCollectorInfos.push(\n      {\n        cellCollector: secpCollector,\n        index,\n      },\n      {\n        cellCollector: multisigCollector,\n        index,\n      },\n      {\n        cellCollector: acpCollector,\n        index,\n        isAnyoneCanPay: true,\n        destroyable: parseFromInfo(fromInfo, { config }).destroyable,\n      }\n    );\n  });\n  if (tipHeader) {\n    fromInfos.forEach((fromInfo, index) => {\n      const locktimeCellCollector = new LocktimePoolCellCollector(\n        fromInfo,\n        cellProvider,\n        {\n          config,\n          tipHeader,\n        }\n      );\n\n      cellCollectorInfos = cellCollectorInfos.push({\n        cellCollector: locktimeCellCollector,\n        index,\n      });\n    });\n  }\n  fromInfos.forEach((fromInfo, index) => {\n    const secpCollector = new secp256k1Blake160.CellCollector(\n      fromInfo,\n      cellProvider,\n      {\n        config,\n      }\n    );\n    const multisigCollector = new secp256k1Blake160Multisig.CellCollector(\n      fromInfo,\n      cellProvider,\n      {\n        config,\n      }\n    );\n    const acpCollector = new anyoneCanPay.CellCollector(\n      fromInfo,\n      cellProvider,\n      {\n        config,\n      }\n    );\n\n    cellCollectorInfos = cellCollectorInfos.push(\n      {\n        cellCollector: secpCollector,\n        index,\n      },\n      {\n        cellCollector: multisigCollector,\n        index,\n      },\n      {\n        cellCollector: acpCollector,\n        index,\n        isAnyoneCanPay: true,\n        destroyable: parseFromInfo(fromInfo, { config }).destroyable,\n      }\n    );\n  });\n  for (const {\n    index,\n    cellCollector,\n    isAnyoneCanPay,\n    destroyable,\n  } of cellCollectorInfos) {\n    for await (const inputCell of cellCollector.collect()) {\n      // skip inputs already exists in txSkeleton.inputs\n      const key = `${inputCell.out_point!.tx_hash}_${\n        inputCell.out_point!.index\n      }`;\n      if (previousInputs.has(key)) {\n        continue;\n      }\n      previousInputs = previousInputs.add(key);\n\n      const fromInfo = fromInfos[index];\n      txSkeleton = await common.setupInputCell(\n        txSkeleton,\n        inputCell,\n        fromInfo,\n        {\n          config,\n        }\n      );\n      // remove output which added by `setupInputCell`\n      const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.remove(lastOutputIndex);\n      });\n      // remove output fixedEntry\n      const fixedEntryIndex: number = txSkeleton\n        .get(\"fixedEntries\")\n        .findIndex((fixedEntry) => {\n          return (\n            fixedEntry.field === \"outputs\" &&\n            fixedEntry.index === lastOutputIndex\n          );\n        });\n      if (fixedEntryIndex >= 0) {\n        txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n          return fixedEntries.remove(fixedEntryIndex);\n        });\n      }\n\n      const inputCapacity: BI = BI.from(inputCell.cell_output.capacity);\n      const inputAmount: BI = inputCell.cell_output.type\n        ? BI.from(readBigUInt128LECompatible(inputCell.data))\n        : BI.from(0);\n      let deductCapacity: BI =\n        isAnyoneCanPay && !destroyable\n          ? inputCapacity.sub(minimalCellCapacityCompatible(inputCell))\n          : inputCapacity;\n      let deductAmount: BI = inputAmount;\n      if (deductCapacity.gt(_capacity)) {\n        deductCapacity = BI.from(_capacity);\n      }\n      _capacity = _capacity.sub(deductCapacity);\n      const currentChangeCapacity: BI = inputCapacity.sub(deductCapacity);\n      if (!isAnyoneCanPay || (isAnyoneCanPay && destroyable)) {\n        changeCapacity = changeCapacity.add(currentChangeCapacity);\n      }\n      if (deductAmount.gt(_amount)) {\n        deductAmount = _amount;\n      }\n      _amount = _amount.sub(deductAmount);\n      const currentChangeAmount: BI = inputAmount.sub(deductAmount);\n      if (!isAnyoneCanPay || (isAnyoneCanPay && destroyable)) {\n        changeAmount = changeAmount.add(currentChangeAmount);\n      }\n\n      if (isAnyoneCanPay && !destroyable) {\n        const acpChangeCell: Cell = {\n          cell_output: {\n            capacity: \"0x\" + currentChangeCapacity.toString(16),\n            lock: inputCell.cell_output.lock,\n            type: inputCell.cell_output.type,\n          },\n          data: inputCell.cell_output.type\n            ? toBigUInt128LE(currentChangeAmount.toString())\n            : \"0x\",\n        };\n\n        txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n          return outputs.push(acpChangeCell);\n        });\n\n        if (inputCell.cell_output.type) {\n          txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n            return fixedEntries.push({\n              field: \"outputs\",\n              index: txSkeleton.get(\"outputs\").size - 1,\n            });\n          });\n        }\n      }\n\n      // changeAmount = 0n, the change output no need to include sudt type script\n      if (\n        _capacity.eq(0) &&\n        _amount.eq(0) &&\n        ((changeCapacity.eq(0) && changeAmount.eq(0)) ||\n          (changeCapacity.gt(\n            minimalCellCapacityCompatible(changeCellWithoutSudt)\n          ) &&\n            changeAmount.eq(0)))\n      ) {\n        changeCell.cell_output.type = undefined;\n        changeCell.data = \"0x\";\n        break;\n      }\n      if (\n        _capacity.eq(0) &&\n        _amount.eq(0) &&\n        changeCapacity.gt(\n          minimalCellCapacityCompatible(changeCellWithoutSudt)\n        ) &&\n        changeAmount.gt(0)\n      ) {\n        break;\n      }\n    }\n  }\n\n  // if change cell is an anyone-can-pay cell and exists in txSkeleton.get(\"outputs\") and not in fixedEntries\n  // 1. change lock script is acp\n  // 2. lock and type are equal to output OutputA in outputs\n  // 3. OutputA is not fixed.\n  let changeOutputIndex = -1;\n  if (\n    isAcpScript(changeCell.cell_output.lock, config) &&\n    (changeOutputIndex = txSkeleton.get(\"outputs\").findIndex((output) => {\n      return (\n        new ScriptValue(changeCell.cell_output.lock, {\n          validate: false,\n        }).equals(\n          new ScriptValue(output.cell_output.lock, { validate: false })\n        ) &&\n        ((changeAmount.eq(0) &&\n          !changeCell.cell_output.type &&\n          !output.cell_output.type) ||\n          (changeAmount.gte(0) &&\n            !!changeCell.cell_output.type &&\n            !!output.cell_output.type &&\n            new ScriptValue(changeCell.cell_output.type, {\n              validate: false,\n            }).equals(\n              new ScriptValue(output.cell_output.type, { validate: false })\n            )))\n      );\n    })) !== -1 &&\n    txSkeleton.get(\"fixedEntries\").findIndex((fixedEntry) => {\n      return (\n        fixedEntry.field === \"output\" && fixedEntry.index === changeOutputIndex\n      );\n    }) === -1\n  ) {\n    const originOutput: Cell = txSkeleton\n      .get(\"outputs\")\n      .get(changeOutputIndex)!;\n    const clonedOutput: Cell = JSON.parse(JSON.stringify(originOutput));\n    clonedOutput.cell_output.capacity =\n      \"0x\" +\n      BI.from(originOutput.cell_output.capacity)\n        .add(changeCapacity)\n        .toString(16);\n    if (changeAmount.gt(0)) {\n      clonedOutput.data = toBigUInt128LE(\n        readBigUInt128LECompatible(originOutput.data).add(changeAmount)\n      );\n    }\n\n    const minimalChangeCellCapcaity = BI.from(\n      minimalCellCapacityCompatible(changeCell)\n    );\n    const minimalChangeCellWithoutSudtCapacity = BI.from(\n      minimalCellCapacityCompatible(changeCellWithoutSudt)\n    );\n    let splitFlag: boolean = false;\n    if (\n      changeAmount.gt(0) &&\n      splitChangeCell &&\n      changeCapacity.gte(\n        minimalChangeCellCapcaity.add(minimalChangeCellWithoutSudtCapacity)\n      )\n    ) {\n      clonedOutput.cell_output.capacity = originOutput.cell_output.capacity;\n      changeCellWithoutSudt.cell_output.capacity =\n        \"0x\" + changeCapacity.toString(16);\n      splitFlag = true;\n    }\n\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.set(changeOutputIndex, clonedOutput);\n    });\n\n    if (splitFlag) {\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.push(changeCellWithoutSudt);\n      });\n    }\n  } else if (changeCapacity.gte(minimalCellCapacityCompatible(changeCell))) {\n    changeCell.cell_output.capacity = \"0x\" + changeCapacity.toString(16);\n    if (changeAmount.gt(0)) {\n      changeCell.data = toBigUInt128LE(changeAmount.toString());\n    }\n\n    const minimalChangeCellCapcaity = BI.from(\n      minimalCellCapacityCompatible(changeCell)\n    );\n    const minimalChangeCellWithoutSudtCapacity = BI.from(\n      minimalCellCapacityCompatible(changeCellWithoutSudt)\n    );\n    let splitFlag = false;\n    if (changeAmount.gt(0) && splitChangeCell) {\n      if (\n        changeCapacity.gte(\n          minimalChangeCellCapcaity.add(minimalChangeCellWithoutSudtCapacity)\n        )\n      ) {\n        changeCell.cell_output.capacity =\n          \"0x\" + minimalChangeCellCapcaity.toString(16);\n        changeCellWithoutSudt.cell_output.capacity =\n          \"0x\" + changeCapacity.sub(minimalChangeCellCapcaity).toString(16);\n        splitFlag = true;\n      }\n    }\n\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) =>\n      outputs.push(changeCell)\n    );\n    if (changeAmount.gt(0)) {\n      txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n        return fixedEntries.push({\n          field: \"outputs\",\n          index: txSkeleton.get(\"outputs\").size - 1,\n        });\n      });\n    }\n    if (splitFlag) {\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.push(changeCellWithoutSudt);\n      });\n    }\n  } else if (\n    changeAmount.gt(0) &&\n    changeCapacity.lt(minimalCellCapacityCompatible(changeCell))\n  ) {\n    throw new Error(\"Not enough capacity for change in from infos!\");\n  }\n  if (_capacity.gt(0)) {\n    throw new Error(\"Not enough capacity in from infos!\");\n  }\n  if (_amount.gt(0)) {\n    throw new Error(\"Not enough amount in from infos!\");\n  }\n\n  return txSkeleton;\n}\n\nfunction _generateSudtScript(token: Hash, config: Config): Script {\n  const SUDT_SCRIPT = config.SCRIPTS.SUDT!;\n  // TODO: check token is a valid hash\n  return {\n    code_hash: SUDT_SCRIPT.CODE_HASH,\n    hash_type: SUDT_SCRIPT.HASH_TYPE,\n    args: token,\n  };\n}\n\n/**\n * Compute sudt token by owner from info.\n *\n * @param fromInfo\n * @param options\n */\nexport function ownerForSudt(\n  fromInfo: FromInfo,\n  { config = undefined }: Options = {}\n): Token {\n  config = config || getConfig();\n  const { fromScript } = parseFromInfo(fromInfo, { config });\n  const lockHash = computeScriptHash(fromScript);\n  return lockHash;\n}\n\nexport default {\n  issueToken,\n  transfer,\n  ownerForSudt,\n};\n"],"file":"sudt.js"}