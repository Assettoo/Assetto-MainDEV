{"version":3,"sources":["../src/p2pkh.ts"],"names":["groupInputs","inputs","locks","lockSet","Set","lock","scriptHash","utils","ckbHash","core","SerializeScript","normalizers","NormalizeScript","serializeJson","add","groups","Map","i","length","cell_output","has","get","undefined","set","push","calcRawTxHash","tx","SerializeRawTransaction","NormalizeRawTransaction","createP2PKHMessageGroup","hasher","toArray","rawTxHash","defaultHasher","CKBHasher","update","message","buffer","digest","Uint8Array","digestReader","toArrayBuffer","messageGroup","group","keys","indexes","firstIndex","firstWitness","witnesses","Error","lengthBuffer","ArrayBuffer","view","DataView","witnessHexString","BI","from","Reader","toString","setUint32","Number","slice","witness","g","index","Array","prototype","map","call","x","join"],"mappings":"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","sourcesContent":["import { Cell, core, utils, Hash, Script } from \"@ckb-lumos/base\";\nimport {\n  TransactionSkeletonType,\n  createTransactionFromSkeleton,\n} from \"@ckb-lumos/helpers\";\nimport { Reader, normalizers } from \"@ckb-lumos/toolkit\";\nimport { BI } from \"@ckb-lumos/bi\";\n\nfunction groupInputs(inputs: Cell[], locks: Script[]): Map<string, number[]> {\n  const lockSet = new Set<string>();\n  for (const lock of locks) {\n    const scriptHash = utils\n      .ckbHash(core.SerializeScript(normalizers.NormalizeScript(lock)))\n      .serializeJson();\n    lockSet.add(scriptHash);\n  }\n\n  const groups = new Map<string, number[]>();\n  for (let i = 0; i < inputs.length; i++) {\n    const scriptHash = utils\n      .ckbHash(\n        core.SerializeScript(\n          normalizers.NormalizeScript(inputs[i].cell_output.lock)\n        )\n      )\n      .serializeJson();\n    if (lockSet.has(scriptHash)) {\n      if (groups.get(scriptHash) === undefined) groups.set(scriptHash, []);\n      groups.get(scriptHash)!.push(i);\n    }\n  }\n  return groups;\n}\n\nfunction calcRawTxHash(tx: TransactionSkeletonType): Reader {\n  return utils.ckbHash(\n    core.SerializeRawTransaction(\n      normalizers.NormalizeRawTransaction(createTransactionFromSkeleton(tx))\n    )\n  );\n}\n\nexport interface Hasher {\n  update(message: Uint8Array): void;\n  digest(): Uint8Array;\n}\n\ntype Group = {\n  index: number;\n  lock: Script;\n  message: Hash;\n};\n\ninterface Options {\n  hasher?: Hasher;\n}\n\n/**\n * Return an array of messages as well as their corresponding position indexes and locks for signing a P2PKH transaction.\n * For more details, please see:\n * https://github.com/nervosnetwork/ckb-system-scripts/wiki/How-to-sign-transaction\n *\n * @param tx TxSkeleton with all input cells' witnessArgs.lock filled with 0.\n * @param locks Locks you want to sign, e.g. you don't need to sign ACP cells.\n * @param hasher Message hasher, defaults to CKB blake2b hasher. Check\n * https://github.com/nervosnetwork/ckb-system-scripts/blob/e975e8b7d5231fdb1c537b830dd934b305492417/c/secp256k1_blake160_sighash_all.c#L22-L28 for more.\n * @returns An array of Group containing: lock of the input cell you need to sign, message for signing, witness index of this message (first index of the input cell with this lock).\n */\nexport function createP2PKHMessageGroup(\n  tx: TransactionSkeletonType,\n  locks: Script[],\n  { hasher = undefined }: Options = {}\n): Group[] {\n  const groups = groupInputs(tx.inputs.toArray(), locks);\n  const rawTxHash = calcRawTxHash(tx);\n\n  const defaultHasher = new utils.CKBHasher();\n  hasher = hasher || {\n    update: (message) => defaultHasher.update(message.buffer),\n    digest: () => new Uint8Array(defaultHasher.digestReader().toArrayBuffer()),\n  };\n\n  const messageGroup: Group[] = [];\n\n  for (const group of groups.keys()) {\n    const indexes = groups.get(group)!;\n    const firstIndex = indexes[0];\n    const firstWitness = tx.witnesses.get(firstIndex);\n    if (firstWitness === undefined) {\n      throw new Error(\"Please fill witnesses with 0 first!\");\n    }\n\n    hasher.update(new Uint8Array(rawTxHash.toArrayBuffer()));\n\n    const lengthBuffer = new ArrayBuffer(8);\n    const view = new DataView(lengthBuffer);\n    const witnessHexString = BI.from(\n      new Reader(firstWitness).length()\n    ).toString(16);\n    if (witnessHexString.length <= 8) {\n      view.setUint32(0, Number(\"0x\" + witnessHexString), true);\n      view.setUint32(4, Number(\"0x\" + \"00000000\"), true);\n    }\n\n    if (witnessHexString.length > 8 && witnessHexString.length <= 16) {\n      view.setUint32(0, Number(\"0x\" + witnessHexString.slice(-8)), true);\n      view.setUint32(4, Number(\"0x\" + witnessHexString.slice(0, -8)), true);\n    }\n\n    hasher.update(new Uint8Array(lengthBuffer));\n    hasher.update(new Uint8Array(new Reader(firstWitness).toArrayBuffer()));\n\n    for (let i = 1; i < indexes.length; i++) {\n      const witness = tx.witnesses.get(indexes[i])!;\n      hasher.update(new Uint8Array(lengthBuffer));\n      hasher.update(new Uint8Array(new Reader(witness).toArrayBuffer()));\n    }\n\n    for (\n      let i = tx.inputs.toArray().length;\n      i < tx.witnesses.toArray().length;\n      i++\n    ) {\n      const witness = tx.witnesses.get(i)!;\n      hasher.update(new Uint8Array(lengthBuffer));\n      hasher.update(new Uint8Array(new Reader(witness).toArrayBuffer()));\n    }\n\n    const g: Group = {\n      index: firstIndex,\n      lock: tx.inputs.get(firstIndex)!.cell_output.lock,\n      message:\n        \"0x\" +\n        Array.prototype.map\n          .call(hasher.digest(), (x) => (\"00\" + x.toString(16)).slice(-2))\n          .join(\"\"),\n    };\n\n    messageGroup.push(g);\n  }\n\n  return messageGroup;\n}\n"],"file":"p2pkh.js"}