{"version":3,"sources":["../src/anyone_can_pay.ts"],"names":["ScriptValue","values","CKBHasher","ckbHash","readBigUInt128LECompatible","utils","CellCollector","constructor","fromInfo","cellProvider","config","undefined","queryOptions","Error","fromScript","lock","type","cellCollector","collector","collect","inputCell","setupInputCell","txSkeleton","_fromInfo","defaultWitness","since","inputLock","cell_output","update","inputs","push","inputSinces","set","get","size","witnesses","outputCell","capacity","data","outputs","fixedEntries","field","index","template","SCRIPTS","ANYONE_CAN_PAY","scriptOutPoint","tx_hash","TX_HASH","INDEX","out_point","dep_type","DEP_TYPE","firstIndex","findIndex","input","validate","equals","witness","newWitnessArgs","SECP_SIGNATURE_PLACEHOLDER","witnessArgs","core","WitnessArgs","Reader","getLock","hasValue","value","raw","serializeJson","inputType","getInputType","input_type","outputType","getOutputType","output_type","SerializeWitnessArgs","normalizers","NormalizeWitnessArgs","checkLimit","acpArgs","_capacity","BI","from","minimalAmount","minimalCapacity","length","pow","slice","multiplier","multiplicand","mul","lt","setupOutputCell","toScript","args","toString","toAddress","toAddressCellCollector","toAddressInput","next","outputCapacity","add","injectCapacity","outputIndex","lastFreezedOutput","filter","maxBy","i","gt","output","cellCapacity","availableCapacity","sub","deductCapacity","gte","eq","getInputKey","changeCell","block_hash","changeCapacity","minimalChangeCapacity","previousInputs","has","lastOutputIndex","remove","fixedEntryIndex","fixedEntry","inputCapacity","prepareSigningEntries","scriptType","processedArgs","tx","txHash","SerializeRawTransaction","NormalizeRawTransaction","signingEntries","CODE_HASH","code_hash","HASH_TYPE","hash_type","sumOfOutputCapacity","map","reduce","result","c","sumOfOutputAmount","fInputs","sumOfInputCapacity","sumOfInputAmount","lte","lockValue","hasher","j","otherInput","signingEntry","message","digestHex","withdraw","fromInput","fromInputCapacity","inputMinimalCellCapacity","targetOutput"],"mappings":";;;;;;;;;;;;;;AAAA;;AAeA;;AACA;;AAQA;;AACA;;AACA;;AACA;;AACA;;AAOA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,YAAxB;AACA,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,IAAqDC,WAA3D;AAEO,MAAMC,aAAuC,GAAG,MAAMA,aAAN,CACxB;AAK7BC,EAAAA,WAAW,CACTC,QADS,EAETC,YAFS,EAGT;AACEC,IAAAA,MAAM,GAAGC,SADX;AAEEC,IAAAA,YAAY,GAAG;AAFjB,MAKI,EARK,EAST;AACA,QAAI,CAACH,YAAL,EAAmB;AACjB,YAAM,IAAII,KAAJ,CAAW,2BAAX,CAAN;AACD;;AACDH,IAAAA,MAAM,GAAGA,MAAM,IAAI,+BAAnB;AACA,SAAKI,UAAL,GAAkB,8BAAcN,QAAd,EAAwB;AAAEE,MAAAA;AAAF,KAAxB,EAAoCI,UAAtD;AAEA,SAAKJ,MAAL,GAAcA,MAAd;AAEAE,IAAAA,YAAY,GAAG,EACb,GAAGA,YADU;AAEbG,MAAAA,IAAI,EAAE,KAAKD,UAFE;AAGbE,MAAAA,IAAI,EAAEJ,YAAY,CAACI,IAAb,IAAqB;AAHd,KAAf;AAMA,SAAKC,aAAL,GAAqBR,YAAY,CAACS,SAAb,CAAuBN,YAAvB,CAArB;AACD;;AAEa,SAAPO,OAAO,GAAyB;AACrC,QAAI,CAAC,yBAAY,KAAKL,UAAjB,EAA6B,KAAKJ,MAAlC,CAAL,EAAgD;AAC9C;AACD;;AACD,eAAW,MAAMU,SAAjB,IAA8B,KAAKH,aAAL,CAAmBE,OAAnB,EAA9B,EAA4D;AAC1D,YAAMC,SAAN;AACD;AACF;;AAvC4B,CADxB;;;AA2CA,eAAeC,cAAf,CACLC,UADK,EAELF,SAFK,EAGLG,SAHK,EAIL;AACEb,EAAAA,MAAM,GAAGC,SADX;AAEEa,EAAAA,cAAc,GAAG,IAFnB;AAGEC,EAAAA,KAAK,GAAGd;AAHV,IAOI,EAXC,EAY6B;AAClCD,EAAAA,MAAM,GAAGA,MAAM,IAAI,+BAAnB;AAEA,QAAMgB,SAAiB,GAAGN,SAAS,CAACO,WAAV,CAAsBZ,IAAhD;;AACA,MAAI,CAAC,yBAAYW,SAAZ,EAAuBhB,MAAvB,CAAL,EAAqC;AACnC,UAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;AACD,GANiC,CAQlC;;;AACAS,EAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,QAAlB,EAA6BC,MAAD,IAAY;AACnD,WAAOA,MAAM,CAACC,IAAP,CAAYV,SAAZ,CAAP;AACD,GAFY,CAAb;;AAIA,MAAIK,KAAJ,EAAW;AACTH,IAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,aAAlB,EAAkCG,WAAD,IAAiB;AAC7D,aAAOA,WAAW,CAACC,GAAZ,CAAgBV,UAAU,CAACW,GAAX,CAAe,QAAf,EAAyBC,IAAzB,GAAgC,CAAhD,EAAmDT,KAAnD,CAAP;AACD,KAFY,CAAb;AAGD;;AAEDH,EAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,WAAlB,EAAgCO,SAAD,IAAe;AACzD,WAAOA,SAAS,CAACL,IAAV,CAAeN,cAAf,CAAP;AACD,GAFY,CAAb;AAIA,QAAMY,UAAgB,GAAG;AACvBT,IAAAA,WAAW,EAAE;AACXU,MAAAA,QAAQ,EAAEjB,SAAS,CAACO,WAAV,CAAsBU,QADrB;AAEXtB,MAAAA,IAAI,EAAEK,SAAS,CAACO,WAAV,CAAsBZ,IAFjB;AAGXC,MAAAA,IAAI,EAAEI,SAAS,CAACO,WAAV,CAAsBX;AAHjB,KADU;AAMvBsB,IAAAA,IAAI,EAAElB,SAAS,CAACkB;AANO,GAAzB;AASAhB,EAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,SAAlB,EAA8BW,OAAD,IAAa;AACrD,WAAOA,OAAO,CAACT,IAAR,CAAaM,UAAb,CAAP;AACD,GAFY,CAAb;AAIAd,EAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,cAAlB,EAAmCY,YAAD,IAAkB;AAC/D,WAAOA,YAAY,CAACV,IAAb,CAAkB;AACvBW,MAAAA,KAAK,EAAE,SADgB;AAEvBC,MAAAA,KAAK,EAAEpB,UAAU,CAACW,GAAX,CAAe,SAAf,EAA0BC,IAA1B,GAAiC;AAFjB,KAAlB,CAAP;AAID,GALY,CAAb;AAOA,QAAMS,QAAQ,GAAGjC,MAAM,CAACkC,OAAP,CAAeC,cAAhC;;AACA,MAAI,CAACF,QAAL,EAAe;AACb,UAAM,IAAI9B,KAAJ,CAAW,8CAAX,CAAN;AACD;;AAED,QAAMiC,cAAwB,GAAG;AAC/BC,IAAAA,OAAO,EAAEJ,QAAQ,CAACK,OADa;AAE/BN,IAAAA,KAAK,EAAEC,QAAQ,CAACM;AAFe,GAAjC,CAhDkC,CAqDlC;;AACA3B,EAAAA,UAAU,GAAG,wBAAWA,UAAX,EAAuB;AAClC4B,IAAAA,SAAS,EAAEJ,cADuB;AAElCK,IAAAA,QAAQ,EAAER,QAAQ,CAACS;AAFe,GAAvB,CAAb,CAtDkC,CA2DlC;;AACA,QAAMC,UAAU,GAAG/B,UAAU,CAACW,GAAX,CAAe,QAAf,EAAyBqB,SAAzB,CAAoCC,KAAD,IAAW;AAC/D,WAAO,IAAIvD,WAAJ,CAAgBuD,KAAK,CAAC5B,WAAN,CAAkBZ,IAAlC,EAAwC;AAAEyC,MAAAA,QAAQ,EAAE;AAAZ,KAAxC,EAA6DC,MAA7D,CACL,IAAIzD,WAAJ,CAAgB0B,SAAhB,EAA2B;AAAE8B,MAAAA,QAAQ,EAAE;AAAZ,KAA3B,CADK,CAAP;AAGD,GAJkB,CAAnB;;AAKA,MAAIH,UAAU,KAAK,CAAC,CAApB,EAAuB;AACrB,WAAOA,UAAU,IAAI/B,UAAU,CAACW,GAAX,CAAe,WAAf,EAA4BC,IAAjD,EAAuD;AACrDZ,MAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,WAAlB,EAAgCO,SAAD,IAAe;AACzD,eAAOA,SAAS,CAACL,IAAV,CAAe,IAAf,CAAP;AACD,OAFY,CAAb;AAGD;;AACD,QAAI4B,OAAkB,GAAGpC,UAAU,CAACW,GAAX,CAAe,WAAf,EAA4BA,GAA5B,CAAgCoB,UAAhC,CAAzB;AACA,UAAMM,cAA2B,GAAG;AAClC;AACA5C,MAAAA,IAAI,EAAE6C;AAF4B,KAApC;;AAIA,QAAIF,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAMG,WAAW,GAAG,IAAIC,WAAKC,WAAT,CAAqB,IAAIC,eAAJ,CAAWN,OAAX,CAArB,CAApB;AACA,YAAM3C,IAAI,GAAG8C,WAAW,CAACI,OAAZ,EAAb;;AACA,UACElD,IAAI,CAACmD,QAAL,MACA,IAAIF,eAAJ,CAAWjD,IAAI,CAACoD,KAAL,GAAaC,GAAb,EAAX,EAA+BC,aAA/B,OAAmDV,cAAc,CAAC5C,IAFpE,EAGE;AACA,cAAM,IAAIF,KAAJ,CACJ,yDADI,CAAN;AAGD;;AACD,YAAMyD,SAAS,GAAGT,WAAW,CAACU,YAAZ,EAAlB;;AACA,UAAID,SAAS,CAACJ,QAAV,EAAJ,EAA0B;AACxBP,QAAAA,cAAc,CAACa,UAAf,GAA4B,IAAIR,eAAJ,CAC1BM,SAAS,CAACH,KAAV,GAAkBC,GAAlB,EAD0B,EAE1BC,aAF0B,EAA5B;AAGD;;AACD,YAAMI,UAAU,GAAGZ,WAAW,CAACa,aAAZ,EAAnB;;AACA,UAAID,UAAU,CAACP,QAAX,EAAJ,EAA2B;AACzBP,QAAAA,cAAc,CAACgB,WAAf,GAA6B,IAAIX,eAAJ,CAC3BS,UAAU,CAACN,KAAX,GAAmBC,GAAnB,EAD2B,EAE3BC,aAF2B,EAA7B;AAGD;AACF;;AACDX,IAAAA,OAAO,GAAG,IAAIM,eAAJ,CACRF,WAAKc,oBAAL,CACEC,qBAAYC,oBAAZ,CAAiCnB,cAAjC,CADF,CADQ,EAIRU,aAJQ,EAAV;AAKA/C,IAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,WAAlB,EAAgCO,SAAD,IAAe;AACzD,aAAOA,SAAS,CAACH,GAAV,CAAcqB,UAAd,EAA0BK,OAA1B,CAAP;AACD,KAFY,CAAb;AAGD;;AAED,SAAOpC,UAAP;AACD,C,CAED;;;AACO,SAASyD,UAAT,CAAoBC,OAApB,EAAwC3C,QAAxC,EAA+D;AACpE,QAAM4C,SAAS,GAAGC,OAAGC,IAAH,CAAQ9C,QAAR,CAAlB;;AACA,MAAI+C,aAAJ;AACA,MAAIC,eAAJ;;AACA,MAAIL,OAAO,CAACM,MAAR,IAAkB,EAAtB,EAA0B;AACxBF,IAAAA,aAAa,GAAGF,OAAGC,IAAH,CAAQ,EAAR,EAAYI,GAAZ,CAAgB,OAAOP,OAAO,CAACQ,KAAR,CAAc,EAAd,EAAkB,EAAlB,CAAvB,CAAhB;AACD;;AACD,MAAIR,OAAO,CAACM,MAAR,IAAkB,EAAtB,EAA0B;AACxB;AACA,UAAMG,UAAU,GAAGP,OAAGC,IAAH,CAAQ,EAAR,EAAYI,GAAZ,CAAgB,OAAOP,OAAO,CAACQ,KAAR,CAAc,EAAd,EAAkB,EAAlB,CAAvB,CAAnB;;AACA,UAAME,YAAY,GAAGR,OAAGC,IAAH,CAAQ,EAAR,EAAYI,GAAZ,CAAgB,CAAhB,CAArB;;AACAF,IAAAA,eAAe,GAAGI,UAAU,CAACE,GAAX,CAAeD,YAAf,CAAlB;AACD,GAZmE,CAapE;;;AACA,MAAIL,eAAe,IAAID,aAAvB,EAAsC;AACpC;AACA,QAAIH,SAAS,CAACW,EAAV,CAAaP,eAAb,CAAJ,EAAmC;AACjC,YAAM,IAAIxE,KAAJ,CACH,YAAWwB,QAAS,gDAA+CgD,eAAgB,0DAAyDD,aAAc,oEADvJ,CAAN;AAGD;AACF,GAPD,MAOO,IAAIC,eAAJ,EAAqB;AAC1B;AACA,QAAIJ,SAAS,CAACW,EAAV,CAAaP,eAAb,CAAJ,EAAmC;AACjC,YAAM,IAAIxE,KAAJ,CACH,YAAWwB,QAAS,gDAA+CgD,eAAgB,IADhF,CAAN;AAGD;AACF;AACF;;AAEM,eAAeQ,eAAf,CACLvE,UADK,EAELc,UAFK,EAGL;AAAE1B,EAAAA,MAAM,GAAGC;AAAX,IAAkC,EAH7B,EAI6B;AAClCD,EAAAA,MAAM,GAAGA,MAAM,IAAI,+BAAnB;AAEA,QAAMoF,QAAgB,GAAG1D,UAAU,CAACT,WAAX,CAAuBZ,IAAhD;;AAEA,QAAMsB,QAAY,GAAG6C,OAAGC,IAAH,CAAQ/C,UAAU,CAACT,WAAX,CAAuBU,QAA/B,CAArB;;AAEA0C,EAAAA,UAAU,CAACe,QAAQ,CAACC,IAAV,EAAgB1D,QAAQ,CAAC2D,QAAT,EAAhB,CAAV;AAEA,QAAMvF,YAAY,GAAGa,UAAU,CAACW,GAAX,CAAe,cAAf,CAArB;;AACA,MAAI,CAACxB,YAAL,EAAmB;AACjB,UAAM,IAAII,KAAJ,CAAW,2BAAX,CAAN;AACD;;AAED,QAAMoF,SAAkB,GAAG,8BAAgBH,QAAhB,EAA0B;AAAEpF,IAAAA;AAAF,GAA1B,CAA3B;AACA,QAAMwF,sBAAsB,GAAG,IAAI5F,aAAJ,CAAkB2F,SAAlB,EAA6BxF,YAA7B,EAA2C;AACxEC,IAAAA;AADwE,GAA3C,CAA/B;AAIA,QAAMyF,cAA2B,GAAG,CAClC,MAAMD,sBAAsB,CAAC/E,OAAvB,GAAiCiF,IAAjC,EAD4B,EAElCjC,KAFF;AAIA,MAAIkC,cAAkB,GAAGhE,QAAzB;;AACA,MAAI8D,cAAJ,EAAoB;AAClBE,IAAAA,cAAc,GAAGhE,QAAQ,CAACiE,GAAT,CAAaH,cAAc,CAACxE,WAAf,CAA2BU,QAAxC,CAAjB;AAEAf,IAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,QAAlB,EAA6BC,MAAD,IAAY;AACnD,aAAOA,MAAM,CAACC,IAAP,CAAYqE,cAAZ,CAAP;AACD,KAFY,CAAb;AAGA7E,IAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,WAAlB,EAAgCO,SAAD,IAAe;AACzD,aAAOA,SAAS,CAACL,IAAV,CAAe,IAAf,CAAP;AACD,KAFY,CAAb;AAGD;;AAEDM,EAAAA,UAAU,CAACT,WAAX,CAAuBU,QAAvB,GAAkC,OAAOgE,cAAc,CAACL,QAAf,CAAwB,EAAxB,CAAzC;AACA1E,EAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,SAAlB,EAA8BW,OAAD,IAAa;AACrD,WAAOA,OAAO,CAACT,IAAR,CAAaM,UAAb,CAAP;AACD,GAFY,CAAb;;AAIA,MAAI+D,cAAJ,EAAoB;AAClB,UAAMxD,QAAQ,GAAGjC,MAAM,CAACkC,OAAP,CAAeC,cAAhC;;AACA,QAAI,CAACF,QAAL,EAAe;AACb,YAAM,IAAI9B,KAAJ,CAAW,8CAAX,CAAN;AACD;;AACD,UAAMiC,cAAwB,GAAG;AAC/BC,MAAAA,OAAO,EAAEJ,QAAQ,CAACK,OADa;AAE/BN,MAAAA,KAAK,EAAEC,QAAQ,CAACM;AAFe,KAAjC,CALkB,CAUlB;;AACA3B,IAAAA,UAAU,GAAG,wBAAWA,UAAX,EAAuB;AAClC4B,MAAAA,SAAS,EAAEJ,cADuB;AAElCK,MAAAA,QAAQ,EAAER,QAAQ,CAACS;AAFe,KAAvB,CAAb;AAID;;AAED,SAAO9B,UAAP;AACD;;AAEM,eAAeiF,cAAf,CACLtF,aADK,EAELK,UAFK,EAGLkF,WAHK,EAILnE,QAJK,EAKL;AAAE3B,EAAAA,MAAM,GAAGC;AAAX,IAAkC,EAL7B,EAM6B;AAClCD,EAAAA,MAAM,GAAGA,MAAM,IAAI,+BAAnB;;AAEA,MAAI8F,WAAW,IAAIlF,UAAU,CAACW,GAAX,CAAe,SAAf,EAA0BC,IAA7C,EAAmD;AACjD,UAAM,IAAIrB,KAAJ,CAAW,uBAAX,CAAN;AACD;;AAED,MAAIoE,SAAS,GAAGC,OAAGC,IAAH,CAAQ9C,QAAR,CAAhB;;AAEA,QAAMM,QAAQ,GAAGjC,MAAM,CAACkC,OAAP,CAAeC,cAAhC;;AACA,MAAI,CAACF,QAAL,EAAe;AACb,UAAM,IAAI9B,KAAJ,CACH,4DADG,CAAN;AAGD;;AAED,QAAMC,UAAkB,GAAGG,aAAa,CAACH,UAAzC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,QAAM2F,iBAAiB,GAAGnF,UAAU,CACjCW,GADuB,CACnB,cADmB,EAEvByE,MAFuB,CAEhB,CAAC;AAAEjE,IAAAA;AAAF,GAAD,KAAeA,KAAK,KAAK,SAFT,EAGvBkE,KAHuB,CAGjB,CAAC;AAAEjE,IAAAA;AAAF,GAAD,KAAeA,KAHE,CAA1B;AAIA,MAAIkE,CAAC,GAAGH,iBAAiB,GAAGA,iBAAiB,CAAC/D,KAAlB,GAA0B,CAA7B,GAAiC,CAA1D;;AACA,SAAOkE,CAAC,GAAGtF,UAAU,CAACW,GAAX,CAAe,SAAf,EAA0BC,IAA9B,IAAsC+C,SAAS,CAAC4B,EAAV,CAAa,CAAb,CAA7C,EAA8DD,CAAC,EAA/D,EAAmE;AACjE,UAAME,MAAM,GAAGxF,UAAU,CAACW,GAAX,CAAe,SAAf,EAA0BA,GAA1B,CAA8B2E,CAA9B,CAAf;;AACA,QACE,IAAI5G,WAAJ,CAAgB8G,MAAM,CAACnF,WAAP,CAAmBZ,IAAnC,EAAyC;AAAEyC,MAAAA,QAAQ,EAAE;AAAZ,KAAzC,EAA8DC,MAA9D,CACE,IAAIzD,WAAJ,CAAgBc,UAAhB,EAA4B;AAAE0C,MAAAA,QAAQ,EAAE;AAAZ,KAA5B,CADF,CADF,EAIE;AACA,YAAMuD,YAAgB,GAAG7B,OAAGC,IAAH,CAAQ2B,MAAM,CAACnF,WAAP,CAAmBU,QAA3B,CAAzB;;AACA,YAAM2E,iBAAqB,GAAGD,YAAY,CAACE,GAAb,CAC5B,4CAA8BH,MAA9B,CAD4B,CAA9B,CAFA,CAKA;;AACA,YAAMI,cAAkB,GAAGjC,SAAS,CAACkC,GAAV,CAAcH,iBAAd,IACvBA,iBADuB,GAEvB/B,SAFJ;AAGAA,MAAAA,SAAS,GAAGA,SAAS,CAACgC,GAAV,CAAcC,cAAd,CAAZ;AACAJ,MAAAA,MAAM,CAACnF,WAAP,CAAmBU,QAAnB,GACE,OAAO0E,YAAY,CAACE,GAAb,CAAiBC,cAAjB,EAAiClB,QAAjC,CAA0C,EAA1C,CADT;AAED;AACF,GAlDiC,CAmDlC;;;AACA1E,EAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,SAAlB,EAA8BW,OAAD,IAAa;AACrD,WAAOA,OAAO,CAACmE,MAAR,CACJI,MAAD,IAAY,CAAC5B,OAAGC,IAAH,CAAQ2B,MAAM,CAACnF,WAAP,CAAmBU,QAA3B,EAAqC+E,EAArC,CAAwC,CAAxC,CADR,CAAP;AAGD,GAJY,CAAb;;AAMA,QAAMC,WAAW,GAAI9D,KAAD,IACjB,GAAEA,KAAK,CAACL,SAAN,CAAiBH,OAAQ,IAAGQ,KAAK,CAACL,SAAN,CAAiBR,KAAM,EADxD;;AAEA,MAAIuC,SAAS,CAAC4B,EAAV,CAAa,CAAb,CAAJ,EAAqB;AACnB,UAAMS,UAAgB,GAAG;AACvB3F,MAAAA,WAAW,EAAE;AACXU,QAAAA,QAAQ,EAAE,KADC;AAEXtB,QAAAA,IAAI,EAAED,UAFK;AAGXE,QAAAA,IAAI,EAAEL;AAHK,OADU;AAMvB2B,MAAAA,IAAI,EAAE,IANiB;AAOvBY,MAAAA,SAAS,EAAEvC,SAPY;AAQvB4G,MAAAA,UAAU,EAAE5G;AARW,KAAzB;;AAUA,QAAI6G,cAAc,GAAGtC,OAAGC,IAAH,CAAQ,CAAR,CAArB;;AACA,UAAMsC,qBAAyB,GAAGvC,OAAGC,IAAH,CAChC,4CAA8BmC,UAA9B,CADgC,CAAlC;;AAIA,QAAII,cAAc,GAAG,qBAArB;;AACA,SAAK,MAAMnE,KAAX,IAAoBjC,UAAU,CAACW,GAAX,CAAe,QAAf,CAApB,EAA8C;AAC5CyF,MAAAA,cAAc,GAAGA,cAAc,CAACpB,GAAf,CAAmBe,WAAW,CAAC9D,KAAD,CAA9B,CAAjB;AACD,KAnBkB,CAqBnB;;;AACA,eAAW,MAAMnC,SAAjB,IAA8BH,aAAa,CAACE,OAAd,EAA9B,EAAuD;AACrD,UAAIuG,cAAc,CAACC,GAAf,CAAmBN,WAAW,CAACjG,SAAD,CAA9B,CAAJ,EAAgD;AAC9C;AACD;;AAEDE,MAAAA,UAAU,GAAG,MAAMD,cAAc,CAACC,UAAD,EAAaF,SAAb,EAAwBT,SAAxB,EAAmC;AAClED,QAAAA;AADkE,OAAnC,CAAjC;AAGA,YAAMkH,eAAuB,GAAGtG,UAAU,CAACW,GAAX,CAAe,SAAf,EAA0BC,IAA1B,GAAiC,CAAjE;AACAZ,MAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,SAAlB,EAA8BW,OAAD,IAAa;AACrD,eAAOA,OAAO,CAACsF,MAAR,CAAeD,eAAf,CAAP;AACD,OAFY,CAAb;AAGA,YAAME,eAAuB,GAAGxG,UAAU,CACvCW,GAD6B,CACzB,cADyB,EAE7BqB,SAF6B,CAElByE,UAAD,IAAgB;AACzB,eACEA,UAAU,CAACtF,KAAX,KAAqB,SAArB,IACAsF,UAAU,CAACrF,KAAX,KAAqBkF,eAFvB;AAID,OAP6B,CAAhC;;AAQA,UAAIE,eAAe,IAAI,CAAvB,EAA0B;AACxBxG,QAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,cAAlB,EAAmCY,YAAD,IAAkB;AAC/D,iBAAOA,YAAY,CAACqF,MAAb,CAAoBC,eAApB,CAAP;AACD,SAFY,CAAb;AAGD;;AAED,YAAME,aAAa,GAAG9C,OAAGC,IAAH,CAAQ/D,SAAS,CAACO,WAAV,CAAsBU,QAA9B,CAAtB;;AACA,UAAI6E,cAAc,GAAGc,aAArB;;AACA,UAAId,cAAc,CAACL,EAAf,CAAkB5B,SAAlB,CAAJ,EAAkC;AAChCiC,QAAAA,cAAc,GAAGjC,SAAjB;AACD;;AACDA,MAAAA,SAAS,GAAGA,SAAS,CAACgC,GAAV,CAAcC,cAAd,CAAZ;AACAM,MAAAA,cAAc,GAAGA,cAAc,CAAClB,GAAf,CAAmB0B,aAAa,CAACf,GAAd,CAAkBC,cAAlB,CAAnB,CAAjB;;AACA,UAAIjC,SAAS,CAACmC,EAAV,CAAa,CAAb,KAAmBI,cAAc,CAACL,GAAf,CAAmBM,qBAAnB,CAAvB,EAAkE;AAChE;AACD;;AAEDH,MAAAA,UAAU,CAAC3F,WAAX,CAAuBU,QAAvB,GAAkC,OAAOmF,cAAc,CAACxB,QAAf,CAAwB,EAAxB,CAAzC;AACA1E,MAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,SAAlB,EAA8BW,OAAD,IAAa;AACrD,eAAOA,OAAO,CAACT,IAAR,CAAawF,UAAb,CAAP;AACD,OAFY,CAAb;AAGD;;AAED,QAAIrC,SAAS,CAAC4B,EAAV,CAAa,CAAb,KAAmBW,cAAc,GAAGC,qBAAxC,EAA+D;AAC7D,YAAM,IAAI5G,KAAJ,CAAW,sCAAX,CAAN;AACD;;AAEDyG,IAAAA,UAAU,CAAC3F,WAAX,CAAuBU,QAAvB,GAAkC,OAAOmF,cAAc,CAACxB,QAAf,CAAwB,EAAxB,CAAzC;AACA1E,IAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,SAAlB,EAA8BW,OAAD,IAAa;AACrD,aAAOA,OAAO,CAACT,IAAR,CAAawF,UAAb,CAAP;AACD,KAFY,CAAb;AAGD;;AAED,SAAOhG,UAAP;AACD;;AAEM,SAAS2G,qBAAT,CACL3G,UADK,EAEL;AAAEZ,EAAAA,MAAM,GAAGC;AAAX,IAAkC,EAF7B,EAGoB;AACzBD,EAAAA,MAAM,GAAGA,MAAM,IAAI,+BAAnB;AAEA,QAAMwH,UAAU,GAAG,gBAAnB;AACA,QAAMvF,QAAQ,GAAGjC,MAAM,CAACkC,OAAP,CAAesF,UAAf,CAAjB;;AACA,MAAI,CAACvF,QAAL,EAAe;AACb,UAAM,IAAI9B,KAAJ,CACH,iCAAgCqH,UAAW,gBADxC,CAAN;AAGD;;AAED,MAAIC,aAAa,GAAG,qBAApB;AACA,QAAMC,EAAE,GAAG,4CAA8B9G,UAA9B,CAAX;AACA,QAAM+G,MAAM,GAAGlI,OAAO,CACpB2D,WAAKwE,uBAAL,CAA6BzD,qBAAY0D,uBAAZ,CAAoCH,EAApC,CAA7B,CADoB,CAAP,CAEb/D,aAFa,EAAf;AAGA,QAAMxC,MAAM,GAAGP,UAAU,CAACW,GAAX,CAAe,QAAf,CAAf;AACA,QAAME,SAAS,GAAGb,UAAU,CAACW,GAAX,CAAe,WAAf,CAAlB;AACA,MAAIuG,cAAc,GAAGlH,UAAU,CAACW,GAAX,CAAe,gBAAf,CAArB;;AACA,OAAK,IAAI2E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/E,MAAM,CAACK,IAA3B,EAAiC0E,CAAC,EAAlC,EAAsC;AACpC,UAAMrD,KAAK,GAAG1B,MAAM,CAACI,GAAP,CAAW2E,CAAX,CAAd;;AACA,QACEjE,QAAQ,CAAC8F,SAAT,KAAuBlF,KAAK,CAAC5B,WAAN,CAAkBZ,IAAlB,CAAuB2H,SAA9C,IACA/F,QAAQ,CAACgG,SAAT,KAAuBpF,KAAK,CAAC5B,WAAN,CAAkBZ,IAAlB,CAAuB6H,SAD9C,IAEA,CAACT,aAAa,CAACR,GAAd,CAAkBpE,KAAK,CAAC5B,WAAN,CAAkBZ,IAAlB,CAAuBgF,IAAzC,CAHH,EAIE;AACAoC,MAAAA,aAAa,GAAGA,aAAa,CAAC7B,GAAd,CAAkB/C,KAAK,CAAC5B,WAAN,CAAkBZ,IAAlB,CAAuBgF,IAAzC,CAAhB,CADA,CAGA;AACA;;AACA,YAAMxD,OAAmB,GAAGjB,UAAU,CAACW,GAAX,CAAe,SAAf,EAA0ByE,MAA1B,CAAkCI,MAAD,IAAY;AACvE,eAAO,IAAI9G,WAAJ,CAAgB8G,MAAM,CAACnF,WAAP,CAAmBZ,IAAnC,EAAyC;AAC9CyC,UAAAA,QAAQ,EAAE;AADoC,SAAzC,EAEJC,MAFI,CAEG,IAAIzD,WAAJ,CAAgBuD,KAAK,CAAC5B,WAAN,CAAkBZ,IAAlC,EAAwC;AAAEyC,UAAAA,QAAQ,EAAE;AAAZ,SAAxC,CAFH,CAAP;AAGD,OAJ2B,CAA5B;AAKA,YAAMqF,mBAAuB,GAAGtG,OAAO,CACpCuG,GAD6B,CACxBhC,MAAD,IAAY5B,OAAGC,IAAH,CAAQ2B,MAAM,CAACnF,WAAP,CAAmBU,QAA3B,CADa,EAE7B0G,MAF6B,CAEtB,CAACC,MAAD,EAASC,CAAT,KAAeD,MAAM,CAAC1C,GAAP,CAAW2C,CAAX,CAFO,EAEQ/D,OAAGC,IAAH,CAAQ,CAAR,CAFR,CAAhC;AAIA,YAAM+D,iBAAqB,GAAG3G,OAAO,CAClCmE,MAD2B,CACnBI,MAAD,IAAYA,MAAM,CAACxE,IAAP,KAAgB,IADR,EAE3BwG,GAF2B,CAEtBhC,MAAD,IAAY5B,OAAGC,IAAH,CAAQ/E,0BAA0B,CAAC0G,MAAM,CAACxE,IAAR,CAAlC,CAFW,EAG3ByG,MAH2B,CAGpB,CAACC,MAAD,EAASC,CAAT,KAAeD,MAAM,CAAC1C,GAAP,CAAW2C,CAAX,CAHK,EAGU/D,OAAGC,IAAH,CAAQ,CAAR,CAHV,CAA9B;AAKA,YAAMgE,OAAmB,GAAGtH,MAAM,CAAC6E,MAAP,CAAeE,CAAD,IAAO;AAC/C,eAAO,IAAI5G,WAAJ,CAAgB4G,CAAC,CAACjF,WAAF,CAAcZ,IAA9B,EAAoC;AAAEyC,UAAAA,QAAQ,EAAE;AAAZ,SAApC,EAAyDC,MAAzD,CACL,IAAIzD,WAAJ,CAAgBuD,KAAK,CAAC5B,WAAN,CAAkBZ,IAAlC,EAAwC;AAAEyC,UAAAA,QAAQ,EAAE;AAAZ,SAAxC,CADK,CAAP;AAGD,OAJ2B,CAA5B;AAMA,YAAM4F,kBAAsB,GAAGD,OAAO,CACnCL,GAD4B,CACvBlC,CAAD,IAAO1B,OAAGC,IAAH,CAAQyB,CAAC,CAACjF,WAAF,CAAcU,QAAtB,CADiB,EAE5B0G,MAF4B,CAErB,CAACC,MAAD,EAASC,CAAT,KAAeD,MAAM,CAAC1C,GAAP,CAAW2C,CAAX,CAFM,EAES/D,OAAGC,IAAH,CAAQ,CAAR,CAFT,CAA/B;AAIA,YAAMkE,gBAAoB,GAAGF,OAAO,CACjCzC,MAD0B,CAClBE,CAAD,IAAOA,CAAC,CAACtE,IAAF,KAAW,IADC,EAE1BwG,GAF0B,CAErBlC,CAAD,IAAO1B,OAAGC,IAAH,CAAQ/E,0BAA0B,CAACwG,CAAC,CAACtE,IAAH,CAAlC,CAFe,EAG1ByG,MAH0B,CAGnB,CAACC,MAAD,EAASC,CAAT,KAAeD,MAAM,CAAC1C,GAAP,CAAW2C,CAAX,CAHI,EAGW/D,OAAGC,IAAH,CAAQ,CAAR,CAHX,CAA7B;;AAKA,UACEiE,kBAAkB,CAACE,GAAnB,CAAuBT,mBAAvB,KACAQ,gBAAgB,CAACC,GAAjB,CAAqBJ,iBAArB,CAFF,EAGE;AACA;AACD;;AAED,YAAMK,SAAS,GAAG,IAAItJ,aAAOD,WAAX,CAAuBuD,KAAK,CAAC5B,WAAN,CAAkBZ,IAAzC,EAA+C;AAC/DyC,QAAAA,QAAQ,EAAE;AADqD,OAA/C,CAAlB;AAGA,YAAMgG,MAAM,GAAG,IAAItJ,SAAJ,EAAf;AACAsJ,MAAAA,MAAM,CAAC5H,MAAP,CAAcyG,MAAd;;AACA,UAAIzB,CAAC,IAAIzE,SAAS,CAACD,IAAnB,EAAyB;AACvB,cAAM,IAAIrB,KAAJ,CACH,iEAAgE+F,CAAE,gFAD/D,CAAN;AAGD;;AACD,+BAAY4C,MAAZ,EAAoBrH,SAAS,CAACF,GAAV,CAAc2E,CAAd,CAApB;;AACA,WAAK,IAAI6C,CAAC,GAAG7C,CAAC,GAAG,CAAjB,EAAoB6C,CAAC,GAAG5H,MAAM,CAACK,IAAX,IAAmBuH,CAAC,GAAGtH,SAAS,CAACD,IAArD,EAA2DuH,CAAC,EAA5D,EAAgE;AAC9D,cAAMC,UAAU,GAAG7H,MAAM,CAACI,GAAP,CAAWwH,CAAX,CAAnB;;AACA,YACEF,SAAS,CAAC9F,MAAV,CACE,IAAIxD,aAAOD,WAAX,CAAuB0J,UAAU,CAAC/H,WAAX,CAAuBZ,IAA9C,EAAoD;AAClDyC,UAAAA,QAAQ,EAAE;AADwC,SAApD,CADF,CADF,EAME;AACA,mCAAYgG,MAAZ,EAAoBrH,SAAS,CAACF,GAAV,CAAcwH,CAAd,CAApB;AACD;AACF;;AACD,WAAK,IAAIA,CAAC,GAAG5H,MAAM,CAACK,IAApB,EAA0BuH,CAAC,GAAGtH,SAAS,CAACD,IAAxC,EAA8CuH,CAAC,EAA/C,EAAmD;AACjD,iCAAYD,MAAZ,EAAoBrH,SAAS,CAACF,GAAV,CAAcwH,CAAd,CAApB;AACD;;AACD,YAAME,YAAY,GAAG;AACnB3I,QAAAA,IAAI,EAAE,mBADa;AAEnB0B,QAAAA,KAAK,EAAEkE,CAFY;AAGnBgD,QAAAA,OAAO,EAAEJ,MAAM,CAACK,SAAP;AAHU,OAArB;AAKArB,MAAAA,cAAc,GAAGA,cAAc,CAAC1G,IAAf,CAAoB6H,YAApB,CAAjB;AACD;AACF;;AACDrI,EAAAA,UAAU,GAAGA,UAAU,CAACU,GAAX,CAAe,gBAAf,EAAiCwG,cAAjC,CAAb;AACA,SAAOlH,UAAP;AACD;;AAEM,eAAewI,QAAf,CACLxI,UADK,EAELyI,SAFK,EAGL9D,SAHK,EAIL5D,QAJK,EAKL;AAAE3B,EAAAA,MAAM,GAAGC;AAAX,IAAkC,EAL7B,EAM6B;AAClCD,EAAAA,MAAM,GAAGA,MAAM,IAAI,+BAAnB,CADkC,CAGlC;;AACA,MAAI,CAAC,yBAAYqJ,SAAS,CAACpI,WAAV,CAAsBZ,IAAlC,EAAwCL,MAAxC,CAAL,EAAsD;AACpD,UAAM,IAAIG,KAAJ,CAAW,yCAAX,CAAN;AACD,GANiC,CAQlC;;;AACA,QAAMoE,SAAS,GAAGC,OAAGC,IAAH,CAAQ9C,QAAR,CAAlB;;AACA,QAAM2H,iBAAqB,GAAG9E,OAAGC,IAAH,CAAQ4E,SAAS,CAACpI,WAAV,CAAsBU,QAA9B,CAA9B;;AACA,QAAM4H,wBAA4B,GAAG/E,OAAGC,IAAH,CACnC,4CAA8B4E,SAA9B,CADmC,CAArC;;AAGA,MACE,EACG9E,SAAS,CAACkC,GAAV,CAAc,CAAd,KACClC,SAAS,CAACqE,GAAV,CAAcU,iBAAiB,CAAC/C,GAAlB,CAAsBgD,wBAAtB,CAAd,CADF,IAEAhF,SAAS,CAACmC,EAAV,CAAa4C,iBAAb,CAHF,CADF,EAME;AACA,UAAM,IAAInJ,KAAJ,CACH,2BAA0BmJ,iBAAiB,CAAC/C,GAAlB,CACzBgD,wBADyB,CAEzB,QAAOD,iBAAkB,IAHvB,CAAN;AAKD;;AAED,QAAMlE,QAAQ,GAAG,2BAAaG,SAAb,EAAwB;AAAEvF,IAAAA;AAAF,GAAxB,CAAjB;AAEA,QAAMwJ,YAAkB,GAAG;AACzBvI,IAAAA,WAAW,EAAE;AACXU,MAAAA,QAAQ,EAAE,OAAOA,QAAQ,CAAC2D,QAAT,CAAkB,EAAlB,CADN;AAEXjF,MAAAA,IAAI,EAAE+E,QAFK;AAGX9E,MAAAA,IAAI,EAAEL;AAHK,KADY;AAMzB2B,IAAAA,IAAI,EAAE,IANmB;AAOzBY,IAAAA,SAAS,EAAEvC,SAPc;AAQzB4G,IAAAA,UAAU,EAAE5G;AARa,GAA3B;;AAWA,MAAI,yBAAYmF,QAAZ,EAAsBpF,MAAtB,CAAJ,EAAmC;AACjCqE,IAAAA,UAAU,CAACe,QAAQ,CAACC,IAAV,EAAgB1D,QAAhB,CAAV;AAEA,UAAM5B,YAAY,GAAGa,UAAU,CAACW,GAAX,CAAe,cAAf,CAArB;;AACA,QAAI,CAACxB,YAAL,EAAmB;AACjB,YAAM,IAAII,KAAJ,CAAW,2BAAX,CAAN;AACD;;AAED,UAAMqF,sBAAsB,GAAG,IAAI5F,aAAJ,CAAkB2F,SAAlB,EAA6BxF,YAA7B,EAA2C;AACxEC,MAAAA;AADwE,KAA3C,CAA/B;AAIA,UAAMyF,cAA2B,GAAG,CAClC,MAAMD,sBAAsB,CAAC/E,OAAvB,GAAiCiF,IAAjC,EAD4B,EAElCjC,KAFF;;AAGA,QAAI,CAACgC,cAAL,EAAqB;AACnB,YAAM,IAAItF,KAAJ,CAAW,2CAAX,CAAN;AACD;;AAED,UAAMwF,cAAkB,GAAGpB,SAAS,CAACqB,GAAV,CACzBH,cAAc,CAACxE,WAAf,CAA2BU,QADF,CAA3B;;AAGA6H,IAAAA,YAAY,CAACvI,WAAb,CAAyBU,QAAzB,GAAoC,OAAOgE,cAAc,CAACL,QAAf,CAAwB,EAAxB,CAA3C;AAEA1E,IAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,QAAlB,EAA6BC,MAAD,IAAY;AACnD,aAAOA,MAAM,CAACC,IAAP,CAAYqE,cAAZ,CAAP;AACD,KAFY,CAAb;AAGA7E,IAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,WAAlB,EAAgCO,SAAD,IAAe;AACzD,aAAOA,SAAS,CAACL,IAAV,CAAe,IAAf,CAAP;AACD,KAFY,CAAb;AAGD;;AAEDR,EAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,SAAlB,EAA8BW,OAAD,IAAa;AACrD,WAAOA,OAAO,CAACT,IAAR,CAAaoI,YAAb,CAAP;AACD,GAFY,CAAb;AAIA5I,EAAAA,UAAU,GAAG,MAAMD,cAAc,CAC/BC,UAD+B,EAE/ByI,SAF+B,EAG/B,8BAAgBA,SAAS,CAACpI,WAAV,CAAsBZ,IAAtC,EAA4C;AAAEL,IAAAA;AAAF,GAA5C,CAH+B,EAI/B;AAAEA,IAAAA;AAAF,GAJ+B,CAAjC,CA7EkC,CAmFlC;;AACA,QAAMkH,eAAuB,GAAGtG,UAAU,CAACW,GAAX,CAAe,SAAf,EAA0BC,IAA1B,GAAiC,CAAjE;AACAZ,EAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,SAAlB,EAA8BW,OAAD,IAAa;AACrD,WAAOA,OAAO,CAACsF,MAAR,CAAeD,eAAf,CAAP;AACD,GAFY,CAAb;AAGA,QAAME,eAAuB,GAAGxG,UAAU,CACvCW,GAD6B,CACzB,cADyB,EAE7BqB,SAF6B,CAElByE,UAAD,IAAgB;AACzB,WACEA,UAAU,CAACtF,KAAX,KAAqB,SAArB,IAAkCsF,UAAU,CAACrF,KAAX,KAAqBkF,eADzD;AAGD,GAN6B,CAAhC;;AAOA,MAAIE,eAAe,IAAI,CAAvB,EAA0B;AACxBxG,IAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,cAAlB,EAAmCY,YAAD,IAAkB;AAC/D,aAAOA,YAAY,CAACqF,MAAb,CAAoBC,eAApB,CAAP;AACD,KAFY,CAAb;AAGD;;AAED,MAAI,CAAC7C,SAAS,CAACmC,EAAV,CAAa4C,iBAAb,CAAL,EAAsC;AACpC1I,IAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,SAAlB,EAA8BW,OAAD,IAAa;AACrD,aAAOA,OAAO,CAACT,IAAR,CAAa;AAClBH,QAAAA,WAAW,EAAE;AACXU,UAAAA,QAAQ,EAAE,OAAO2H,iBAAiB,CAAC/C,GAAlB,CAAsB5E,QAAtB,EAAgC2D,QAAhC,CAAyC,EAAzC,CADN;AAEXjF,UAAAA,IAAI,EAAEgJ,SAAS,CAACpI,WAAV,CAAsBZ,IAFjB;AAGXC,UAAAA,IAAI,EAAE+I,SAAS,CAACpI,WAAV,CAAsBX;AAHjB,SADK;AAMlBsB,QAAAA,IAAI,EAAEyH,SAAS,CAACzH;AANE,OAAb,CAAP;AAQD,KATY,CAAb;AAUD;;AAED,SAAOhB,UAAP;AACD;;eAEc;AACbhB,EAAAA,aADa;AAEbe,EAAAA,cAFa;AAGbwE,EAAAA,eAHa;AAIbU,EAAAA,cAJa;AAKb0B,EAAAA,qBALa;AAMb6B,EAAAA;AANa,C","sourcesContent":["import {\n  Address,\n  Cell,\n  CellCollector as BaseCellCollectorType,\n  CellProvider,\n  core,\n  HexString,\n  OutPoint,\n  PackedSince,\n  QueryOptions,\n  Script,\n  utils,\n  values,\n  WitnessArgs,\n} from \"@ckb-lumos/base\";\nimport { Config, getConfig } from \"@ckb-lumos/config-manager\";\nimport {\n  createTransactionFromSkeleton,\n  generateAddress,\n  minimalCellCapacityCompatible,\n  Options,\n  parseAddress,\n  TransactionSkeletonType,\n} from \"@ckb-lumos/helpers\";\nimport { normalizers, Reader } from \"@ckb-lumos/toolkit\";\nimport { List, Set } from \"immutable\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { FromInfo, parseFromInfo } from \"./from_info\";\nimport {\n  addCellDep,\n  hashWitness,\n  isAcpScript,\n  SECP_SIGNATURE_PLACEHOLDER,\n} from \"./helper\";\nimport { CellCollectorConstructor, CellCollectorType } from \"./type\";\nconst { ScriptValue } = values;\nconst { CKBHasher, ckbHash, readBigUInt128LECompatible } = utils;\n\nexport const CellCollector: CellCollectorConstructor = class CellCollector\n  implements CellCollectorType {\n  private cellCollector: BaseCellCollectorType;\n  private config: Config;\n  public readonly fromScript: Script;\n\n  constructor(\n    fromInfo: FromInfo,\n    cellProvider: CellProvider,\n    {\n      config = undefined,\n      queryOptions = {},\n    }: Options & {\n      queryOptions?: QueryOptions;\n    } = {}\n  ) {\n    if (!cellProvider) {\n      throw new Error(`Cell provider is missing!`);\n    }\n    config = config || getConfig();\n    this.fromScript = parseFromInfo(fromInfo, { config }).fromScript;\n\n    this.config = config;\n\n    queryOptions = {\n      ...queryOptions,\n      lock: this.fromScript,\n      type: queryOptions.type || \"empty\",\n    };\n\n    this.cellCollector = cellProvider.collector(queryOptions);\n  }\n\n  async *collect(): AsyncGenerator<Cell> {\n    if (!isAcpScript(this.fromScript, this.config)) {\n      return;\n    }\n    for await (const inputCell of this.cellCollector.collect()) {\n      yield inputCell;\n    }\n  }\n};\n\nexport async function setupInputCell(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  _fromInfo?: FromInfo,\n  {\n    config = undefined,\n    defaultWitness = \"0x\",\n    since = undefined,\n  }: Options & {\n    defaultWitness?: HexString;\n    since?: PackedSince;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  const inputLock: Script = inputCell.cell_output.lock;\n  if (!isAcpScript(inputLock, config)) {\n    throw new Error(\"Not anyone-can-pay input!\");\n  }\n\n  // add inputCell to txSkeleton\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n    return inputs.push(inputCell);\n  });\n\n  if (since) {\n    txSkeleton = txSkeleton.update(\"inputSinces\", (inputSinces) => {\n      return inputSinces.set(txSkeleton.get(\"inputs\").size - 1, since);\n    });\n  }\n\n  txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n    return witnesses.push(defaultWitness);\n  });\n\n  const outputCell: Cell = {\n    cell_output: {\n      capacity: inputCell.cell_output.capacity,\n      lock: inputCell.cell_output.lock,\n      type: inputCell.cell_output.type,\n    },\n    data: inputCell.data,\n  };\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(outputCell);\n  });\n\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push({\n      field: \"outputs\",\n      index: txSkeleton.get(\"outputs\").size - 1,\n    });\n  });\n\n  const template = config.SCRIPTS.ANYONE_CAN_PAY;\n  if (!template) {\n    throw new Error(`ANYONE_CAN_PAY script not defined in config!`);\n  }\n\n  const scriptOutPoint: OutPoint = {\n    tx_hash: template.TX_HASH,\n    index: template.INDEX,\n  };\n\n  // add cell_dep\n  txSkeleton = addCellDep(txSkeleton, {\n    out_point: scriptOutPoint,\n    dep_type: template.DEP_TYPE,\n  });\n\n  // add witness\n  const firstIndex = txSkeleton.get(\"inputs\").findIndex((input) => {\n    return new ScriptValue(input.cell_output.lock, { validate: false }).equals(\n      new ScriptValue(inputLock, { validate: false })\n    );\n  });\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n        return witnesses.push(\"0x\");\n      });\n    }\n    let witness: HexString = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    const newWitnessArgs: WitnessArgs = {\n      /* 65-byte zeros in hex */\n      lock: SECP_SIGNATURE_PLACEHOLDER,\n    };\n    if (witness !== \"0x\") {\n      const witnessArgs = new core.WitnessArgs(new Reader(witness));\n      const lock = witnessArgs.getLock();\n      if (\n        lock.hasValue() &&\n        new Reader(lock.value().raw()).serializeJson() !== newWitnessArgs.lock\n      ) {\n        throw new Error(\n          \"Lock field in first witness is set aside for signature!\"\n        );\n      }\n      const inputType = witnessArgs.getInputType();\n      if (inputType.hasValue()) {\n        newWitnessArgs.input_type = new Reader(\n          inputType.value().raw()\n        ).serializeJson();\n      }\n      const outputType = witnessArgs.getOutputType();\n      if (outputType.hasValue()) {\n        newWitnessArgs.output_type = new Reader(\n          outputType.value().raw()\n        ).serializeJson();\n      }\n    }\n    witness = new Reader(\n      core.SerializeWitnessArgs(\n        normalizers.NormalizeWitnessArgs(newWitnessArgs)\n      )\n    ).serializeJson();\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n      return witnesses.set(firstIndex, witness);\n    });\n  }\n\n  return txSkeleton;\n}\n\n// export for tests\nexport function checkLimit(acpArgs: HexString, capacity: BIish): void {\n  const _capacity = BI.from(capacity);\n  let minimalAmount: BI | undefined;\n  let minimalCapacity: BI | undefined;\n  if (acpArgs.length >= 46) {\n    minimalAmount = BI.from(10).pow(\"0x\" + acpArgs.slice(44, 46));\n  }\n  if (acpArgs.length >= 44) {\n    // should convert to shannons\n    const multiplier = BI.from(10).pow(\"0x\" + acpArgs.slice(42, 44));\n    const multiplicand = BI.from(10).pow(8);\n    minimalCapacity = multiplier.mul(multiplicand);\n  }\n  // Both minimalAmount & minimalCapacity OR only minimalCapacity\n  if (minimalCapacity && minimalAmount) {\n    //check if undefined\n    if (_capacity.lt(minimalCapacity)) {\n      throw new Error(\n        `capacity(${capacity}) less than toAddress minimal capacity limit(${minimalCapacity}), and amount less then toAddress minimal amount limit(${minimalAmount})! If you want to transfer sudt, maybe sudt.transfer can help you.`\n      );\n    }\n  } else if (minimalCapacity) {\n    //check if undefined\n    if (_capacity.lt(minimalCapacity)) {\n      throw new Error(\n        `capacity(${capacity}) less than toAddress minimal capacity limit(${minimalCapacity})!`\n      );\n    }\n  }\n}\n\nexport async function setupOutputCell(\n  txSkeleton: TransactionSkeletonType,\n  outputCell: Cell,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  const toScript: Script = outputCell.cell_output.lock;\n\n  const capacity: BI = BI.from(outputCell.cell_output.capacity);\n\n  checkLimit(toScript.args, capacity.toString());\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(`Cell Provider is missing!`);\n  }\n\n  const toAddress: Address = generateAddress(toScript, { config });\n  const toAddressCellCollector = new CellCollector(toAddress, cellProvider, {\n    config,\n  });\n\n  const toAddressInput: Cell | void = (\n    await toAddressCellCollector.collect().next()\n  ).value;\n\n  let outputCapacity: BI = capacity;\n  if (toAddressInput) {\n    outputCapacity = capacity.add(toAddressInput.cell_output.capacity);\n\n    txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n      return inputs.push(toAddressInput);\n    });\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n      return witnesses.push(\"0x\");\n    });\n  }\n\n  outputCell.cell_output.capacity = \"0x\" + outputCapacity.toString(16);\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(outputCell);\n  });\n\n  if (toAddressInput) {\n    const template = config.SCRIPTS.ANYONE_CAN_PAY;\n    if (!template) {\n      throw new Error(`ANYONE_CAN_PAY script not defined in config!`);\n    }\n    const scriptOutPoint: OutPoint = {\n      tx_hash: template.TX_HASH,\n      index: template.INDEX,\n    };\n\n    // add cell_dep\n    txSkeleton = addCellDep(txSkeleton, {\n      out_point: scriptOutPoint,\n      dep_type: template.DEP_TYPE,\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport async function injectCapacity(\n  cellCollector: CellCollectorType,\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number,\n  capacity: BIish,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  if (outputIndex >= txSkeleton.get(\"outputs\").size) {\n    throw new Error(`Invalid output index!`);\n  }\n\n  let _capacity = BI.from(capacity);\n\n  const template = config.SCRIPTS.ANYONE_CAN_PAY;\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ANYONE_CAN_PAY script setup!`\n    );\n  }\n\n  const fromScript: Script = cellCollector.fromScript;\n\n  /*\n   * First, check if there is any output cells that contains enough capacity\n   * for us to tinker with.\n   *\n   * TODO: the solution right now won't cover all cases, some outputs before the\n   * last output might still be tinkerable, right now we are working on the\n   * simple solution, later we can change this for more optimizations.\n   */\n  const lastFreezedOutput = txSkeleton\n    .get(\"fixedEntries\")\n    .filter(({ field }) => field === \"outputs\")\n    .maxBy(({ index }) => index);\n  let i = lastFreezedOutput ? lastFreezedOutput.index + 1 : 0;\n  for (; i < txSkeleton.get(\"outputs\").size && _capacity.gt(0); i++) {\n    const output = txSkeleton.get(\"outputs\").get(i)!;\n    if (\n      new ScriptValue(output.cell_output.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    ) {\n      const cellCapacity: BI = BI.from(output.cell_output.capacity);\n      const availableCapacity: BI = cellCapacity.sub(\n        minimalCellCapacityCompatible(output)\n      );\n      // should maintain minimal cell capcity in anyone-can-pay output\n      const deductCapacity: BI = _capacity.gte(availableCapacity)\n        ? availableCapacity\n        : _capacity;\n      _capacity = _capacity.sub(deductCapacity);\n      output.cell_output.capacity =\n        \"0x\" + cellCapacity.sub(deductCapacity).toString(16);\n    }\n  }\n  // Remove all output cells with capacity equal to 0\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.filter(\n      (output) => !BI.from(output.cell_output.capacity).eq(0)\n    );\n  });\n\n  const getInputKey = (input: Cell) =>\n    `${input.out_point!.tx_hash}_${input.out_point!.index}`;\n  if (_capacity.gt(0)) {\n    const changeCell: Cell = {\n      cell_output: {\n        capacity: \"0x0\",\n        lock: fromScript,\n        type: undefined,\n      },\n      data: \"0x\",\n      out_point: undefined,\n      block_hash: undefined,\n    };\n    let changeCapacity = BI.from(0);\n    const minimalChangeCapacity: BI = BI.from(\n      minimalCellCapacityCompatible(changeCell)\n    );\n\n    let previousInputs = Set<string>();\n    for (const input of txSkeleton.get(\"inputs\")) {\n      previousInputs = previousInputs.add(getInputKey(input));\n    }\n\n    // Are all from same lock script and type script, so only need one change cell\n    for await (const inputCell of cellCollector.collect()) {\n      if (previousInputs.has(getInputKey(inputCell))) {\n        continue;\n      }\n\n      txSkeleton = await setupInputCell(txSkeleton, inputCell, undefined, {\n        config,\n      });\n      const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.remove(lastOutputIndex);\n      });\n      const fixedEntryIndex: number = txSkeleton\n        .get(\"fixedEntries\")\n        .findIndex((fixedEntry) => {\n          return (\n            fixedEntry.field === \"outputs\" &&\n            fixedEntry.index === lastOutputIndex\n          );\n        });\n      if (fixedEntryIndex >= 0) {\n        txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n          return fixedEntries.remove(fixedEntryIndex);\n        });\n      }\n\n      const inputCapacity = BI.from(inputCell.cell_output.capacity);\n      let deductCapacity = inputCapacity;\n      if (deductCapacity.gt(_capacity)) {\n        deductCapacity = _capacity;\n      }\n      _capacity = _capacity.sub(deductCapacity);\n      changeCapacity = changeCapacity.add(inputCapacity.sub(deductCapacity));\n      if (_capacity.eq(0) && changeCapacity.gte(minimalChangeCapacity)) {\n        break;\n      }\n\n      changeCell.cell_output.capacity = \"0x\" + changeCapacity.toString(16);\n      txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n        return outputs.push(changeCell);\n      });\n    }\n\n    if (_capacity.gt(0) || changeCapacity < minimalChangeCapacity) {\n      throw new Error(`Not enough capacity in from address!`);\n    }\n\n    changeCell.cell_output.capacity = \"0x\" + changeCapacity.toString(16);\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push(changeCell);\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  { config = undefined }: Options = {}\n): TransactionSkeletonType {\n  config = config || getConfig();\n\n  const scriptType = \"ANYONE_CAN_PAY\";\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n\n  let processedArgs = Set<string>();\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  const txHash = ckbHash(\n    core.SerializeRawTransaction(normalizers.NormalizeRawTransaction(tx))\n  ).serializeJson();\n  const inputs = txSkeleton.get(\"inputs\");\n  const witnesses = txSkeleton.get(\"witnesses\");\n  let signingEntries = txSkeleton.get(\"signingEntries\");\n  for (let i = 0; i < inputs.size; i++) {\n    const input = inputs.get(i)!;\n    if (\n      template.CODE_HASH === input.cell_output.lock.code_hash &&\n      template.HASH_TYPE === input.cell_output.lock.hash_type &&\n      !processedArgs.has(input.cell_output.lock.args)\n    ) {\n      processedArgs = processedArgs.add(input.cell_output.lock.args);\n\n      // skip if input sum capcity <= output sum capacity\n      // and input sum amount <= output sum amount\n      const outputs: List<Cell> = txSkeleton.get(\"outputs\").filter((output) => {\n        return new ScriptValue(output.cell_output.lock, {\n          validate: false,\n        }).equals(new ScriptValue(input.cell_output.lock, { validate: false }));\n      });\n      const sumOfOutputCapacity: BI = outputs\n        .map((output) => BI.from(output.cell_output.capacity))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      const sumOfOutputAmount: BI = outputs\n        .filter((output) => output.data !== \"0x\")\n        .map((output) => BI.from(readBigUInt128LECompatible(output.data)))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      const fInputs: List<Cell> = inputs.filter((i) => {\n        return new ScriptValue(i.cell_output.lock, { validate: false }).equals(\n          new ScriptValue(input.cell_output.lock, { validate: false })\n        );\n      });\n\n      const sumOfInputCapacity: BI = fInputs\n        .map((i) => BI.from(i.cell_output.capacity))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      const sumOfInputAmount: BI = fInputs\n        .filter((i) => i.data !== \"0x\")\n        .map((i) => BI.from(readBigUInt128LECompatible(i.data)))\n        .reduce((result, c) => result.add(c), BI.from(0));\n\n      if (\n        sumOfInputCapacity.lte(sumOfOutputCapacity) &&\n        sumOfInputAmount.lte(sumOfOutputAmount)\n      ) {\n        continue;\n      }\n\n      const lockValue = new values.ScriptValue(input.cell_output.lock, {\n        validate: false,\n      });\n      const hasher = new CKBHasher();\n      hasher.update(txHash);\n      if (i >= witnesses.size) {\n        throw new Error(\n          `The first witness in the script group starting at input index ${i} does not exist, maybe some other part has invalidly tampered the transaction?`\n        );\n      }\n      hashWitness(hasher, witnesses.get(i)!);\n      for (let j = i + 1; j < inputs.size && j < witnesses.size; j++) {\n        const otherInput = inputs.get(j)!;\n        if (\n          lockValue.equals(\n            new values.ScriptValue(otherInput.cell_output.lock, {\n              validate: false,\n            })\n          )\n        ) {\n          hashWitness(hasher, witnesses.get(j)!);\n        }\n      }\n      for (let j = inputs.size; j < witnesses.size; j++) {\n        hashWitness(hasher, witnesses.get(j)!);\n      }\n      const signingEntry = {\n        type: \"witness_args_lock\",\n        index: i,\n        message: hasher.digestHex(),\n      };\n      signingEntries = signingEntries.push(signingEntry);\n    }\n  }\n  txSkeleton = txSkeleton.set(\"signingEntries\", signingEntries);\n  return txSkeleton;\n}\n\nexport async function withdraw(\n  txSkeleton: TransactionSkeletonType,\n  fromInput: Cell,\n  toAddress: Address,\n  capacity: BIish,\n  { config = undefined }: Options = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  // from input must be a anyone-can-pay script\n  if (!isAcpScript(fromInput.cell_output.lock, config)) {\n    throw new Error(`fromInput is not a ANYONE_CAN_PAY cell!`);\n  }\n\n  // check capacity\n  const _capacity = BI.from(capacity);\n  const fromInputCapacity: BI = BI.from(fromInput.cell_output.capacity);\n  const inputMinimalCellCapacity: BI = BI.from(\n    minimalCellCapacityCompatible(fromInput)\n  );\n  if (\n    !(\n      (_capacity.gte(0) &&\n        _capacity.lte(fromInputCapacity.sub(inputMinimalCellCapacity))) ||\n      _capacity.eq(fromInputCapacity)\n    )\n  ) {\n    throw new Error(\n      `capacity must be in [0, ${fromInputCapacity.sub(\n        inputMinimalCellCapacity\n      )}] or ${fromInputCapacity} !`\n    );\n  }\n\n  const toScript = parseAddress(toAddress, { config });\n\n  const targetOutput: Cell = {\n    cell_output: {\n      capacity: \"0x\" + capacity.toString(16),\n      lock: toScript,\n      type: undefined,\n    },\n    data: \"0x\",\n    out_point: undefined,\n    block_hash: undefined,\n  };\n\n  if (isAcpScript(toScript, config)) {\n    checkLimit(toScript.args, capacity);\n\n    const cellProvider = txSkeleton.get(\"cellProvider\");\n    if (!cellProvider) {\n      throw new Error(`Cell Provider is missing!`);\n    }\n\n    const toAddressCellCollector = new CellCollector(toAddress, cellProvider, {\n      config,\n    });\n\n    const toAddressInput: Cell | void = (\n      await toAddressCellCollector.collect().next()\n    ).value;\n    if (!toAddressInput) {\n      throw new Error(`toAddress ANYONE_CAN_PAY input not found!`);\n    }\n\n    const outputCapacity: BI = _capacity.add(\n      toAddressInput.cell_output.capacity\n    );\n    targetOutput.cell_output.capacity = \"0x\" + outputCapacity.toString(16);\n\n    txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n      return inputs.push(toAddressInput);\n    });\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n      return witnesses.push(\"0x\");\n    });\n  }\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(targetOutput);\n  });\n\n  txSkeleton = await setupInputCell(\n    txSkeleton,\n    fromInput,\n    generateAddress(fromInput.cell_output.lock, { config }),\n    { config }\n  );\n  // remove output and fixedEntry added by `setupInputCell`\n  const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.remove(lastOutputIndex);\n  });\n  const fixedEntryIndex: number = txSkeleton\n    .get(\"fixedEntries\")\n    .findIndex((fixedEntry) => {\n      return (\n        fixedEntry.field === \"outputs\" && fixedEntry.index === lastOutputIndex\n      );\n    });\n  if (fixedEntryIndex >= 0) {\n    txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n      return fixedEntries.remove(fixedEntryIndex);\n    });\n  }\n\n  if (!_capacity.eq(fromInputCapacity)) {\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n      return outputs.push({\n        cell_output: {\n          capacity: \"0x\" + fromInputCapacity.sub(capacity).toString(16),\n          lock: fromInput.cell_output.lock,\n          type: fromInput.cell_output.type,\n        },\n        data: fromInput.data,\n      });\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport default {\n  CellCollector,\n  setupInputCell,\n  setupOutputCell,\n  injectCapacity,\n  prepareSigningEntries,\n  withdraw,\n};\n"],"file":"anyone_can_pay.js"}