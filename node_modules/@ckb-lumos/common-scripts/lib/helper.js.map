{"version":3,"sources":["../src/helper.ts"],"names":["CKBHasher","ckbHash","utils","addCellDep","txSkeleton","newCellDep","cellDep","get","find","dep_type","values","OutPointValue","out_point","validate","equals","update","cellDeps","push","generateDaoScript","config","template","SCRIPTS","DAO","code_hash","CODE_HASH","hash_type","HASH_TYPE","args","isSecp256k1Blake160Script","script","SECP256K1_BLAKE160","isSecp256k1Blake160Address","address","isSecp256k1Blake160MultisigScript","SECP256K1_BLAKE160_MULTISIG","isSecp256k1Blake160MultisigAddress","isDaoScript","isSudtScript","SUDT","Error","isAcpScript","ANYONE_CAN_PAY","isAcpAddress","hashWitness","hasher","witness","lengthBuffer","ArrayBuffer","view","DataView","witnessHexString","BI","from","Reader","length","toString","setUint32","Number","slice","prepareSigningEntries","scriptType","processedArgs","tx","txHash","core","SerializeRawTransaction","normalizers","NormalizeRawTransaction","serializeJson","inputs","witnesses","signingEntries","i","size","input","cell_output","lock","has","add","lockValue","ScriptValue","j","otherInput","signingEntry","type","index","message","digestHex","set","ensureScript","SECP_SIGNATURE_PLACEHOLDER"],"mappings":"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","sourcesContent":["import { Set } from \"immutable\";\nimport {\n  createTransactionFromSkeleton,\n  parseAddress,\n  TransactionSkeletonType,\n} from \"@ckb-lumos/helpers\";\nimport {\n  core,\n  values,\n  utils,\n  CellDep,\n  Script,\n  Address,\n  HexString,\n} from \"@ckb-lumos/base\";\nconst { CKBHasher, ckbHash } = utils;\nimport { normalizers, Reader } from \"@ckb-lumos/toolkit\";\nimport { Config } from \"@ckb-lumos/config-manager\";\nimport { BI } from \"@ckb-lumos/bi\";\n\nexport function addCellDep(\n  txSkeleton: TransactionSkeletonType,\n  newCellDep: CellDep\n): TransactionSkeletonType {\n  const cellDep = txSkeleton.get(\"cellDeps\").find((cellDep) => {\n    return (\n      cellDep.dep_type === newCellDep.dep_type &&\n      new values.OutPointValue(cellDep.out_point, { validate: false }).equals(\n        new values.OutPointValue(newCellDep.out_point, { validate: false })\n      )\n    );\n  });\n\n  if (!cellDep) {\n    txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) => {\n      return cellDeps.push({\n        out_point: newCellDep.out_point,\n        dep_type: newCellDep.dep_type,\n      });\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport function generateDaoScript(config: Config): Script {\n  const template = config.SCRIPTS.DAO!;\n\n  return {\n    code_hash: template.CODE_HASH,\n    hash_type: template.HASH_TYPE,\n    args: \"0x\",\n  };\n}\n\nexport function isSecp256k1Blake160Script(\n  script: Script,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SECP256K1_BLAKE160!;\n  return (\n    script.code_hash === template.CODE_HASH &&\n    script.hash_type === template.HASH_TYPE\n  );\n}\n\nexport function isSecp256k1Blake160Address(\n  address: Address,\n  config: Config\n): boolean {\n  const script = parseAddress(address, { config });\n  return isSecp256k1Blake160Script(script, config);\n}\n\nexport function isSecp256k1Blake160MultisigScript(\n  script: Script,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SECP256K1_BLAKE160_MULTISIG!;\n  return (\n    script.code_hash === template.CODE_HASH &&\n    script.hash_type === template.HASH_TYPE\n  );\n}\n\nexport function isSecp256k1Blake160MultisigAddress(\n  address: Address,\n  config: Config\n): boolean {\n  const script = parseAddress(address, { config });\n  return isSecp256k1Blake160MultisigScript(script, config);\n}\n\nexport function isDaoScript(\n  script: Script | undefined,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.DAO!;\n\n  return (\n    !!script &&\n    script.code_hash === template.CODE_HASH &&\n    script.hash_type === template.HASH_TYPE\n  );\n}\n\nexport function isSudtScript(\n  script: Script | undefined,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SUDT;\n\n  if (!template) {\n    throw new Error(`SUDT script not defined in config!`);\n  }\n\n  return (\n    !!script &&\n    script.code_hash === template.CODE_HASH &&\n    script.hash_type === template.HASH_TYPE\n  );\n}\n\nexport function isAcpScript(script: Script, config: Config): boolean {\n  const template = config.SCRIPTS.ANYONE_CAN_PAY;\n\n  if (!template) {\n    throw new Error(`ANYONE_CAN_PAY script not defined in config!`);\n  }\n\n  return (\n    !!script &&\n    script.code_hash === template.CODE_HASH &&\n    script.hash_type === template.HASH_TYPE\n  );\n}\n\nexport function isAcpAddress(address: Address, config: Config): boolean {\n  const script = parseAddress(address, { config });\n\n  return isAcpScript(script, config);\n}\n\nexport function hashWitness(hasher: any, witness: HexString): void {\n  const lengthBuffer = new ArrayBuffer(8);\n  const view = new DataView(lengthBuffer);\n  const witnessHexString = BI.from(new Reader(witness).length()).toString(16);\n  if (witnessHexString.length <= 8) {\n    view.setUint32(0, Number(\"0x\" + witnessHexString), true);\n    view.setUint32(4, Number(\"0x\" + \"00000000\"), true);\n  }\n\n  if (witnessHexString.length > 8 && witnessHexString.length <= 16) {\n    view.setUint32(0, Number(\"0x\" + witnessHexString.slice(-8)), true);\n    view.setUint32(4, Number(\"0x\" + witnessHexString.slice(0, -8)), true);\n  }\n  hasher.update(lengthBuffer);\n  hasher.update(witness);\n}\n\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  config: Config,\n  scriptType: \"SECP256K1_BLAKE160\" | \"SECP256K1_BLAKE160_MULTISIG\"\n): TransactionSkeletonType {\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n  let processedArgs = Set<string>();\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  const txHash = ckbHash(\n    core.SerializeRawTransaction(normalizers.NormalizeRawTransaction(tx))\n  ).serializeJson();\n  const inputs = txSkeleton.get(\"inputs\");\n  const witnesses = txSkeleton.get(\"witnesses\");\n  let signingEntries = txSkeleton.get(\"signingEntries\");\n  for (let i = 0; i < inputs.size; i++) {\n    const input = inputs.get(i)!;\n    if (\n      template.CODE_HASH === input.cell_output.lock.code_hash &&\n      template.HASH_TYPE === input.cell_output.lock.hash_type &&\n      !processedArgs.has(input.cell_output.lock.args)\n    ) {\n      processedArgs = processedArgs.add(input.cell_output.lock.args);\n      const lockValue = new values.ScriptValue(input.cell_output.lock, {\n        validate: false,\n      });\n      const hasher = new CKBHasher();\n      hasher.update(txHash);\n      if (i >= witnesses.size) {\n        throw new Error(\n          `The first witness in the script group starting at input index ${i} does not exist, maybe some other part has invalidly tampered the transaction?`\n        );\n      }\n      hashWitness(hasher, witnesses.get(i)!);\n      for (let j = i + 1; j < inputs.size && j < witnesses.size; j++) {\n        const otherInput = inputs.get(j)!;\n        if (\n          lockValue.equals(\n            new values.ScriptValue(otherInput.cell_output.lock, {\n              validate: false,\n            })\n          )\n        ) {\n          hashWitness(hasher, witnesses.get(j)!);\n        }\n      }\n      for (let j = inputs.size; j < witnesses.size; j++) {\n        hashWitness(hasher, witnesses.get(j)!);\n      }\n      const signingEntry = {\n        type: \"witness_args_lock\",\n        index: i,\n        message: hasher.digestHex(),\n      };\n      signingEntries = signingEntries.push(signingEntry);\n    }\n  }\n  txSkeleton = txSkeleton.set(\"signingEntries\", signingEntries);\n  return txSkeleton;\n}\n\nexport function ensureScript(\n  script: Script,\n  config: Config,\n  scriptType: \"SECP256K1_BLAKE160\" | \"SECP256K1_BLAKE160_MULTISIG\" | \"DAO\"\n): void {\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n  if (\n    template.CODE_HASH !== script.code_hash ||\n    template.HASH_TYPE !== script.hash_type\n  ) {\n    throw new Error(`Provided script is not ${scriptType} script!`);\n  }\n}\n\n/* 65-byte zeros in hex */\nexport const SECP_SIGNATURE_PLACEHOLDER =\n  \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n\nexport default {\n  addCellDep,\n  generateDaoScript,\n  isSecp256k1Blake160Script,\n  isSecp256k1Blake160MultisigScript,\n  isDaoScript,\n  isSudtScript,\n  prepareSigningEntries,\n  isSecp256k1Blake160Address,\n  isSecp256k1Blake160MultisigAddress,\n  ensureScript,\n  isAcpScript,\n  isAcpAddress,\n};\n"],"file":"helper.js"}