{"version":3,"sources":["../src/deploy.ts"],"names":["ScriptValue","values","bytesToHex","bytes","res","i","length","toString","padStart","findCellsByLock","lockScript","cellProvider","collector","lock","type","data","cells","cell","collect","push","updateOutputs","txSkeleton","output","cellCapacity","cell_output","capacity","update","outputs","updateCellDeps","config","cellDeps","clear","secp256k1Config","SCRIPTS","SECP256K1_BLAKE160","secp256k1MultiSigConfig","SECP256K1_BLAKE160_MULTISIG","Error","out_point","tx_hash","TX_HASH","index","INDEX","dep_type","DEP_TYPE","completeTx","fromInfo","feeRate","inputCapacity","get","map","c","BI","from","reduce","a","b","add","outputCapacity","needCapacity","sub","injectCapacity","amount","undefined","_feeRate","_amount","fromScript","multisigScript","pow","changeCapacity","changeCell","minimalChangeCapacity","lt","gt","cellCollector","previousInputs","input","inputCell","has","inputs","witnesses","deductCapacity","eq","gte","firstIndex","findIndex","validate","equals","size","witness","newWitnessArgs","SECP_SIGNATURE_PLACEHOLDER","slice","repeat","M","witnessArgs","core","WitnessArgs","Reader","getLock","hasValue","value","raw","serializeJson","inputType","getInputType","input_type","outputType","getOutputType","output_type","SerializeWitnessArgs","normalizers","NormalizeWitnessArgs","set","txFee","calculateTxFee","pop","getTransactionSize","tx","getTransactionSizeByTx","serializedTx","NormalizeTransaction","byteLength","calculateFee","ratio","base","mul","fee","div","txSize","calculateCodeHashByBin","scriptBin","bin","valueOf","utils","CKBHasher","buffer","byteOffset","digestHex","getDataHash","outPoint","rpc","txHash","parseInt","get_transaction","outputData","transaction","outputs_data","calculateTxHash","ckbHash","SerializeRawTransaction","NormalizeRawTransaction","getScriptConfigByDataHash","outputIndex","codeHash","toArrayBuffer","scriptConfig","CODE_HASH","HASH_TYPE","getScriptConfigByTypeHash","typeScript","computeScriptHash","getScriptConfig","outputCell","isMultisigFromInfo","Array","isArray","publicKeyHashes","verifyFromInfo","helpers","nameOfScript","generateDeployWithDataTx","options","scriptBinary","generateDeployWithTypeIdTx","resolved","typeId","generateTypeIdScript","previous_output","since","generateUpgradeTypeIdDataTx","deployedCell","compareScriptBinaryWithOnChainData","localHash","onChainHash","__tests__"],"mappings":";;;;;;;;;;;AAAA;;AAWA;;AACA;;AACA;;AAQA;;AAEA;;AACA;;AACA;;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAkBC,YAAxB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA+C;AAC7C,MAAIC,GAAG,GAAG,IAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,IAAAA,GAAG,IAAID,KAAK,CAACE,CAAD,CAAL,CAASE,QAAT,CAAkB,EAAlB,EAAsBC,QAAtB,CAA+B,CAA/B,EAAkC,GAAlC,CAAP;AACD;;AACD,SAAOJ,GAAP;AACD;;AAED,eAAeK,eAAf,CACEC,UADF,EAEEC,YAFF,EAGmB;AACjB,QAAMC,SAAS,GAAGD,YAAY,CAACC,SAAb,CAAuB;AACvCC,IAAAA,IAAI,EAAEH,UADiC;AAEvCI,IAAAA,IAAI,EAAE,OAFiC;AAGvCC,IAAAA,IAAI,EAAE;AAHiC,GAAvB,CAAlB;AAKA,QAAMC,KAAa,GAAG,EAAtB;;AACA,aAAW,MAAMC,IAAjB,IAAyBL,SAAS,CAACM,OAAV,EAAzB,EAA8C;AAC5CF,IAAAA,KAAK,CAACG,IAAN,CAAWF,IAAX;AACD;;AACD,SAAOD,KAAP;AACD;;AAED,SAASI,aAAT,CACEC,UADF,EAEEC,MAFF,EAG2B;AACzB,QAAMC,YAAY,GAAG,4CAA8BD,MAA9B,CAArB;AACAA,EAAAA,MAAM,CAACE,WAAP,CAAmBC,QAAnB,GAA+B,KAAIF,YAAY,CAAChB,QAAb,CAAsB,EAAtB,CAA0B,EAA7D;AACAc,EAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA8BC,OAAD,IAAa;AACrD,WAAOA,OAAO,CAACR,IAAR,CAAaG,MAAb,CAAP;AACD,GAFY,CAAb;AAIA,SAAOD,UAAP;AACD;;AAED,SAASO,cAAT,CACEP,UADF,EAEEQ,MAFF,EAG2B;AACzBR,EAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,UAAlB,EAA+BI,QAAD,IAAc;AACvD,WAAOA,QAAQ,CAACC,KAAT,EAAP;AACD,GAFY,CAAb;AAGAF,EAAAA,MAAM,GAAGA,MAAM,IAAI,+BAAnB;AACA,QAAMG,eAAe,GAAGH,MAAM,CAACI,OAAP,CAAeC,kBAAvC;AACA,QAAMC,uBAAuB,GAAGN,MAAM,CAACI,OAAP,CAAeG,2BAA/C;;AACA,MAAI,CAACJ,eAAD,IAAoB,CAACG,uBAAzB,EAAkD;AAChD,UAAM,IAAIE,KAAJ,CACJ,+FADI,CAAN;AAGD;;AACDhB,EAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,UAAlB,EAA+BI,QAAD,IAAc;AACvD,WAAOA,QAAQ,CAACX,IAAT,CACL;AACEmB,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAEP,eAAe,CAACQ,OADhB;AAETC,QAAAA,KAAK,EAAET,eAAe,CAACU;AAFd,OADb;AAKEC,MAAAA,QAAQ,EAAEX,eAAe,CAACY;AAL5B,KADK,EAQL;AACA;AACEN,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAEJ,uBAAuB,CAACK,OADxB;AAETC,QAAAA,KAAK,EAAEN,uBAAuB,CAACO;AAFtB,OADb;AAKEC,MAAAA,QAAQ,EAAER,uBAAuB,CAACS;AALpC,KATK,CAAP;AAiBD,GAlBY,CAAb;AAoBA,SAAOvB,UAAP;AACD;;AAED,eAAewB,UAAf,CACExB,UADF,EAEEyB,QAFF,EAGEjB,MAHF,EAIEkB,OAJF,EAKoC;AAClC,QAAMC,aAAa,GAAG3B,UAAU,CAC7B4B,GADmB,CACf,QADe,EAEnBC,GAFmB,CAEdC,CAAD,IAAOC,OAAGC,IAAH,CAAQF,CAAC,CAAC3B,WAAF,CAAcC,QAAtB,CAFQ,EAGnB6B,MAHmB,CAGZ,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAHE,EAGQJ,OAAGC,IAAH,CAAQ,CAAR,CAHR,CAAtB;AAIA,QAAMK,cAAc,GAAGrC,UAAU,CAC9B4B,GADoB,CAChB,SADgB,EAEpBC,GAFoB,CAEfC,CAAD,IAAOC,OAAGC,IAAH,CAAQF,CAAC,CAAC3B,WAAF,CAAcC,QAAtB,CAFS,EAGpB6B,MAHoB,CAGb,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,GAAF,CAAMD,CAAN,CAHG,EAGOJ,OAAGC,IAAH,CAAQ,CAAR,CAHP,CAAvB;AAIA,QAAMM,YAAY,GAAGD,cAAc,CAACE,GAAf,CAAmBZ,aAAnB,CAArB;AACA3B,EAAAA,UAAU,GAAG,MAAMwC,cAAc,CAC/BxC,UAD+B,EAE/ByB,QAF+B,EAG/BM,OAAGC,IAAH,CAAQM,YAAR,CAH+B,EAI/B;AACE9B,IAAAA,MAAM,EAAEA,MADV;AAEEkB,IAAAA,OAAO,EAAEA;AAFX,GAJ+B,CAAjC;AASA,SAAO1B,UAAP;AACD;;AAED,eAAewC,cAAf,CACExC,UADF,EAEEyB,QAFF,EAGEgB,MAHF,EAIE;AACEjC,EAAAA,MAAM,GAAGkC,SADX;AAEEhB,EAAAA,OAAO,GAAGgB;AAFZ,CAJF,EAQoC;AAClClC,EAAAA,MAAM,GAAGA,MAAM,IAAI,+BAAnB;;AACA,QAAMmC,QAAQ,GAAGjB,OAAO,IAAI,IAA5B;;AACA,MAAIkB,OAAO,GAAGb,OAAGC,IAAH,CAAQS,MAAR,CAAd;;AACA,QAAM;AAAEI,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAiC,8BAAcrB,QAAd,EAAwB;AAAEjB,IAAAA;AAAF,GAAxB,CAAvC;AACAoC,EAAAA,OAAO,GAAGA,OAAO,CAACR,GAAR,CAAYL,OAAGC,IAAH,CAAQ,EAAR,EAAYe,GAAZ,CAAgB,CAAhB,CAAZ,CAAV;;AACA,MAAIC,cAAc,GAAGjB,OAAGC,IAAH,CAAQ,EAAR,EAAYe,GAAZ,CAAgB,CAAhB,CAArB;;AACA,QAAME,UAAgB,GAAG;AACvB9C,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE,KADC;AAEXZ,MAAAA,IAAI,EAAEqD,UAFK;AAGXpD,MAAAA,IAAI,EAAEiD;AAHK,KADU;AAMvBhD,IAAAA,IAAI,EAAE;AANiB,GAAzB;;AAQA,QAAMwD,qBAAyB,GAAGnB,OAAGC,IAAH,CAChC,4CAA8BiB,UAA9B,CADgC,EAEhCb,GAFgC,CAE5BL,OAAGC,IAAH,CAAQ,EAAR,EAAYe,GAAZ,CAAgB,CAAhB,CAF4B,CAAlC;;AAIA,MAAIH,OAAO,CAACO,EAAR,CAAW,CAAX,CAAJ,EAAmB;AACjBH,IAAAA,cAAc,GAAGA,cAAc,CAACT,GAAf,CAAmBK,OAAnB,CAAjB;AACAA,IAAAA,OAAO,GAAGb,OAAGC,IAAH,CAAQ,CAAR,CAAV;AACD;;AACD,MAAIY,OAAO,CAACQ,EAAR,CAAW,CAAX,KAAiBJ,cAAc,CAACG,EAAf,CAAkBD,qBAAlB,CAArB,EAA+D;AAC7D,UAAM5D,YAAY,GAAGU,UAAU,CAAC4B,GAAX,CAAe,cAAf,CAArB;AACA,QAAI,CAACtC,YAAL,EAAmB,MAAM,IAAI0B,KAAJ,CAAU,2BAAV,CAAN;AACnB,UAAMqC,aAAa,GAAG/D,YAAY,CAACC,SAAb,CAAuB;AAC3CC,MAAAA,IAAI,EAAEqD,UADqC;AAE3CpD,MAAAA,IAAI,EAAE,OAFqC;AAG3CC,MAAAA,IAAI,EAAE;AAHqC,KAAvB,CAAtB;AAMA,QAAI4D,cAAc,GAAG,qBAArB;;AACA,SAAK,MAAMC,KAAX,IAAoBvD,UAAU,CAAC4B,GAAX,CAAe,QAAf,CAApB,EAA8C;AAC5C0B,MAAAA,cAAc,GAAGA,cAAc,CAAClB,GAAf,CACd,GAAEmB,KAAK,CAACtC,SAAN,CAAiBC,OAAQ,IAAGqC,KAAK,CAACtC,SAAN,CAAiBG,KAAM,EADvC,CAAjB;AAGD;;AAED,eAAW,MAAMoC,SAAjB,IAA8BH,aAAa,CAACxD,OAAd,EAA9B,EAAuD;AACrD,UACEyD,cAAc,CAACG,GAAf,CACG,GAAED,SAAS,CAACvC,SAAV,CAAqBC,OAAQ,IAAGsC,SAAS,CAACvC,SAAV,CAAqBG,KAAM,EADhE,CADF,EAKE;AACFpB,MAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,QAAlB,EAA6BqD,MAAD,IACvCA,MAAM,CAAC5D,IAAP,CAAY0D,SAAZ,CADW,CAAb;AAGAxD,MAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,WAAlB,EAAgCsD,SAAD,IAC1CA,SAAS,CAAC7D,IAAV,CAAe,IAAf,CADW,CAAb;;AAGA,YAAM6B,aAAa,GAAGI,OAAGC,IAAH,CAAQwB,SAAS,CAACrD,WAAV,CAAsBC,QAA9B,CAAtB;;AACA,UAAIwD,cAAc,GAAGjC,aAArB;;AACA,UAAIiC,cAAc,CAACR,EAAf,CAAkBR,OAAlB,CAAJ,EAAgC;AAC9BgB,QAAAA,cAAc,GAAGhB,OAAjB;AACD;;AACDA,MAAAA,OAAO,GAAGA,OAAO,CAACL,GAAR,CAAYqB,cAAZ,CAAV;AACAZ,MAAAA,cAAc,GAAGA,cAAc,CAACZ,GAAf,CAAmBT,aAAnB,EAAkCY,GAAlC,CAAsCqB,cAAtC,CAAjB;AACA,UACEhB,OAAO,CAACiB,EAAR,CAAW,CAAX,MACCb,cAAc,CAACa,EAAf,CAAkB,CAAlB,KAAwBb,cAAc,CAACc,GAAf,CAAmBZ,qBAAnB,CADzB,CADF,EAIE;AACH;AACF;;AAED,MAAIF,cAAc,CAACI,EAAf,CAAkB,CAAlB,CAAJ,EAA0B;AACxBH,IAAAA,UAAU,CAAC9C,WAAX,CAAuBC,QAAvB,GAAkC,OAAO4C,cAAc,CAAC9D,QAAf,CAAwB,EAAxB,CAAzC;AACAc,IAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA8BC,OAAD,IACxCA,OAAO,CAACR,IAAR,CAAamD,UAAb,CADW,CAAb;AAGD;;AACD,MAAIL,OAAO,CAACQ,EAAR,CAAW,CAAX,KAAiBJ,cAAc,CAACG,EAAf,CAAkBD,qBAAlB,CAArB,EACE,MAAM,IAAIlC,KAAJ,CAAU,sCAAV,CAAN;AAEF;AACF;AACA;AACA;AACA;;AACE,QAAM+C,UAAU,GAAG/D,UAAU,CAC1B4B,GADgB,CACZ,QADY,EAEhBoC,SAFgB,CAELT,KAAD,IACT,IAAI5E,WAAJ,CAAgB4E,KAAK,CAACpD,WAAN,CAAkBX,IAAlC,EAAwC;AAAEyE,IAAAA,QAAQ,EAAE;AAAZ,GAAxC,EAA6DC,MAA7D,CACE,IAAIvF,WAAJ,CAAgBkE,UAAhB,EAA4B;AAAEoB,IAAAA,QAAQ,EAAE;AAAZ,GAA5B,CADF,CAHe,CAAnB;;AAOA,MAAIF,UAAU,KAAK,CAAC,CAApB,EAAuB;AACrB,WAAOA,UAAU,IAAI/D,UAAU,CAAC4B,GAAX,CAAe,WAAf,EAA4BuC,IAAjD,EAAuD;AACrDnE,MAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,WAAlB,EAAgCsD,SAAD,IAC1CA,SAAS,CAAC7D,IAAV,CAAe,IAAf,CADW,CAAb;AAGD;;AACD,QAAIsE,OAAe,GAAGpE,UAAU,CAAC4B,GAAX,CAAe,WAAf,EAA4BA,GAA5B,CAAgCmC,UAAhC,CAAtB;AACA,QAAIM,cAAJ;AACA,UAAMC,0BAA0B,GAC9B,sIADF;;AAGA,QAAI,OAAO7C,QAAP,KAAoB,QAAxB,EAAkC;AAChC4C,MAAAA,cAAc,GAAG;AACf7E,QAAAA,IAAI,EACF,OACAsD,cAAc,CAAEyB,KAAhB,CAAsB,CAAtB,CADA,GAEAD,0BAA0B,CAACC,KAA3B,CAAiC,CAAjC,EAAoCC,MAApC,CACG/C,QAAD,CAA6BgD,CAD/B;AAJa,OAAjB;AAQD,KATD,MASO;AACLJ,MAAAA,cAAc,GAAG;AAAE7E,QAAAA,IAAI,EAAE8E;AAAR,OAAjB;AACD;;AAED,QAAIF,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAMM,WAAW,GAAG,IAAIC,WAAKC,WAAT,CAAqB,IAAIC,eAAJ,CAAWT,OAAX,CAArB,CAApB;AACA,YAAM5E,IAAI,GAAGkF,WAAW,CAACI,OAAZ,EAAb;;AACA,UACEtF,IAAI,CAACuF,QAAL,MACA,IAAIF,eAAJ,CAAWrF,IAAI,CAACwF,KAAL,GAAaC,GAAb,EAAX,EAA+BC,aAA/B,OAAmDb,cAAc,CAAC7E,IAFpE,EAGE;AACA,cAAM,IAAIwB,KAAJ,CACJ,yDADI,CAAN;AAGD;;AACD,YAAMmE,SAAS,GAAGT,WAAW,CAACU,YAAZ,EAAlB;;AACA,UAAID,SAAS,CAACJ,QAAV,EAAJ,EAA0B;AACxBV,QAAAA,cAAc,CAACgB,UAAf,GAA4B,IAAIR,eAAJ,CAC1BM,SAAS,CAACH,KAAV,GAAkBC,GAAlB,EAD0B,EAE1BC,aAF0B,EAA5B;AAGD;;AACD,YAAMI,UAAU,GAAGZ,WAAW,CAACa,aAAZ,EAAnB;;AACA,UAAID,UAAU,CAACP,QAAX,EAAJ,EAA2B;AACzBV,QAAAA,cAAc,CAACmB,WAAf,GAA6B,IAAIX,eAAJ,CAC3BS,UAAU,CAACN,KAAX,GAAmBC,GAAnB,EAD2B,EAE3BC,aAF2B,EAA7B;AAGD;AACF;;AACDd,IAAAA,OAAO,GAAG,IAAIS,eAAJ,CACRF,WAAKc,oBAAL,CACEC,qBAAYC,oBAAZ,CAAiCtB,cAAjC,CADF,CADQ,EAIRa,aAJQ,EAAV;AAKAlF,IAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,WAAlB,EAAgCsD,SAAD,IAC1CA,SAAS,CAACiC,GAAV,CAAc7B,UAAd,EAA0BK,OAA1B,CADW,CAAb;AAGD;;AAED,QAAMyB,KAAK,GAAGC,cAAc,CAAC9F,UAAD,EAAa2C,QAAb,CAA5B;AACAK,EAAAA,cAAc,GAAGA,cAAc,CAACT,GAAf,CAAmBsD,KAAnB,CAAjB;AAEA7F,EAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA8BC,OAAD,IAAa;AACrD,WAAOA,OAAO,CAACyF,GAAR,EAAP;AACD,GAFY,CAAb;;AAGA,MAAI/C,cAAc,CAACI,EAAf,CAAkB,CAAlB,CAAJ,EAA0B;AACxBH,IAAAA,UAAU,CAAC9C,WAAX,CAAuBC,QAAvB,GAAkC,OAAO4C,cAAc,CAAC9D,QAAf,CAAwB,EAAxB,CAAzC;AACAc,IAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,SAAlB,EAA8BC,OAAD,IACxCA,OAAO,CAACR,IAAR,CAAamD,UAAb,CADW,CAAb;AAGD;;AAED,SAAOjD,UAAP;AACD;;AAED,SAASgG,kBAAT,CAA4BhG,UAA5B,EAAyE;AACvE,QAAMiG,EAAE,GAAG,4CAA8BjG,UAA9B,CAAX;AACA,SAAOkG,sBAAsB,CAACD,EAAD,CAA7B;AACD;;AAED,SAASC,sBAAT,CAAgCD,EAAhC,EAAyD;AACvD,QAAME,YAAY,GAAG,gCACnBT,qBAAYU,oBAAZ,CAAiCH,EAAjC,CADmB,CAArB,CADuD,CAIvD;;AACA,QAAM9B,IAAI,GAAGgC,YAAY,CAACE,UAAb,GAA0B,CAAvC;AACA,SAAOlC,IAAP;AACD;;AAED,SAASmC,YAAT,CAAsBnC,IAAtB,EAAoCzC,OAApC,EAAwD;AACtD,QAAM6E,KAAK,GAAGxE,OAAGC,IAAH,CAAQ,IAAR,CAAd;;AACA,QAAMwE,IAAI,GAAGzE,OAAGC,IAAH,CAAQmC,IAAR,EAAcsC,GAAd,CAAkB/E,OAAlB,CAAb;;AACA,QAAMgF,GAAG,GAAGF,IAAI,CAACG,GAAL,CAASJ,KAAT,CAAZ;;AAEA,MAAIG,GAAG,CAACD,GAAJ,CAAQF,KAAR,EAAepD,EAAf,CAAkBqD,IAAlB,CAAJ,EAA6B;AAC3B,WAAOE,GAAG,CAACtE,GAAJ,CAAQ,CAAR,CAAP;AACD;;AACD,SAAOL,OAAGC,IAAH,CAAQ0E,GAAR,CAAP;AACD;;AAED,SAASZ,cAAT,CACE9F,UADF,EAEE0B,OAFF,EAGM;AACJ,QAAMkF,MAAM,GAAGZ,kBAAkB,CAAChG,UAAD,CAAjC;AACA,SAAO+B,OAAGC,IAAH,CAAQsE,YAAY,CAACM,MAAD,EAASlF,OAAT,CAApB,CAAP;AACD;;AAED,SAASmF,sBAAT,CAAgCC,SAAhC,EAA+D;AAC7D,QAAMC,GAAG,GAAGD,SAAS,CAACE,OAAV,EAAZ;AACA,SAAO,IAAIC,YAAMC,SAAV,GACJ7G,MADI,CACG0G,GAAG,CAACI,MAAJ,CAAW5C,KAAX,CAAiBwC,GAAG,CAACK,UAArB,EAAiCL,GAAG,CAACV,UAAJ,GAAiBU,GAAG,CAACK,UAAtD,CADH,EAEJC,SAFI,EAAP;AAGD;;AAED,eAAeC,WAAf,CAA2BC,QAA3B,EAA+CC,GAA/C,EAA0E;AACxE,QAAMC,MAAM,GAAGF,QAAQ,CAACrG,OAAxB;AACA,QAAME,KAAK,GAAGsG,QAAQ,CAACH,QAAQ,CAACnG,KAAV,EAAiB,EAAjB,CAAtB;AACA,QAAM6E,EAAE,GAAG,MAAMuB,GAAG,CAACG,eAAJ,CAAoBF,MAApB,CAAjB;AAEA,MAAI,CAACxB,EAAL,EAAS,MAAM,IAAIjF,KAAJ,CAAW,UAASyG,MAAO,gBAA3B,CAAN;AAET,QAAMG,UAAU,GAAG3B,EAAE,CAAC4B,WAAH,CAAeC,YAAf,CAA4B1G,KAA5B,CAAnB;AACA,MAAI,CAACwG,UAAL,EAAiB,MAAM,IAAI5G,KAAJ,CAAW,yBAAX,CAAN;AAEjB,SAAO,IAAIiG,YAAMC,SAAV,GAAsB7G,MAAtB,CAA6B,IAAIwE,eAAJ,CAAW+C,UAAX,CAA7B,EAAqDP,SAArD,EAAP;AACD;;AAoBD,SAASU,eAAT,CAAyB/H,UAAzB,EAAsE;AACpE,QAAMiG,EAAE,GAAG,4CAA8BjG,UAA9B,CAAX;;AACA,QAAMyH,MAAM,GAAGR,YACZe,OADY,CAEXrD,WAAKsD,uBAAL,CAA6BvC,qBAAYwC,uBAAZ,CAAoCjC,EAApC,CAA7B,CAFW,EAIZf,aAJY,EAAf;;AAKA,SAAOuC,MAAP;AACD;;AAED,SAASU,yBAAT,CACEnI,UADF,EAEEoI,WAFF,EAGgB;AACd,QAAM1I,IAAI,GAAGM,UAAU,CAACM,OAAX,CAAmBsB,GAAnB,CAAuBwG,WAAvB,EAAqC1I,IAAlD;;AACA,QAAM2I,QAAQ,GAAGpB,YACde,OADc,CACN,IAAInD,eAAJ,CAAWnF,IAAX,EAAiB4I,aAAjB,EADM,EAEdpD,aAFc,EAAjB;;AAGA,QAAMuC,MAAM,GAAGM,eAAe,CAAC/H,UAAD,CAA9B;AACA,QAAMuI,YAA0B,GAAG;AACjCC,IAAAA,SAAS,EAAEH,QADsB;AAEjCI,IAAAA,SAAS,EAAE,MAFsB;AAGjCtH,IAAAA,OAAO,EAAEsG,MAHwB;AAIjCpG,IAAAA,KAAK,EAAE,KAJ0B;AAKjCE,IAAAA,QAAQ,EAAE;AALuB,GAAnC;AAOA,SAAOgH,YAAP;AACD;;AAED,SAASG,yBAAT,CACE1I,UADF,EAEEoI,WAFF,EAGgB;AACd,QAAMO,UAAU,GAAG3I,UAAU,CAACM,OAAX,CAAmBsB,GAAnB,CAAuBwG,WAAvB,EAAqCjI,WAArC,CAAiDV,IAApE;;AACA,QAAM4I,QAAQ,GAAGpB,YAAM2B,iBAAN,CAAwBD,UAAxB,CAAjB;;AACA,QAAMlB,MAAM,GAAGM,eAAe,CAAC/H,UAAD,CAA9B;AACA,QAAMuI,YAA0B,GAAG;AACjCC,IAAAA,SAAS,EAAEH,QADsB;AAEjCI,IAAAA,SAAS,EAAE,MAFsB;AAGjCtH,IAAAA,OAAO,EAAEsG,MAHwB;AAIjCpG,IAAAA,KAAK,EAAE,KAJ0B;AAKjCE,IAAAA,QAAQ,EAAE;AALuB,GAAnC;AAOA,SAAOgH,YAAP;AACD;;AAED,SAASM,eAAT,CACE7I,UADF,EAEEoI,WAFF,EAGgB;AACd,QAAMU,UAAU,GAAG9I,UAAU,CAACM,OAAX,CAAmBsB,GAAnB,CAAuBwG,WAAvB,CAAnB;AACA,MAAIU,UAAU,IAAIpG,SAAlB,EACE,MAAM,IAAI1B,KAAJ,CAAU,mCAAV,CAAN;AACF,QAAMvB,IAAI,GAAGqJ,UAAU,CAAC3I,WAAX,CAAuBV,IAApC;AACA,MAAIA,IAAI,KAAKiD,SAAb,EACE,OAAOgG,yBAAyB,CAAC1I,UAAD,EAAaoI,WAAb,CAAhC;AACF,SAAOD,yBAAyB,CAACnI,UAAD,EAAaoI,WAAb,CAAhC;AACD;;AAED,SAASW,kBAAT,CAA4BtH,QAA5B,EAA4E;AAC1E,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC,OAAO,KAAP;AAClC,SACE,OAAOA,QAAP,IACA,OAAOA,QADP,IAEAuH,KAAK,CAACC,OAAN,CAAcxH,QAAQ,CAACyH,eAAvB,CAHF;AAKD;;AAED,SAASC,cAAT,CACE1H,QADF,EAEE;AAAEjB,EAAAA,MAAM,GAAGkC;AAAX,IAAkC,EAFpC,EAGQ;AACNlC,EAAAA,MAAM,GAAGA,MAAM,IAAI,+BAAnB;;AACA,MAAI,OAAOiB,QAAP,KAAoB,QAAxB,EAAkC;AAChC,QACE2H,uBAAQC,YAAR,CACE,2BAAa5H,QAAb,EAAuB;AAAEjB,MAAAA;AAAF,KAAvB,CADF,EAEEA,MAAM,CAACI,OAFT,MAGM,oBAJR,EAME,MAAM,IAAII,KAAJ,CACJ,4DADI,CAAN;AAGH,GAVD,MAUO,IAAI,CAAC+H,kBAAkB,CAACtH,QAAD,CAAvB,EAAmC;AACxC,UAAM,IAAIT,KAAJ,CACJ,4DADI,CAAN;AAGD;AACF;;AAuBD;AACA;AACA;AACA;AACA;AACA;AACO,eAAesI,wBAAf,CACLC,OADK,EAEkB;AACvBJ,EAAAA,cAAc,CAACI,OAAO,CAAC9H,QAAT,EAAmB;AAAEjB,IAAAA,MAAM,EAAE+I,OAAO,CAAC/I;AAAlB,GAAnB,CAAd;AAEA,MAAIR,UAAU,GAAG,kCAAoB;AAAEV,IAAAA,YAAY,EAAEiK,OAAO,CAACjK;AAAxB,GAApB,CAAjB;AACA,QAAM;AAAEuD,IAAAA;AAAF,MAAiB,8BAAc0G,OAAO,CAAC9H,QAAtB,EAAgC;AACrDjB,IAAAA,MAAM,EAAE+I,OAAO,CAAC/I;AADqC,GAAhC,CAAvB;AAIA,QAAMP,MAAY,GAAG;AACnBE,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE,KADC;AAEXZ,MAAAA,IAAI,EAAEqD;AAFK,KADM;AAKnBnD,IAAAA,IAAI,EAAEb,UAAU,CAAC0K,OAAO,CAACC,YAAT;AALG,GAArB;AAQAxJ,EAAAA,UAAU,GAAGD,aAAa,CAACC,UAAD,EAAaC,MAAb,CAA1B;AACAD,EAAAA,UAAU,GAAGO,cAAc,CAACP,UAAD,EAAauJ,OAAO,CAAC/I,MAArB,CAA3B;AACAR,EAAAA,UAAU,GAAG,MAAMwB,UAAU,CAC3BxB,UAD2B,EAE3BuJ,OAAO,CAAC9H,QAFmB,EAG3B8H,OAAO,CAAC/I,MAHmB,EAI3B+I,OAAO,CAAC7H,OAJmB,CAA7B;AAOA,QAAM6G,YAAY,GAAGM,eAAe,CAAC7I,UAAD,EAAa,CAAb,CAApC;AAEA,SAAO;AACLA,IAAAA,UADK;AAELuI,IAAAA;AAFK,GAAP;AAID;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,eAAekB,0BAAf,CACLF,OADK,EAEwB;AAC7BJ,EAAAA,cAAc,CAACI,OAAO,CAAC9H,QAAT,EAAmB;AAAEjB,IAAAA,MAAM,EAAE+I,OAAO,CAAC/I;AAAlB,GAAnB,CAAd;AAEA,MAAIR,UAAU,GAAG,kCAAoB;AAAEV,IAAAA,YAAY,EAAEiK,OAAO,CAACjK;AAAxB,GAApB,CAAjB;AACA,QAAM;AAAEuD,IAAAA;AAAF,MAAiB,8BAAc0G,OAAO,CAAC9H,QAAtB,EAAgC;AACrDjB,IAAAA,MAAM,EAAE+I,OAAO,CAAC/I;AADqC,GAAhC,CAAvB;AAIA,QAAM,CAACkJ,QAAD,IAAa,MAAMtK,eAAe,CAACyD,UAAD,EAAa0G,OAAO,CAACjK,YAArB,CAAxC;AACA,MAAI,CAACoK,QAAL,EAAe,MAAM,IAAI1I,KAAJ,CAAW,6BAAX,CAAN;;AAEf,QAAM2I,MAAM,GAAG1C,YAAM2C,oBAAN,CACb;AAAEC,IAAAA,eAAe,EAAEH,QAAQ,CAACzI,SAA5B;AAAwC6I,IAAAA,KAAK,EAAE;AAA/C,GADa,EAEb,KAFa,CAAf;;AAIA,QAAM7J,MAAY,GAAG;AACnBE,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE,KADC;AAEXZ,MAAAA,IAAI,EAAEqD,UAFK;AAGXpD,MAAAA,IAAI,EAAEkK;AAHK,KADM;AAMnBjK,IAAAA,IAAI,EAAEb,UAAU,CAAC0K,OAAO,CAACC,YAAT;AANG,GAArB;AASAxJ,EAAAA,UAAU,GAAGD,aAAa,CAACC,UAAD,EAAaC,MAAb,CAA1B;AACAD,EAAAA,UAAU,GAAGO,cAAc,CAACP,UAAD,EAAauJ,OAAO,CAAC/I,MAArB,CAA3B;AACAR,EAAAA,UAAU,GAAG,MAAMwB,UAAU,CAC3BxB,UAD2B,EAE3BuJ,OAAO,CAAC9H,QAFmB,EAG3B8H,OAAO,CAAC/I,MAHmB,EAI3B+I,OAAO,CAAC7H,OAJmB,CAA7B;AAOA,QAAM6G,YAAY,GAAGM,eAAe,CAAC7I,UAAD,EAAa,CAAb,CAApC;AAEA,SAAO;AACLA,IAAAA,UADK;AAELuI,IAAAA,YAFK;AAGLoB,IAAAA;AAHK,GAAP;AAKD;;AAEM,eAAeI,2BAAf,CACLR,OADK,EAEkB;AACvBJ,EAAAA,cAAc,CAACI,OAAO,CAAC9H,QAAT,EAAmB;AAAEjB,IAAAA,MAAM,EAAE+I,OAAO,CAAC/I;AAAlB,GAAnB,CAAd;AAEA,MAAIR,UAAU,GAAG,kCAAoB;AAAEV,IAAAA,YAAY,EAAEiK,OAAO,CAACjK;AAAxB,GAApB,CAAjB;AACA,QAAM;AAAEuD,IAAAA;AAAF,MAAiB,8BAAc0G,OAAO,CAAC9H,QAAtB,EAAgC;AACrDjB,IAAAA,MAAM,EAAE+I,OAAO,CAAC/I;AADqC,GAAhC,CAAvB;AAIA,QAAMjB,SAAS,GAAGgK,OAAO,CAACjK,YAAR,CAAqBC,SAArB,CAA+B;AAAEE,IAAAA,IAAI,EAAE8J,OAAO,CAACI;AAAhB,GAA/B,CAAlB;AACA,QAAMhK,KAAa,GAAG,EAAtB;;AACA,aAAW,MAAMC,IAAjB,IAAyBL,SAAS,CAACM,OAAV,EAAzB,EAA8C;AAC5CF,IAAAA,KAAK,CAACG,IAAN,CAAWF,IAAX;AACD;;AACD,MAAID,KAAK,CAACV,MAAN,KAAiB,CAArB,EAAwB,MAAM,IAAI+B,KAAJ,CAAU,wBAAV,CAAN;AAExB,QAAMgJ,YAAY,GAAGrK,KAAK,CAAC,CAAD,CAA1B;AACAK,EAAAA,UAAU,GAAGA,UAAU,CAACK,MAAX,CAAkB,QAAlB,EAA6BqD,MAAD,IAAY;AACnD,WAAOA,MAAM,CAAC5D,IAAP,CAAYkK,YAAZ,CAAP;AACD,GAFY,CAAb;AAIA,QAAM/J,MAAY,GAAG;AACnBE,IAAAA,WAAW,EAAE;AACXC,MAAAA,QAAQ,EAAE,KADC;AAEXZ,MAAAA,IAAI,EAAEqD,UAFK;AAGXpD,MAAAA,IAAI,EAAE8J,OAAO,CAACI;AAHH,KADM;AAMnBjK,IAAAA,IAAI,EAAEb,UAAU,CAAC0K,OAAO,CAACC,YAAT;AANG,GAArB;AASAxJ,EAAAA,UAAU,GAAGD,aAAa,CAACC,UAAD,EAAaC,MAAb,CAA1B;AACAD,EAAAA,UAAU,GAAGO,cAAc,CAACP,UAAD,EAAauJ,OAAO,CAAC/I,MAArB,CAA3B;AACAR,EAAAA,UAAU,GAAG,MAAMwB,UAAU,CAC3BxB,UAD2B,EAE3BuJ,OAAO,CAAC9H,QAFmB,EAG3B8H,OAAO,CAAC/I,MAHmB,EAI3B+I,OAAO,CAAC7H,OAJmB,CAA7B;AAOA,QAAM6G,YAAY,GAAGM,eAAe,CAAC7I,UAAD,EAAa,CAAb,CAApC;AAEA,SAAO;AACLA,IAAAA,UADK;AAELuI,IAAAA;AAFK,GAAP;AAID;;AAEM,eAAe0B,kCAAf,CACLT,YADK,EAELjC,QAFK,EAGLC,GAHK,EAIa;AAClB,QAAM0C,SAAS,GAAGrD,sBAAsB,CAAC2C,YAAD,CAAxC;AACA,QAAMW,WAAW,GAAG,MAAM7C,WAAW,CAACC,QAAD,EAAWC,GAAX,CAArC;AACA,SAAO0C,SAAS,KAAKC,WAArB;AACD;;eAEc;AACbb,EAAAA,wBADa;AAEbG,EAAAA,0BAFa;AAGbM,EAAAA,2BAHa;AAIbE,EAAAA,kCAJa;AAKbG,EAAAA,SAAS,EAAE;AACTtE,IAAAA;AADS;AALE,C","sourcesContent":["import {\n  Script,\n  OutPoint,\n  CellProvider,\n  Cell,\n  utils,\n  values,\n  core,\n  WitnessArgs,\n  Transaction,\n} from \"@ckb-lumos/base\";\nimport { SerializeTransaction } from \"@ckb-lumos/base/lib/core\";\nimport { getConfig, Config, helpers } from \"@ckb-lumos/config-manager\";\nimport {\n  TransactionSkeletonType,\n  TransactionSkeleton,\n  Options,\n  createTransactionFromSkeleton,\n  parseAddress,\n  minimalCellCapacityCompatible,\n} from \"@ckb-lumos/helpers\";\nimport { Reader, normalizers } from \"@ckb-lumos/toolkit\";\nimport { RPC } from \"@ckb-lumos/rpc\";\nimport { Set } from \"immutable\";\nimport { FromInfo, parseFromInfo, MultisigScript } from \"./from_info\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nconst { ScriptValue } = values;\n\nfunction bytesToHex(bytes: Uint8Array): string {\n  let res = \"0x\";\n  for (let i = 0; i < bytes.length; i++) {\n    res += bytes[i].toString(16).padStart(2, \"0\");\n  }\n  return res;\n}\n\nasync function findCellsByLock(\n  lockScript: Script,\n  cellProvider: CellProvider\n): Promise<Cell[]> {\n  const collector = cellProvider.collector({\n    lock: lockScript,\n    type: \"empty\",\n    data: \"0x\",\n  });\n  const cells: Cell[] = [];\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  return cells;\n}\n\nfunction updateOutputs(\n  txSkeleton: TransactionSkeletonType,\n  output: Cell\n): TransactionSkeletonType {\n  const cellCapacity = minimalCellCapacityCompatible(output);\n  output.cell_output.capacity = `0x${cellCapacity.toString(16)}`;\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(output);\n  });\n\n  return txSkeleton;\n}\n\nfunction updateCellDeps(\n  txSkeleton: TransactionSkeletonType,\n  config?: Config\n): TransactionSkeletonType {\n  txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) => {\n    return cellDeps.clear();\n  });\n  config = config || getConfig();\n  const secp256k1Config = config.SCRIPTS.SECP256K1_BLAKE160;\n  const secp256k1MultiSigConfig = config.SCRIPTS.SECP256K1_BLAKE160_MULTISIG;\n  if (!secp256k1Config || !secp256k1MultiSigConfig) {\n    throw new Error(\n      \"Provided config does not have SECP256K1_BLAKE160 or SECP256K1_BLAKE160_MULTISIG script setup!\"\n    );\n  }\n  txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) => {\n    return cellDeps.push(\n      {\n        out_point: {\n          tx_hash: secp256k1Config.TX_HASH,\n          index: secp256k1Config.INDEX,\n        },\n        dep_type: secp256k1Config.DEP_TYPE,\n      },\n      // TODO: optimize me, push dep directly without checking actual locks used would cause bigger tx\n      {\n        out_point: {\n          tx_hash: secp256k1MultiSigConfig.TX_HASH,\n          index: secp256k1MultiSigConfig.INDEX,\n        },\n        dep_type: secp256k1MultiSigConfig.DEP_TYPE,\n      }\n    );\n  });\n\n  return txSkeleton;\n}\n\nasync function completeTx(\n  txSkeleton: TransactionSkeletonType,\n  fromInfo: FromInfo,\n  config?: Config,\n  feeRate?: BIish\n): Promise<TransactionSkeletonType> {\n  const inputCapacity = txSkeleton\n    .get(\"inputs\")\n    .map((c) => BI.from(c.cell_output.capacity))\n    .reduce((a, b) => a.add(b), BI.from(0));\n  const outputCapacity = txSkeleton\n    .get(\"outputs\")\n    .map((c) => BI.from(c.cell_output.capacity))\n    .reduce((a, b) => a.add(b), BI.from(0));\n  const needCapacity = outputCapacity.sub(inputCapacity);\n  txSkeleton = await injectCapacity(\n    txSkeleton,\n    fromInfo,\n    BI.from(needCapacity),\n    {\n      config: config,\n      feeRate: feeRate,\n    }\n  );\n  return txSkeleton;\n}\n\nasync function injectCapacity(\n  txSkeleton: TransactionSkeletonType,\n  fromInfo: FromInfo,\n  amount: BIish,\n  {\n    config = undefined,\n    feeRate = undefined,\n  }: { config?: Config; feeRate?: BIish }\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const _feeRate = feeRate || 1000;\n  let _amount = BI.from(amount);\n  const { fromScript, multisigScript } = parseFromInfo(fromInfo, { config });\n  _amount = _amount.add(BI.from(10).pow(8));\n  let changeCapacity = BI.from(10).pow(8);\n  const changeCell: Cell = {\n    cell_output: {\n      capacity: \"0x0\",\n      lock: fromScript,\n      type: undefined,\n    },\n    data: \"0x\",\n  };\n  const minimalChangeCapacity: BI = BI.from(\n    minimalCellCapacityCompatible(changeCell)\n  ).add(BI.from(10).pow(8));\n\n  if (_amount.lt(0)) {\n    changeCapacity = changeCapacity.sub(_amount);\n    _amount = BI.from(0);\n  }\n  if (_amount.gt(0) || changeCapacity.lt(minimalChangeCapacity)) {\n    const cellProvider = txSkeleton.get(\"cellProvider\");\n    if (!cellProvider) throw new Error(\"Cell provider is missing!\");\n    const cellCollector = cellProvider.collector({\n      lock: fromScript,\n      type: \"empty\",\n      data: \"0x\",\n    });\n\n    let previousInputs = Set<string>();\n    for (const input of txSkeleton.get(\"inputs\")) {\n      previousInputs = previousInputs.add(\n        `${input.out_point!.tx_hash}_${input.out_point!.index}`\n      );\n    }\n\n    for await (const inputCell of cellCollector.collect()) {\n      if (\n        previousInputs.has(\n          `${inputCell.out_point!.tx_hash}_${inputCell.out_point!.index}`\n        )\n      )\n        continue;\n      txSkeleton = txSkeleton.update(\"inputs\", (inputs) =>\n        inputs.push(inputCell)\n      );\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n      const inputCapacity = BI.from(inputCell.cell_output.capacity);\n      let deductCapacity = inputCapacity;\n      if (deductCapacity.gt(_amount)) {\n        deductCapacity = _amount;\n      }\n      _amount = _amount.sub(deductCapacity);\n      changeCapacity = changeCapacity.add(inputCapacity).sub(deductCapacity);\n      if (\n        _amount.eq(0) &&\n        (changeCapacity.eq(0) || changeCapacity.gte(minimalChangeCapacity))\n      )\n        break;\n    }\n  }\n\n  if (changeCapacity.gt(0)) {\n    changeCell.cell_output.capacity = \"0x\" + changeCapacity.toString(16);\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) =>\n      outputs.push(changeCell)\n    );\n  }\n  if (_amount.gt(0) || changeCapacity.lt(minimalChangeCapacity))\n    throw new Error(\"Not enough capacity in from address!\");\n\n  /*\n   * Modify the skeleton, so the first witness of the fromAddress script group\n   * has a WitnessArgs construct with 65-byte zero filled values. While this\n   * is not required, it helps in transaction fee estimation.\n   */\n  const firstIndex = txSkeleton\n    .get(\"inputs\")\n    .findIndex((input) =>\n      new ScriptValue(input.cell_output.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    );\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n    }\n    let witness: string = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n    let newWitnessArgs: WitnessArgs;\n    const SECP_SIGNATURE_PLACEHOLDER =\n      \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n\n    if (typeof fromInfo !== \"string\") {\n      newWitnessArgs = {\n        lock:\n          \"0x\" +\n          multisigScript!.slice(2) +\n          SECP_SIGNATURE_PLACEHOLDER.slice(2).repeat(\n            (fromInfo as MultisigScript).M\n          ),\n      };\n    } else {\n      newWitnessArgs = { lock: SECP_SIGNATURE_PLACEHOLDER };\n    }\n\n    if (witness !== \"0x\") {\n      const witnessArgs = new core.WitnessArgs(new Reader(witness));\n      const lock = witnessArgs.getLock();\n      if (\n        lock.hasValue() &&\n        new Reader(lock.value().raw()).serializeJson() !== newWitnessArgs.lock\n      ) {\n        throw new Error(\n          \"Lock field in first witness is set aside for signature!\"\n        );\n      }\n      const inputType = witnessArgs.getInputType();\n      if (inputType.hasValue()) {\n        newWitnessArgs.input_type = new Reader(\n          inputType.value().raw()\n        ).serializeJson();\n      }\n      const outputType = witnessArgs.getOutputType();\n      if (outputType.hasValue()) {\n        newWitnessArgs.output_type = new Reader(\n          outputType.value().raw()\n        ).serializeJson();\n      }\n    }\n    witness = new Reader(\n      core.SerializeWitnessArgs(\n        normalizers.NormalizeWitnessArgs(newWitnessArgs)\n      )\n    ).serializeJson();\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.set(firstIndex, witness)\n    );\n  }\n\n  const txFee = calculateTxFee(txSkeleton, _feeRate);\n  changeCapacity = changeCapacity.sub(txFee);\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.pop();\n  });\n  if (changeCapacity.gt(0)) {\n    changeCell.cell_output.capacity = \"0x\" + changeCapacity.toString(16);\n    txSkeleton = txSkeleton.update(\"outputs\", (outputs) =>\n      outputs.push(changeCell)\n    );\n  }\n\n  return txSkeleton;\n}\n\nfunction getTransactionSize(txSkeleton: TransactionSkeletonType): number {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  return getTransactionSizeByTx(tx);\n}\n\nfunction getTransactionSizeByTx(tx: Transaction): number {\n  const serializedTx = SerializeTransaction(\n    normalizers.NormalizeTransaction(tx)\n  );\n  // 4 is serialized offset bytesize\n  const size = serializedTx.byteLength + 4;\n  return size;\n}\n\nfunction calculateFee(size: number, feeRate: BIish): BI {\n  const ratio = BI.from(1000);\n  const base = BI.from(size).mul(feeRate);\n  const fee = base.div(ratio);\n\n  if (fee.mul(ratio).lt(base)) {\n    return fee.add(1);\n  }\n  return BI.from(fee);\n}\n\nfunction calculateTxFee(\n  txSkeleton: TransactionSkeletonType,\n  feeRate: BIish\n): BI {\n  const txSize = getTransactionSize(txSkeleton);\n  return BI.from(calculateFee(txSize, feeRate));\n}\n\nfunction calculateCodeHashByBin(scriptBin: Uint8Array): string {\n  const bin = scriptBin.valueOf();\n  return new utils.CKBHasher()\n    .update(bin.buffer.slice(bin.byteOffset, bin.byteLength + bin.byteOffset))\n    .digestHex();\n}\n\nasync function getDataHash(outPoint: OutPoint, rpc: RPC): Promise<string> {\n  const txHash = outPoint.tx_hash;\n  const index = parseInt(outPoint.index, 10);\n  const tx = await rpc.get_transaction(txHash);\n\n  if (!tx) throw new Error(`TxHash(${txHash}) is not found`);\n\n  const outputData = tx.transaction.outputs_data[index];\n  if (!outputData) throw new Error(`cannot find output data`);\n\n  return new utils.CKBHasher().update(new Reader(outputData)).digestHex();\n}\n\ninterface ScriptConfig {\n  // if hash_type is type, code_hash is ckbHash(type_script)\n  // if hash_type is data, code_hash is ckbHash(data)\n  CODE_HASH: string;\n\n  HASH_TYPE: \"type\" | \"data\";\n\n  TX_HASH: string;\n  // the deploy cell can be found at index of tx's outputs\n  INDEX: string;\n\n  // now deployWithX only supportted `code `\n  DEP_TYPE: \"dep_group\" | \"code\";\n\n  // empty\n  SHORT_ID?: number;\n}\n\nfunction calculateTxHash(txSkeleton: TransactionSkeletonType): string {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  const txHash = utils\n    .ckbHash(\n      core.SerializeRawTransaction(normalizers.NormalizeRawTransaction(tx))\n    )\n    .serializeJson();\n  return txHash;\n}\n\nfunction getScriptConfigByDataHash(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number\n): ScriptConfig {\n  const data = txSkeleton.outputs.get(outputIndex)!.data;\n  const codeHash = utils\n    .ckbHash(new Reader(data).toArrayBuffer())\n    .serializeJson();\n  const txHash = calculateTxHash(txSkeleton);\n  const scriptConfig: ScriptConfig = {\n    CODE_HASH: codeHash,\n    HASH_TYPE: \"data\",\n    TX_HASH: txHash,\n    INDEX: \"0x0\",\n    DEP_TYPE: \"code\",\n  };\n  return scriptConfig;\n}\n\nfunction getScriptConfigByTypeHash(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number\n): ScriptConfig {\n  const typeScript = txSkeleton.outputs.get(outputIndex)!.cell_output.type!;\n  const codeHash = utils.computeScriptHash(typeScript);\n  const txHash = calculateTxHash(txSkeleton);\n  const scriptConfig: ScriptConfig = {\n    CODE_HASH: codeHash,\n    HASH_TYPE: \"type\",\n    TX_HASH: txHash,\n    INDEX: \"0x0\",\n    DEP_TYPE: \"code\",\n  };\n  return scriptConfig;\n}\n\nfunction getScriptConfig(\n  txSkeleton: TransactionSkeletonType,\n  outputIndex: number\n): ScriptConfig {\n  const outputCell = txSkeleton.outputs.get(outputIndex);\n  if (outputCell == undefined)\n    throw new Error(\"Invalid txSkeleton or outputIndex\");\n  const type = outputCell.cell_output.type;\n  if (type !== undefined)\n    return getScriptConfigByTypeHash(txSkeleton, outputIndex);\n  return getScriptConfigByDataHash(txSkeleton, outputIndex);\n}\n\nfunction isMultisigFromInfo(fromInfo: FromInfo): fromInfo is MultisigScript {\n  if (typeof fromInfo !== \"object\") return false;\n  return (\n    \"M\" in fromInfo &&\n    \"R\" in fromInfo &&\n    Array.isArray(fromInfo.publicKeyHashes)\n  );\n}\n\nfunction verifyFromInfo(\n  fromInfo: FromInfo,\n  { config = undefined }: Options = {}\n): void {\n  config = config || getConfig();\n  if (typeof fromInfo === \"string\") {\n    if (\n      helpers.nameOfScript(\n        parseAddress(fromInfo, { config }),\n        config.SCRIPTS\n      ) !== \"SECP256K1_BLAKE160\"\n    )\n      throw new Error(\n        \"only SECP256K1_BLAKE160 or SECP256K1_MULTISIG is supported\"\n      );\n  } else if (!isMultisigFromInfo(fromInfo)) {\n    throw new Error(\n      \"only SECP256K1_BLAKE160 or SECP256K1_MULTISIG is supported\"\n    );\n  }\n}\n\ninterface DeployOptions {\n  cellProvider: CellProvider;\n  scriptBinary: Uint8Array;\n  fromInfo: FromInfo;\n  config?: Config;\n  feeRate?: bigint;\n}\n\ninterface UpgradeOptions extends DeployOptions {\n  typeId: Script;\n}\n\ninterface DeployResult {\n  txSkeleton: TransactionSkeletonType;\n  scriptConfig: ScriptConfig;\n}\n\ninterface TypeIDDeployResult extends DeployResult {\n  typeId: Script;\n}\n\n/**\n * Generate txSkeleton for writing binary data to CKB, usually for deploying contracts.\n * This generator only supports `SECP256K1_BLAKE160` and `SECP256K1_BLAKE160_MULTISIG` currently.\n *\n * @param options\n */\nexport async function generateDeployWithDataTx(\n  options: DeployOptions\n): Promise<DeployResult> {\n  verifyFromInfo(options.fromInfo, { config: options.config });\n\n  let txSkeleton = TransactionSkeleton({ cellProvider: options.cellProvider });\n  const { fromScript } = parseFromInfo(options.fromInfo, {\n    config: options.config,\n  });\n\n  const output: Cell = {\n    cell_output: {\n      capacity: \"0x0\",\n      lock: fromScript,\n    },\n    data: bytesToHex(options.scriptBinary),\n  };\n\n  txSkeleton = updateOutputs(txSkeleton, output);\n  txSkeleton = updateCellDeps(txSkeleton, options.config);\n  txSkeleton = await completeTx(\n    txSkeleton,\n    options.fromInfo,\n    options.config,\n    options.feeRate\n  );\n\n  const scriptConfig = getScriptConfig(txSkeleton, 0);\n\n  return {\n    txSkeleton,\n    scriptConfig,\n  };\n}\n\n/**\n * Generate txSkeleton for writing binary data to CKB via Type ID, usually for deploying contracts.\n * Deploying via Type ID makes it possible to upgrade contract, for more information about Type ID, please check: https://xuejie.space/2020_02_03_introduction_to_ckb_script_programming_type_id/\n * This generator only supports `SECP256K1_BLAKE160` and `SECP256K1_BLAKE160_MULTISIG` currently.\n *\n * @param options\n */\nexport async function generateDeployWithTypeIdTx(\n  options: DeployOptions\n): Promise<TypeIDDeployResult> {\n  verifyFromInfo(options.fromInfo, { config: options.config });\n\n  let txSkeleton = TransactionSkeleton({ cellProvider: options.cellProvider });\n  const { fromScript } = parseFromInfo(options.fromInfo, {\n    config: options.config,\n  });\n\n  const [resolved] = await findCellsByLock(fromScript, options.cellProvider);\n  if (!resolved) throw new Error(`fromAddress has no live ckb`);\n\n  const typeId = utils.generateTypeIdScript(\n    { previous_output: resolved.out_point!, since: \"0x0\" },\n    \"0x0\"\n  );\n  const output: Cell = {\n    cell_output: {\n      capacity: \"0x0\",\n      lock: fromScript,\n      type: typeId,\n    },\n    data: bytesToHex(options.scriptBinary),\n  };\n\n  txSkeleton = updateOutputs(txSkeleton, output);\n  txSkeleton = updateCellDeps(txSkeleton, options.config);\n  txSkeleton = await completeTx(\n    txSkeleton,\n    options.fromInfo,\n    options.config,\n    options.feeRate\n  );\n\n  const scriptConfig = getScriptConfig(txSkeleton, 0);\n\n  return {\n    txSkeleton,\n    scriptConfig,\n    typeId,\n  };\n}\n\nexport async function generateUpgradeTypeIdDataTx(\n  options: UpgradeOptions\n): Promise<DeployResult> {\n  verifyFromInfo(options.fromInfo, { config: options.config });\n\n  let txSkeleton = TransactionSkeleton({ cellProvider: options.cellProvider });\n  const { fromScript } = parseFromInfo(options.fromInfo, {\n    config: options.config,\n  });\n\n  const collector = options.cellProvider.collector({ type: options.typeId });\n  const cells: Cell[] = [];\n  for await (const cell of collector.collect()) {\n    cells.push(cell);\n  }\n  if (cells.length !== 1) throw new Error(\"the typeid maybe wrong\");\n\n  const deployedCell = cells[0];\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n    return inputs.push(deployedCell);\n  });\n\n  const output: Cell = {\n    cell_output: {\n      capacity: \"0x0\",\n      lock: fromScript,\n      type: options.typeId,\n    },\n    data: bytesToHex(options.scriptBinary),\n  };\n\n  txSkeleton = updateOutputs(txSkeleton, output);\n  txSkeleton = updateCellDeps(txSkeleton, options.config);\n  txSkeleton = await completeTx(\n    txSkeleton,\n    options.fromInfo,\n    options.config,\n    options.feeRate\n  );\n\n  const scriptConfig = getScriptConfig(txSkeleton, 0);\n\n  return {\n    txSkeleton,\n    scriptConfig,\n  };\n}\n\nexport async function compareScriptBinaryWithOnChainData(\n  scriptBinary: Uint8Array,\n  outPoint: OutPoint,\n  rpc: RPC\n): Promise<boolean> {\n  const localHash = calculateCodeHashByBin(scriptBinary);\n  const onChainHash = await getDataHash(outPoint, rpc);\n  return localHash === onChainHash;\n}\n\nexport default {\n  generateDeployWithDataTx,\n  generateDeployWithTypeIdTx,\n  generateUpgradeTypeIdDataTx,\n  compareScriptBinaryWithOnChainData,\n  __tests__: {\n    calculateTxFee,\n  },\n};\n"],"file":"deploy.js"}