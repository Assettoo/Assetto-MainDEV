{"ast":null,"code":"var _jsxFileName = \"/Users/pranjilpathak/Downloads/Asseto/src/components/SingleCertificate.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport { useForm, useWatch } from \"react-hook-form\";\nimport { Web3Context } from \"../context/Web3Context\";\nimport { upload } from \"../utils/crypt\";\nimport Modal from \"./CreateModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst con = {\n  required: {\n    value: true,\n    message: \"This field is Required\"\n  },\n  minLength: {\n    value: 3,\n    message: \"At least 3 characters required\"\n  }\n};\n\nconst SingleCertificate = () => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    control,\n    formState: {\n      errors\n    },\n    getValues\n  } = useForm();\n  const {\n    contract,\n    accountAddress\n  } = useContext(Web3Context);\n  const [modalData, setModalData] = useState({\n    mode: \"closed\"\n  });\n\n  const onSubmit = async data => {\n    if (accountAddress) {\n      setModalData({\n        mode: \"loading\"\n      });\n      const {\n        ipfsHash,\n        certkey\n      } = await upload(data);\n      const expDate = getValues(\"ExpirationDate\") ? Math.floor(new Date(getValues(\"ExpirationDate\")).getTime() / 1000) : 0;\n      await contract.methods.generateCert(ipfsHash.toString(), expDate, ipfsHash.toString()).send({\n        from: accountAddress\n      }).on(\"transactionHash\", function (hash) {\n        console.log(hash);\n      }).on(\"receipt\", function (receipt) {\n        setModalData({\n          mode: \"display\",\n          data: {\n            ipfsHash,\n            certkey\n          },\n          receipt: receipt\n        });\n      }).on(\"error\", function (error) {\n        console.log(error);\n        window.alert(error.message);\n        setModalData(\"closed\");\n      });\n    } else {\n      window.alert(\"Please Connect Wallet First\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"single\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      modalData: modalData,\n      setModalData: setModalData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"txt\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Issue Certificates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Issue RECEIPT CERTIFICATE with the form manually or import CSV files. Fill out the adjacent form and create a new Receipt Certificate.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Pay minimal transaction fee and get a copy of the Receipt Certificate Hash.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Refer to the CSV file format below before importing data.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Code, {\n        control: control\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        name: \"BeneficiaryName\",\n        label: \"Beneficiary Name\",\n        type: \"text\",\n        conditions: con,\n        register: register,\n        errors: errors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        name: \"CertificateDescription\",\n        label: \"Certificate Description\",\n        type: \"text\",\n        conditions: con,\n        register: register,\n        errors: errors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        name: \"ExpirationDate\",\n        label: \"Expiration Date\",\n        type: \"date\",\n        register: register,\n        errors: errors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        name: \"InstituteAuthorityName\",\n        label: \"Institute/ Authority Name\",\n        type: \"text\",\n        conditions: con,\n        register: register,\n        errors: errors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"item\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Additional Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 6\n        }, this), errors[\"Additional Notes\"] && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"AdditionalNotes\",\n          label: \"Additional Notes\",\n          type: \"textarea\",\n          ...register(\"AdditionalNotes\", {\n            min: 3\n          }),\n          errors: errors\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Issue Certificate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SingleCertificate, \"PvbEbmWA2wiwNUhqpiLRTrGc3PI=\", false, function () {\n  return [useForm];\n});\n\n_c = SingleCertificate;\n\nconst Code = _ref => {\n  _s2();\n\n  let {\n    control\n  } = _ref;\n  const watchedAllFields = useWatch({\n    control\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Certificate JSON\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(watchedAllFields, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 3\n  }, this);\n};\n\n_s2(Code, \"ErC3RlJmUwroDXwsHjXdfoH/OAk=\", false, function () {\n  return [useWatch];\n});\n\n_c2 = Code;\n\nconst Input = _ref2 => {\n  var _errors$name;\n\n  let {\n    name,\n    label,\n    type,\n    register,\n    conditions,\n    errors,\n    value\n  } = _ref2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 3\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"error\",\n      children: errors[name] && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: (_errors$name = errors[name]) === null || _errors$name === void 0 ? void 0 : _errors$name.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register(name, conditions),\n      type: type,\n      name: name,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 2\n  }, this);\n};\n\n_c3 = Input;\nexport default SingleCertificate;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SingleCertificate\");\n$RefreshReg$(_c2, \"Code\");\n$RefreshReg$(_c3, \"Input\");","map":{"version":3,"sources":["/Users/pranjilpathak/Downloads/Asseto/src/components/SingleCertificate.jsx"],"names":["useContext","useState","useForm","useWatch","Web3Context","upload","Modal","con","required","value","message","minLength","SingleCertificate","register","handleSubmit","control","formState","errors","getValues","contract","accountAddress","modalData","setModalData","mode","onSubmit","data","ipfsHash","certkey","expDate","Math","floor","Date","getTime","methods","generateCert","toString","send","from","on","hash","console","log","receipt","error","window","alert","min","Code","watchedAllFields","JSON","stringify","Input","name","label","type","conditions"],"mappings":"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","sourcesContent":["import { useContext, useState } from \"react\";\nimport { useForm, useWatch } from \"react-hook-form\";\nimport { Web3Context } from \"../context/Web3Context\";\nimport { upload } from \"../utils/crypt\";\nimport Modal from \"./CreateModal\";\n\nconst con = {\n\trequired: { value: true, message: \"This field is Required\" },\n\tminLength: { value: 3, message: \"At least 3 characters required\" },\n};\n\nconst SingleCertificate = () => {\n\tconst {\n\t\tregister,\n\t\thandleSubmit,\n\t\tcontrol,\n\t\tformState: { errors },\n\t\tgetValues,\n\t} = useForm();\n\n\tconst { contract, accountAddress } = useContext(Web3Context);\n\n\tconst [modalData, setModalData] = useState({ mode: \"closed\" });\n\n\tconst onSubmit = async (data) => {\n\t\tif (accountAddress) {\n\t\t\tsetModalData({ mode: \"loading\" });\n\t\t\tconst { ipfsHash, certkey } = await upload(data);\n\n\t\t\tconst expDate = getValues(\"ExpirationDate\")\n\t\t\t\t? Math.floor(new Date(getValues(\"ExpirationDate\")).getTime() / 1000)\n\t\t\t\t: 0;\n\n\t\t\t await contract.methods\n\t\t\t\t.generateCert(ipfsHash.toString(), expDate, ipfsHash.toString())\n\t\t\t\t.send({ from: accountAddress })\n\n\t\t\t\t.on(\"transactionHash\", function (hash) {\n\t\t\t\t\tconsole.log(hash);\n\t\t\t\t})\n\n\t\t\t\t.on(\"receipt\", function (receipt) {\n\t\t\t\t\tsetModalData({\n\t\t\t\t\t\tmode: \"display\",\n\t\t\t\t\t\tdata: { ipfsHash, certkey },\n\t\t\t\t\t\treceipt: receipt,\n\t\t\t\t\t});\n\t\t\t\t})\n\n\t\t\t\t.on(\"error\", function (error) {\n\t\t\t\t\tconsole.log(error);\n\t\t\t\t\twindow.alert(error.message);\n\t\t\t\t\tsetModalData(\"closed\");\n\t\t\t\t});\n\t\t} else {\n\t\t\twindow.alert(\"Please Connect Wallet First\");\n\t\t}\n\t};\n\n\treturn (\n\t\t<div className=\"single\">\n\t\t\t<Modal modalData={modalData} setModalData={setModalData} />\n\t\t\t<div className=\"txt\">\n\t\t\t\t<h2>Issue Certificates</h2>\n\t\t\t\t<div className=\"inner\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\tIssue RECEIPT CERTIFICATE with the form manually or import CSV files. Fill\n\t\t\t\t\t\tout the adjacent form and create a new Receipt Certificate.\n\t\t\t\t\t</span>\n\t\t\t\t\t<span>\n\t\t\t\t\t\tPay minimal transaction fee and get a copy of the Receipt Certificate Hash.\n\t\t\t\t\t</span>\n\t\t\t\t\t<span>Refer to the CSV file format below before importing data.</span>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\t\t\t\t<Code control={control} />\n\t\t\t</div>\n\t\t\t<form onSubmit={handleSubmit(onSubmit)}>\n\t\t\t\t<Input\n\t\t\t\t\tname=\"BeneficiaryName\"\n\t\t\t\t\tlabel=\"Beneficiary Name\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tconditions={con}\n\t\t\t\t\tregister={register}\n\t\t\t\t\terrors={errors}\n\t\t\t\t/>\n\t\t\t\t<Input\n\t\t\t\t\tname=\"CertificateDescription\"\n\t\t\t\t\tlabel=\"Certificate Description\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tconditions={con}\n\t\t\t\t\tregister={register}\n\t\t\t\t\terrors={errors}\n\t\t\t\t/>\n\t\t\t\t<Input\n\t\t\t\t\tname=\"ExpirationDate\"\n\t\t\t\t\tlabel=\"Expiration Date\"\n\t\t\t\t\ttype=\"date\"\n\t\t\t\t\tregister={register}\n\t\t\t\t\terrors={errors}\n\t\t\t\t/>\n\t\t\t\t<Input\n\t\t\t\t\tname=\"InstituteAuthorityName\"\n\t\t\t\t\tlabel=\"Institute/ Authority Name\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tconditions={con}\n\t\t\t\t\tregister={register}\n\t\t\t\t\terrors={errors}\n\t\t\t\t/>\n\t\t\t\t<div className=\"item\">\n\t\t\t\t\t<label>Additional Notes</label>\n\t\t\t\t\t{errors[\"Additional Notes\"] && <span>Error</span>}\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tname=\"AdditionalNotes\"\n\t\t\t\t\t\tlabel=\"Additional Notes\"\n\t\t\t\t\t\ttype=\"textarea\"\n\t\t\t\t\t\t{...register(\"AdditionalNotes\", { min: 3 })}\n\t\t\t\t\t\terrors={errors}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<input type=\"submit\" value=\"Issue Certificate\" />\n\t\t\t</form>\n\t\t</div>\n\t);\n};\n\nconst Code = ({ control }) => {\n\tconst watchedAllFields = useWatch({ control });\n\treturn (\n\t\t<div className=\"code\">\n\t\t\t<span>Certificate JSON</span>\n\t\t\t<pre>{JSON.stringify(watchedAllFields, null, 2)}</pre>\n\t\t</div>\n\t);\n};\n\nconst Input = ({ name, label, type, register, conditions, errors, value }) => (\n\t<div className=\"item\">\n\t\t<label>{label}</label>{\" \"}\n\t\t<span className=\"error\">\n\t\t\t{errors[name] && <span>{errors[name]?.message}</span>}\n\t\t</span>\n\t\t<input\n\t\t\t{...register(name, conditions)}\n\t\t\ttype={type}\n\t\t\tname={name}\n\t\t\tvalue={value}\n\t\t/>\n\t</div>\n);\n\nexport default SingleCertificate;\n"]},"metadata":{},"sourceType":"module"}