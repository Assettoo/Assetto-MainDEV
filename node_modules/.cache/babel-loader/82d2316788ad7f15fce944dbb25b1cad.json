{"ast":null,"code":"const ipfs = require(\"nano-ipfs-store\").at(\"https://ipfs.infura.io:5001\");\n\nlet CryptoJS = require(\"crypto-js\");\n\nlet AES = CryptoJS.AES;\n\nasync function upload(data) {\n  const json = JSON.stringify(data);\n  const certkey = getRandomKey();\n  const encrypted = encrypt(json, certkey);\n  const ipfsHash = await ipfs.add(encrypted);\n  return {\n    ipfsHash,\n    certkey\n  };\n}\n\nfunction encrypt(data, key) {\n  return AES.encrypt(data, key).toString();\n}\n\nfunction getRandomKey() {\n  return (Math.random() + 1).toString(36).substring(3).toUpperCase();\n}\n\nfunction decrypt(data, key) {\n  const a = AES.decrypt(data, key).toString(CryptoJS.enc.Utf8); // console.log(a);\n\n  return a;\n}\n\nasync function retrieve(ipfshash, key) {\n  const data = await ipfs.cat(ipfshash);\n  return decrypt(data, key);\n}\n\nexport { upload, retrieve };","map":{"version":3,"sources":["/Users/pranjilpathak/Downloads/Asseto/src/utils/crypt.js"],"names":["ipfs","require","at","CryptoJS","AES","upload","data","json","JSON","stringify","certkey","getRandomKey","encrypted","encrypt","ipfsHash","add","key","toString","Math","random","substring","toUpperCase","decrypt","a","enc","Utf8","retrieve","ipfshash","cat"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,iBAAD,CAAP,CAA2BC,EAA3B,CAA8B,6BAA9B,CAAb;;AACA,IAAIC,QAAQ,GAAGF,OAAO,CAAC,WAAD,CAAtB;;AACA,IAAIG,GAAG,GAAGD,QAAQ,CAACC,GAAnB;;AAEA,eAAeC,MAAf,CAAsBC,IAAtB,EAA4B;AAC3B,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAb;AACA,QAAMI,OAAO,GAAGC,YAAY,EAA5B;AACA,QAAMC,SAAS,GAAGC,OAAO,CAACN,IAAD,EAAOG,OAAP,CAAzB;AACA,QAAMI,QAAQ,GAAG,MAAMd,IAAI,CAACe,GAAL,CAASH,SAAT,CAAvB;AACA,SAAO;AAAEE,IAAAA,QAAF;AAAYJ,IAAAA;AAAZ,GAAP;AACA;;AAED,SAASG,OAAT,CAAiBP,IAAjB,EAAuBU,GAAvB,EAA4B;AAC3B,SAAOZ,GAAG,CAACS,OAAJ,CAAYP,IAAZ,EAAkBU,GAAlB,EAAuBC,QAAvB,EAAP;AACA;;AAED,SAASN,YAAT,GAAwB;AACvB,SAAO,CAACO,IAAI,CAACC,MAAL,KAAgB,CAAjB,EAAoBF,QAApB,CAA6B,EAA7B,EAAiCG,SAAjC,CAA2C,CAA3C,EAA8CC,WAA9C,EAAP;AACA;;AAED,SAASC,OAAT,CAAiBhB,IAAjB,EAAuBU,GAAvB,EAA4B;AAC3B,QAAMO,CAAC,GAAGnB,GAAG,CAACkB,OAAJ,CAAYhB,IAAZ,EAAkBU,GAAlB,EAAuBC,QAAvB,CAAgCd,QAAQ,CAACqB,GAAT,CAAaC,IAA7C,CAAV,CAD2B,CAE3B;;AACA,SAAOF,CAAP;AACA;;AAED,eAAeG,QAAf,CAAwBC,QAAxB,EAAkCX,GAAlC,EAAuC;AACtC,QAAMV,IAAI,GAAG,MAAMN,IAAI,CAAC4B,GAAL,CAASD,QAAT,CAAnB;AACA,SAAOL,OAAO,CAAChB,IAAD,EAAOU,GAAP,CAAd;AACA;;AACD,SAASX,MAAT,EAAiBqB,QAAjB","sourcesContent":["const ipfs = require(\"nano-ipfs-store\").at(\"https://ipfs.infura.io:5001\");\nlet CryptoJS = require(\"crypto-js\");\nlet AES = CryptoJS.AES;\n\nasync function upload(data) {\n\tconst json = JSON.stringify(data);\n\tconst certkey = getRandomKey();\n\tconst encrypted = encrypt(json, certkey);\n\tconst ipfsHash = await ipfs.add(encrypted);\n\treturn { ipfsHash, certkey };\n}\n\nfunction encrypt(data, key) {\n\treturn AES.encrypt(data, key).toString();\n}\n\nfunction getRandomKey() {\n\treturn (Math.random() + 1).toString(36).substring(3).toUpperCase();\n}\n\nfunction decrypt(data, key) {\n\tconst a = AES.decrypt(data, key).toString(CryptoJS.enc.Utf8);\n\t// console.log(a);\n\treturn a;\n}\n\nasync function retrieve(ipfshash, key) {\n\tconst data = await ipfs.cat(ipfshash);\n\treturn decrypt(data, key);\n}\nexport { upload, retrieve };\n"]},"metadata":{},"sourceType":"module"}