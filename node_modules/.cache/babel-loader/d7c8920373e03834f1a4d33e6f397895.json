{"ast":null,"code":"function format(data) {\n  if (typeof data === \"string\") {\n    return new TextEncoder(\"utf-8\").encode(data);\n  } else {\n    return new Uint8Array(data);\n  }\n} // (Uint8Array | String) -> Promise HexString\n\n\nfunction sha256(data) {\n  var buffer = format(data);\n  return crypto.subtle.digest(\"SHA-256\", buffer).then(function (buffer) {\n    var hex = \"\";\n    var bytes = new Uint8Array(buffer);\n\n    for (var i = 0; i < bytes.length; ++i) {\n      var chr = bytes[i].toString(16);\n      hex += chr.length === 1 ? \"0\" + chr : chr;\n    }\n\n    return hex;\n  });\n}\n\nmodule.exports = sha256;","map":{"version":3,"sources":["/Users/pranjilpathak/Downloads/Asseto/node_modules/nano-sha256/browser-api.js"],"names":["format","data","TextEncoder","encode","Uint8Array","sha256","buffer","crypto","subtle","digest","then","hex","bytes","i","length","chr","toString","module","exports"],"mappings":"AAAA,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO,IAAIC,WAAJ,CAAgB,OAAhB,EAAyBC,MAAzB,CAAgCF,IAAhC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAIG,UAAJ,CAAeH,IAAf,CAAP;AACD;AACF,C,CAED;;;AACA,SAASI,MAAT,CAAgBJ,IAAhB,EAAsB;AACpB,MAAIK,MAAM,GAAGN,MAAM,CAACC,IAAD,CAAnB;AACA,SAAOM,MAAM,CAACC,MAAP,CACJC,MADI,CACG,SADH,EACcH,MADd,EAEJI,IAFI,CAEC,UAASJ,MAAT,EAAiB;AACrB,QAAIK,GAAG,GAAG,EAAV;AACA,QAAIC,KAAK,GAAG,IAAIR,UAAJ,CAAeE,MAAf,CAAZ;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACrC,UAAIE,GAAG,GAAGH,KAAK,CAACC,CAAD,CAAL,CAASG,QAAT,CAAkB,EAAlB,CAAV;AACAL,MAAAA,GAAG,IAAII,GAAG,CAACD,MAAJ,KAAe,CAAf,GAAmB,MAAMC,GAAzB,GAA+BA,GAAtC;AACD;;AACD,WAAOJ,GAAP;AACD,GAVI,CAAP;AAWD;;AAEDM,MAAM,CAACC,OAAP,GAAiBb,MAAjB","sourcesContent":["function format(data) {\n  if (typeof data === \"string\") {\n    return new TextEncoder(\"utf-8\").encode(data);\n  } else {\n    return new Uint8Array(data);\n  }\n}\n\n// (Uint8Array | String) -> Promise HexString\nfunction sha256(data) { \n  var buffer = format(data);\n  return crypto.subtle\n    .digest(\"SHA-256\", buffer)\n    .then(function(buffer) {\n      var hex = \"\";\n      var bytes = new Uint8Array(buffer);\n      for (var i = 0; i < bytes.length; ++i) {\n        var chr = bytes[i].toString(16);\n        hex += chr.length === 1 ? \"0\" + chr : chr;\n      }\n      return hex;\n    });\n}\n\nmodule.exports = sha256;\n"]},"metadata":{},"sourceType":"script"}