"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressTranslator = void 0;
const pw_core_1 = __importStar(require("@lay2/pw-core"));
const lumos_1 = require("@ckb-lumos/lumos");
const config_json_1 = __importDefault(require("../config/config.json"));
const { parseAddress, encodeToAddress } = lumos_1.helpers;
const helpers_1 = require("./helpers");
const web3_1 = __importDefault(require("web3"));
function createPWCoreProvider() {
    let provider;
    const web3 = new web3_1.default(web3_1.default.givenProvider);
    if (isAnyAccountConnected(web3)) {
        provider = new pw_core_1.Web3ModalProvider(web3);
    }
    else if (typeof (window) !== 'undefined' && Boolean(window.web3)) {
        provider = new pw_core_1.EthProvider();
    }
    else {
        provider = new pw_core_1.RawProvider("0x23211b1f333aece687eebc5b90be6b55962f5bf0433edd23e1c73d93a67f70e5");
    }
    return provider;
}
function isAnyAccountConnected(web3) {
    var _a;
    let accounts;
    try {
        accounts = (_a = web3 === null || web3 === void 0 ? void 0 : web3.eth) === null || _a === void 0 ? void 0 : _a.accounts;
    }
    catch (error) {
        console.error(error);
    }
    return Boolean(accounts === null || accounts === void 0 ? void 0 : accounts[0]);
}
class AddressTranslator {
    constructor(config) {
        if (config) {
            this._config = config;
        }
        else {
            this._config = {
                CKB_URL: config_json_1.default.ckb_url,
                RPC_URL: config_json_1.default.rpc_url,
                INDEXER_URL: config_json_1.default.indexer_url,
                deposit_lock_script_type_hash: config_json_1.default.deposit_lock.script_type_hash,
                eth_account_lock_script_type_hash: config_json_1.default.eth_account_lock.script_type_hash,
                rollup_type_script: config_json_1.default.chain.rollup_type_script,
                rollup_type_hash: config_json_1.default.rollup_script_hash,
                portal_wallet_lock_hash: config_json_1.default.portal_wallet_lock_hash,
            };
        }
        this._deploymentConfig = helpers_1.generateDeployConfig(this._config.deposit_lock_script_type_hash, this._config.eth_account_lock_script_type_hash);
        const ckbUrl = this._config.CKB_URL;
        this._pwCore = new pw_core_1.default(ckbUrl);
    }
    clone() {
        return new AddressTranslator(this._config);
    }
    async init({ pwCore, pwConfig, pwChainId = pw_core_1.ChainID.ckb_testnet }) {
        var _a;
        const provider = createPWCoreProvider();
        const collector = new pw_core_1.IndexerCollector(this._config.INDEXER_URL);
        await ((_a = this._pwCore) === null || _a === void 0 ? void 0 : _a.init(provider, collector));
        if (pwCore) {
            this._pwCore = pwCore;
            pw_core_1.default.setChainId(pwChainId, pwConfig);
        }
    }
    getDepositionLockArgs(ownerLockHash, layer2_lock_args, cancelTimeout = "0xc00000000002a300") {
        const rollup_type_hash = helpers_1.getRollupTypeHash(this._config.rollup_type_script);
        const depositionLockArgs = {
            owner_lock_hash: ownerLockHash,
            layer2_lock: {
                code_hash: this._deploymentConfig.eth_account_lock.code_hash,
                hash_type: this._deploymentConfig.eth_account_lock.hash_type,
                args: rollup_type_hash + layer2_lock_args.slice(2),
            },
            cancel_timeout: cancelTimeout, // relative timestamp, 2 days
        };
        return depositionLockArgs;
    }
    async getLayer2DepositAddressByOwnerLock(ownerLockHashLayerOne, ethLockArgsLayerTwo) {
        const depositionLockArgs = this.getDepositionLockArgs(ownerLockHashLayerOne, ethLockArgsLayerTwo);
        const serializedArgs = helpers_1.serializeArgs(depositionLockArgs, this._config.rollup_type_script);
        const depositionLock = helpers_1.generateDepositionLock(this._deploymentConfig, serializedArgs);
        const script = pw_core_1.Script.fromRPC(depositionLock);
        const depositAddr = pw_core_1.Address.fromLockScript(script);
        return depositAddr;
    }
    async getDefaultLockLayer2DepositAddress(ckbAddress, ethAddress) {
        return this.getLayer2DepositAddressByOwnerLock(this.ckbAddressToLockScriptHash(ckbAddress), ethAddress);
    }
    async getLayer2DepositAddress(ethAddress) {
        const pwAddress = new pw_core_1.Address(ethAddress, pw_core_1.AddressType.eth);
        if (!(pw_core_1.default === null || pw_core_1.default === void 0 ? void 0 : pw_core_1.default.config)) {
            throw new Error('PWCore.config is empty. Did you call <AddressTranslator>.init() function?');
        }
        const ownerLockHash = pwAddress.toLockScript().toHash();
        return this.getLayer2DepositAddressByOwnerLock(ownerLockHash, pwAddress.lockArgs);
    }
    ethAddressToCkbAddress(ethAddress) {
        const script = {
            code_hash: this._config.portal_wallet_lock_hash,
            hash_type: "type",
            args: ethAddress,
        };
        const { predefined } = require("@ckb-lumos/config-manager");
        const address = encodeToAddress(script, pw_core_1.default.chainId === pw_core_1.ChainID.ckb_testnet
            ? {
                config: predefined.AGGRON4,
            }
            : undefined);
        return address;
    }
    ethAddressToGodwokenShortAddress(ethAddress) {
        if (ethAddress.length !== 42 || !ethAddress.startsWith("0x")) {
            throw new Error("eth address format error!");
        }
        const layer2EthLockHash = this.getLayer2EthLockHash(ethAddress);
        const shortAddress = layer2EthLockHash.slice(0, 42);
        return shortAddress;
    }
    /** Call a CKB send transaction from L1-L2 to create an account if it not exist.
     * Require for user to have ~470 ckb on L1
     * Need to be called in web with metamask installed */
    /** Local CKB has no default PWCore, no creation of Layer2 PW Address */
    async createLayer2Address(ethereumAddress) {
        const amount = new pw_core_1.Amount("400", 8);
        const l2Address = await this.getLayer2DepositAddress(ethereumAddress);
        const tx = await this._pwCore.send(l2Address, amount);
        return tx;
    }
    getLayer2EthLockHash(ethAddress) {
        const layer2Lock = {
            code_hash: this._config.eth_account_lock_script_type_hash,
            hash_type: "type",
            args: this._config.rollup_type_hash + ethAddress.slice(2).toLowerCase(),
        };
        const layer2LockHash = lumos_1.utils.computeScriptHash(layer2Lock);
        return layer2LockHash;
    }
    ckbAddressToLockScriptHash(address) {
        const lock = parseAddress(address);
        const accountLockScriptHash = lumos_1.utils.computeScriptHash(lock);
        return accountLockScriptHash;
    }
    // TODO: Should be moved to bridge layer
    async calculateLayer1ToLayer2Fee(ethereumAddress, tokenAddress, amount) {
        const MINIMUM_CKB_CELL_OUTPUT = new pw_core_1.Amount("400", pw_core_1.AmountUnit.ckb);
        const SUDT_AMOUNT_TO_SEND = new pw_core_1.Amount(amount, pw_core_1.AmountUnit.ckb);
        const options = {
            witnessArgs: pw_core_1.Builder.WITNESS_ARGS.RawSecp256k1,
            autoCalculateCapacity: true,
            minimumOutputCellCapacity: MINIMUM_CKB_CELL_OUTPUT,
        };
        const layer2DepositAddress = await this.getLayer2DepositAddress(ethereumAddress);
        const sudt = new pw_core_1.SUDT(tokenAddress);
        const builder = new pw_core_1.SimpleSUDTBuilder(sudt, layer2DepositAddress, SUDT_AMOUNT_TO_SEND, options);
        return builder;
    }
}
exports.AddressTranslator = AddressTranslator;
