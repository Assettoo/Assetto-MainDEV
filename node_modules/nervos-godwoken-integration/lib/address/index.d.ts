import PWCore, { Address, SimpleSUDTBuilder, ChainID, Config } from "@lay2/pw-core";
import { HexString, Address as CkbAddress } from "@ckb-lumos/lumos";
import { IAddressTranslatorConfig } from "./types";
export declare class AddressTranslator {
    private _pwCore;
    private _config;
    private _deploymentConfig;
    constructor(config?: IAddressTranslatorConfig);
    clone(): AddressTranslator;
    init({ pwCore, pwConfig, pwChainId }: {
        pwCore?: PWCore;
        pwConfig?: Config;
        pwChainId?: ChainID;
    }): Promise<void>;
    private getDepositionLockArgs;
    getLayer2DepositAddressByOwnerLock(ownerLockHashLayerOne: string, ethLockArgsLayerTwo: string): Promise<Address>;
    getDefaultLockLayer2DepositAddress(ckbAddress: string, ethAddress: string): Promise<Address>;
    getLayer2DepositAddress(ethAddress: string): Promise<Address>;
    ethAddressToCkbAddress(ethAddress: HexString): HexString;
    ethAddressToGodwokenShortAddress(ethAddress: HexString): HexString;
    /** Call a CKB send transaction from L1-L2 to create an account if it not exist.
     * Require for user to have ~470 ckb on L1
     * Need to be called in web with metamask installed */
    /** Local CKB has no default PWCore, no creation of Layer2 PW Address */
    createLayer2Address(ethereumAddress: HexString): Promise<HexString>;
    getLayer2EthLockHash(ethAddress: string): string;
    ckbAddressToLockScriptHash(address: CkbAddress): HexString;
    calculateLayer1ToLayer2Fee(ethereumAddress: string, tokenAddress: string, amount: string): Promise<SimpleSUDTBuilder>;
}
