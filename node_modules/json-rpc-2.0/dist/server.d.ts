import { JSONRPCRequest, JSONRPCResponse, JSONRPCParams, JSONRPCID, JSONRPCErrorResponse } from "./models";
export declare type SimpleJSONRPCMethod<ServerParams = void> = (params: Partial<JSONRPCParams> | undefined, serverParams: ServerParams | undefined) => any;
export declare type JSONRPCMethod<ServerParams = void> = (request: JSONRPCRequest, serverParams: ServerParams | undefined) => JSONRPCResponsePromise | ((serverParams: ServerParams | undefined) => JSONRPCResponsePromise);
export declare type JSONRPCResponsePromise = PromiseLike<JSONRPCResponse | null>;
export declare type JSONRPCServerMiddlewareNext<ServerParams> = (request: JSONRPCRequest, serverParams: ServerParams | undefined) => JSONRPCResponsePromise;
export declare type JSONRPCServerMiddleware<ServerParams> = (next: JSONRPCServerMiddlewareNext<ServerParams>, request: JSONRPCRequest, serverParams: ServerParams | undefined) => JSONRPCResponsePromise;
export declare class JSONRPCServer<ServerParams = void> {
    private nameToMethodDictionary;
    private middleware;
    mapErrorToJSONRPCErrorResponse: (id: JSONRPCID, error: any) => JSONRPCErrorResponse;
    constructor();
    addMethod(name: string, method: SimpleJSONRPCMethod<ServerParams>): void;
    private toJSONRPCMethod;
    addMethodAdvanced(name: string, method: JSONRPCMethod<ServerParams>): void;
    receiveJSON(json: string, serverParams?: ServerParams): JSONRPCResponsePromise;
    private tryParseRequestJSON;
    receive(request: JSONRPCRequest, serverParams?: ServerParams): JSONRPCResponsePromise;
    applyMiddleware(...middlewares: JSONRPCServerMiddleware<ServerParams>[]): void;
    private combineMiddlewares;
    private middlewareReducer;
    private callMethod;
    private mapErrorToJSONRPCErrorResponseIfNecessary;
}
