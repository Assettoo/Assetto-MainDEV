import { JSONRPCMethod, JSONRPCServer, JSONRPCServerMiddleware, SimpleJSONRPCMethod } from "./server";
import { JSONRPCClient, JSONRPCRequester } from "./client";
import { JSONRPCParams, JSONRPCRequest, JSONRPCResponse } from "./models";
export declare class JSONRPCServerAndClient<ServerParams = void, ClientParams = void> {
    server: JSONRPCServer<ServerParams>;
    client: JSONRPCClient<ClientParams>;
    constructor(server: JSONRPCServer<ServerParams>, client: JSONRPCClient<ClientParams>);
    applyServerMiddleware(...middlewares: JSONRPCServerMiddleware<ServerParams>[]): void;
    addMethod(name: string, method: SimpleJSONRPCMethod<ServerParams>): void;
    addMethodAdvanced(name: string, method: JSONRPCMethod<ServerParams>): void;
    timeout(delay: number): JSONRPCRequester<ClientParams>;
    request(method: string, params?: JSONRPCParams, clientParams?: ClientParams): PromiseLike<any>;
    requestAdvanced(jsonRPCRequest: JSONRPCRequest, clientParams?: ClientParams): PromiseLike<JSONRPCResponse>;
    notify(method: string, params?: JSONRPCParams, clientParams?: ClientParams): void;
    rejectAllPendingRequests(message: string): void;
    receiveAndSend(payload: any, serverParams?: ServerParams, clientParams?: ClientParams): Promise<void>;
}
