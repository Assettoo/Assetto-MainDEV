"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONRPCServer = void 0;
var models_1 = require("./models");
var internal_1 = require("./internal");
var createParseErrorResponse = function () {
    return models_1.createJSONRPCErrorResponse(null, models_1.JSONRPCErrorCode.ParseError, "Parse error");
};
var createInvalidRequestResponse = function (request) {
    return models_1.createJSONRPCErrorResponse(models_1.isJSONRPCID(request.id) ? request.id : null, models_1.JSONRPCErrorCode.InvalidRequest, "Invalid Request");
};
var createMethodNotFoundResponse = function (id) {
    return models_1.createJSONRPCErrorResponse(id, models_1.JSONRPCErrorCode.MethodNotFound, "Method not found");
};
var logHigherOrderFunctionDeprecationWarning = internal_1.createLogDeprecationWarning("Using a higher order function on JSONRPCServer.addMethod/addMethodAdvanced is deprecated.\nInstead of this: jsonRPCServer.addMethod(methodName, (params) => (serverParams) => /* no change here */)\nDo this:         jsonRPCServer.addMethod(methodName, (params, serverParams) => /* no change here */)\nThe old way still works, but we will drop the support in the future.");
var JSONRPCServer = /** @class */ (function () {
    function JSONRPCServer() {
        this.mapErrorToJSONRPCErrorResponse = defaultMapErrorToJSONRPCErrorResponse;
        this.nameToMethodDictionary = {};
        this.middleware = null;
    }
    JSONRPCServer.prototype.addMethod = function (name, method) {
        this.addMethodAdvanced(name, this.toJSONRPCMethod(method));
    };
    JSONRPCServer.prototype.toJSONRPCMethod = function (method) {
        var _this = this;
        return function (request, serverParams) {
            var response = method(request.params, serverParams);
            if (typeof response === "function") {
                logHigherOrderFunctionDeprecationWarning();
                response = response(serverParams);
            }
            return Promise.resolve(response).then(function (result) { return mapResultToJSONRPCResponse(request.id, result); }, function (error) {
                console.warn("JSON-RPC method " + request.method + " responded an error", error);
                return _this.mapErrorToJSONRPCErrorResponseIfNecessary(request.id, error);
            });
        };
    };
    JSONRPCServer.prototype.addMethodAdvanced = function (name, method) {
        var _a;
        this.nameToMethodDictionary = __assign(__assign({}, this.nameToMethodDictionary), (_a = {}, _a[name] = method, _a));
    };
    JSONRPCServer.prototype.receiveJSON = function (json, serverParams) {
        var request = this.tryParseRequestJSON(json);
        if (request) {
            return this.receive(request, serverParams);
        }
        else {
            return Promise.resolve(createParseErrorResponse());
        }
    };
    JSONRPCServer.prototype.tryParseRequestJSON = function (json) {
        try {
            return JSON.parse(json);
        }
        catch (_a) {
            return null;
        }
    };
    JSONRPCServer.prototype.receive = function (request, serverParams) {
        var method = this.nameToMethodDictionary[request.method];
        if (!models_1.isJSONRPCRequest(request)) {
            return Promise.resolve(createInvalidRequestResponse(request));
        }
        else if (method) {
            var response = this.callMethod(method, request, serverParams);
            return response.then(function (response) { return mapResponse(request, response); });
        }
        else if (request.id !== undefined) {
            return Promise.resolve(createMethodNotFoundResponse(request.id));
        }
        else {
            return Promise.resolve(null);
        }
    };
    JSONRPCServer.prototype.applyMiddleware = function () {
        var middlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middlewares[_i] = arguments[_i];
        }
        if (this.middleware) {
            this.middleware = this.combineMiddlewares(__spreadArrays([
                this.middleware
            ], middlewares));
        }
        else {
            this.middleware = this.combineMiddlewares(middlewares);
        }
    };
    JSONRPCServer.prototype.combineMiddlewares = function (middlewares) {
        if (!middlewares.length) {
            return null;
        }
        else {
            return middlewares.reduce(this.middlewareReducer);
        }
    };
    JSONRPCServer.prototype.middlewareReducer = function (prevMiddleware, nextMiddleware) {
        return function (next, request, serverParams) {
            return prevMiddleware(function (request, serverParams) { return nextMiddleware(next, request, serverParams); }, request, serverParams);
        };
    };
    JSONRPCServer.prototype.callMethod = function (method, request, serverParams) {
        var _this = this;
        var callMethod = function (request, serverParams) {
            var response = method(request, serverParams);
            if (typeof response === "function") {
                logHigherOrderFunctionDeprecationWarning();
                return response(serverParams);
            }
            else {
                return response;
            }
        };
        var onError = function (error) {
            console.warn("An unexpected error occurred while executing \"" + request.method + "\" JSON-RPC method:", error);
            return Promise.resolve(_this.mapErrorToJSONRPCErrorResponseIfNecessary(request.id, error));
        };
        try {
            return (this.middleware || noopMiddleware)(callMethod, request, serverParams).then(undefined, onError);
        }
        catch (error) {
            return onError(error);
        }
    };
    JSONRPCServer.prototype.mapErrorToJSONRPCErrorResponseIfNecessary = function (id, error) {
        if (id !== undefined) {
            return this.mapErrorToJSONRPCErrorResponse(id, error);
        }
        else {
            return null;
        }
    };
    return JSONRPCServer;
}());
exports.JSONRPCServer = JSONRPCServer;
var noopMiddleware = function (next, request, serverParams) { return next(request, serverParams); };
var mapResultToJSONRPCResponse = function (id, result) {
    if (id !== undefined) {
        return {
            jsonrpc: models_1.JSONRPC,
            id: id,
            result: result === undefined ? null : result,
        };
    }
    else {
        return null;
    }
};
var defaultMapErrorToJSONRPCErrorResponse = function (id, error) {
    return models_1.createJSONRPCErrorResponse(id, internal_1.DefaultErrorCode, (error && error.message) || "An unexpected error occurred");
};
var mapResponse = function (request, response) {
    if (response) {
        return response;
    }
    else if (request.id !== undefined) {
        return models_1.createJSONRPCErrorResponse(request.id, models_1.JSONRPCErrorCode.InternalError, "Internal error");
    }
    else {
        return null;
    }
};
