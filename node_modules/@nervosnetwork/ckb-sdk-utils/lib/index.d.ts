/// <reference types="@nervosnetwork/ckb-types" />
import JSBI from 'jsbi';
import { AddressOptions } from './address';
import { serializeScript } from './serialization/script';
import { serializeRawTransaction, serializeTransaction, serializeWitnessArgs } from './serialization/transaction';
import { PERSONAL } from './const';
export * from './address';
export * from './serialization';
export * from './convertors';
export * from './epochs';
export * from './sizes';
export * as systemScripts from './systemScripts';
export * as reconcilers from './reconcilers';
export { serializeScript, serializeRawTransaction, serializeTransaction, serializeWitnessArgs, JSBI, PERSONAL };
export declare const blake2b: (outlen: number, key: Uint8Array | null, salt: Uint8Array | null, personal: Uint8Array | null, noAssert?: boolean | undefined) => import("./crypto/blake2b").Blake2b, bech32: import("bech32").BechLib, bech32m: import("bech32").BechLib, blake160: import("./crypto/blake160").Blake160;
export declare const scriptToHash: (script: CKBComponents.Script) => string;
export declare const rawTransactionToHash: (rawTransaction: Omit<CKBComponents.RawTransaction, 'witnesses'>) => string;
export declare const privateKeyToPublicKey: (privateKey: string) => string;
export declare const privateKeyToAddress: (privateKey: string, options: AddressOptions) => string;
