"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HashTypeException = exports.CodeHashException = exports.AddressException = exports.AddressPayloadException = void 0;
const tslib_1 = require("tslib");
const ErrorCode_1 = (0, tslib_1.__importDefault)(require("./ErrorCode"));
class AddressPayloadException extends Error {
    constructor(payload, type) {
        super(`'${payload}' is not a valid ${type ? `${type} version ` : ''}address payload`);
        this.code = ErrorCode_1.default.AddressInvalid;
        this.type = type;
    }
}
exports.AddressPayloadException = AddressPayloadException;
class AddressException extends Error {
    constructor(addr, stack, type) {
        super(`'${addr}' is not a valid ${type ? `${type} version ` : ''}address`);
        this.code = ErrorCode_1.default.AddressInvalid;
        this.type = type;
        this.stack = stack;
    }
}
exports.AddressException = AddressException;
class CodeHashException extends Error {
    constructor(codeHash) {
        super(`'${codeHash}' is not a valid code hash`);
        this.code = ErrorCode_1.default.AddressInvalid;
    }
}
exports.CodeHashException = CodeHashException;
class HashTypeException extends Error {
    constructor(hashType) {
        super(`'${hashType}' is not a valid hash type`);
        this.code = ErrorCode_1.default.AddressInvalid;
    }
}
exports.HashTypeException = HashTypeException;
exports.default = {
    AddressPayloadException,
    AddressException,
    CodeHashException,
    HashTypeException,
};
//# sourceMappingURL=address.js.map