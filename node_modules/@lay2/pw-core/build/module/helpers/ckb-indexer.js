import axios from 'axios';
import { Cell, Amount, AmountUnit, OutPoint, Script as PwScript, } from '..';
export var ScriptType;
(function (ScriptType) {
    ScriptType["type"] = "type";
    ScriptType["lock"] = "lock";
})(ScriptType || (ScriptType = {}));
export var Order;
(function (Order) {
    Order["asc"] = "asc";
    Order["desc"] = "desc";
})(Order || (Order = {}));
export const DefaultTerminator = (_index, _cell) => {
    return { stop: false, push: true };
};
export class CkbIndexer {
    constructor(ckbIndexerUrl) {
        this.ckbIndexerUrl = ckbIndexerUrl;
    }
    async request(method, params) {
        const data = {
            id: 0,
            jsonrpc: '2.0',
            method,
            params,
        };
        const res = await axios.post(this.ckbIndexerUrl, data);
        if (res.status !== 200) {
            throw new Error(`indexer request failed with HTTP code ${res.status}`);
        }
        if (res.data.error !== undefined) {
            throw new Error(`indexer request rpc failed with error: ${JSON.stringify(res.data.error)}`);
        }
        return res.data.result;
    }
    async getCells(searchKey, terminator = DefaultTerminator, { sizeLimit = 0x100, order = Order.asc, } = {}) {
        const infos = [];
        let cursor = null;
        let index = 0;
        const params = [searchKey, order, `0x${sizeLimit.toString(16)}`, cursor];
        while (true) {
            const res = await this.request('get_cells', params);
            const liveCells = res.objects;
            cursor = res.lastCursor;
            for (const cell of liveCells) {
                const { stop, push } = terminator(index, cell);
                if (push) {
                    infos.push(cell);
                }
                if (stop) {
                    return infos;
                }
                index++;
            }
            if (liveCells.length < sizeLimit) {
                break;
            }
        }
        return infos;
    }
}
export function IndexerCellToCell(cell) {
    return new Cell(new Amount(cell.output.capacity, AmountUnit.shannon), PwScript.fromRPC(cell.output.lock), PwScript.fromRPC(cell.output.type), OutPoint.fromRPC(cell.out_point), cell.output_data);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tiLWluZGV4ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9ja2ItaW5kZXhlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxFQUNMLElBQUksRUFDSixNQUFNLEVBQ04sVUFBVSxFQUNWLFFBQVEsRUFDUixNQUFNLElBQUksUUFBUSxHQUVuQixNQUFNLElBQUksQ0FBQztBQUVaLE1BQU0sQ0FBTixJQUFZLFVBR1g7QUFIRCxXQUFZLFVBQVU7SUFDcEIsMkJBQWEsQ0FBQTtJQUNiLDJCQUFhLENBQUE7QUFDZixDQUFDLEVBSFcsVUFBVSxLQUFWLFVBQVUsUUFHckI7QUFFRCxNQUFNLENBQU4sSUFBWSxLQUdYO0FBSEQsV0FBWSxLQUFLO0lBQ2Ysb0JBQVcsQ0FBQTtJQUNYLHNCQUFhLENBQUE7QUFDZixDQUFDLEVBSFcsS0FBSyxLQUFMLEtBQUssUUFHaEI7QUFnREQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQWUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUU7SUFDN0QsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ3JDLENBQUMsQ0FBQztBQUVGLE1BQU0sT0FBTyxVQUFVO0lBQ3JCLFlBQW1CLGFBQXFCO1FBQXJCLGtCQUFhLEdBQWIsYUFBYSxDQUFRO0lBQUcsQ0FBQztJQUU1QyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQWMsRUFBRSxNQUFZO1FBQ3hDLE1BQU0sSUFBSSxHQUFHO1lBQ1gsRUFBRSxFQUFFLENBQUM7WUFDTCxPQUFPLEVBQUUsS0FBSztZQUNkLE1BQU07WUFDTixNQUFNO1NBQ1AsQ0FBQztRQUNGLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDeEU7UUFDRCxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUNoQyxNQUFNLElBQUksS0FBSyxDQUNiLDBDQUEwQyxJQUFJLENBQUMsU0FBUyxDQUN0RCxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FDZixFQUFFLENBQ0osQ0FBQztTQUNIO1FBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQVEsQ0FDbkIsU0FBb0IsRUFDcEIsYUFBeUIsaUJBQWlCLEVBQzFDLEVBQ0UsU0FBUyxHQUFHLEtBQUssRUFDakIsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLE1BQ3dCLEVBQUU7UUFFN0MsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztRQUNoQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxNQUFNLEdBQUcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pFLE9BQU8sSUFBSSxFQUFFO1lBQ1gsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNwRCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQzlCLE1BQU0sR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQ3hCLEtBQUssTUFBTSxJQUFJLElBQUksU0FBUyxFQUFFO2dCQUM1QixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQy9DLElBQUksSUFBSSxFQUFFO29CQUNSLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2xCO2dCQUNELElBQUksSUFBSSxFQUFFO29CQUNSLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELEtBQUssRUFBRSxDQUFDO2FBQ1Q7WUFDRCxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxFQUFFO2dCQUNoQyxNQUFNO2FBQ1A7U0FDRjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLElBQWlCO0lBQ2pELE9BQU8sSUFBSSxJQUFJLENBQ2IsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUNwRCxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQ2xDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFDbEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQ2hDLElBQUksQ0FBQyxXQUFXLENBQ2pCLENBQUM7QUFDSixDQUFDIn0=