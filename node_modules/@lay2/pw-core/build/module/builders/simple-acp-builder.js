import { Builder } from '../builders/builder';
import { Amount, AmountUnit, Cell, RawTransaction, Transaction, } from '../models';
import PWCore from '..';
export class SimpleACPBuilder extends Builder {
    constructor(address, amount, options = {}) {
        super(options.feeRate, options.collector, options.witnessArgs);
        this.address = address;
        this.amount = amount;
        this.options = options;
    }
    async build() {
        if (!this.address.isAcp()) {
            throw new Error("The Receiver's address is not anyone-can-pay cell");
        }
        const receiverACPCells = await this.collector.collect(this.address, {
            neededAmount: new Amount('1', AmountUnit.shannon),
        });
        if (!receiverACPCells || receiverACPCells.length === 0) {
            throw new Error('The receiver has no sudt cell');
        }
        this.receiverInputCell = receiverACPCells[0];
        this.receiverOutputCell = this.receiverInputCell.clone();
        this.receiverOutputCell.capacity = this.receiverOutputCell.capacity.add(this.amount);
        return this.buildSenderCells();
    }
    async buildSenderCells(fee = Amount.ZERO) {
        const neededAmount = this.amount.add(Builder.MIN_CHANGE).add(fee);
        let inputSum = new Amount('0');
        const inputCells = [];
        // fill the inputs
        const cells = await this.collector.collect(PWCore.provider.address, {
            neededAmount,
        });
        for (const cell of cells) {
            inputCells.push(cell);
            inputSum = inputSum.add(cell.capacity);
            if (inputSum.gt(neededAmount))
                break;
        }
        if (inputSum.lt(neededAmount)) {
            throw new Error(`input capacity not enough, need ${neededAmount.toString(AmountUnit.ckb)}, got ${inputSum.toString(AmountUnit.ckb)}`);
        }
        const changeCell = new Cell(inputSum.sub(this.amount), PWCore.provider.address.toLockScript());
        const tx = new Transaction(new RawTransaction([...inputCells, this.receiverInputCell], [this.receiverOutputCell, changeCell]), [this.witnessArgs]);
        this.fee = Builder.calcFee(tx, this.feeRate);
        if (changeCell.capacity.gte(Builder.MIN_CHANGE.add(this.fee))) {
            changeCell.capacity = changeCell.capacity.sub(this.fee);
            tx.raw.outputs.pop();
            tx.raw.outputs.push(changeCell);
            return tx;
        }
        return this.buildSenderCells(this.fee);
    }
    getCollector() {
        return this.collector;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWFjcC1idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2J1aWxkZXJzL3NpbXBsZS1hY3AtYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFpQixNQUFNLHFCQUFxQixDQUFDO0FBQzdELE9BQU8sRUFFTCxNQUFNLEVBQ04sVUFBVSxFQUNWLElBQUksRUFDSixjQUFjLEVBQ2QsV0FBVyxHQUNaLE1BQU0sV0FBVyxDQUFDO0FBQ25CLE9BQU8sTUFBTSxNQUFNLElBQUksQ0FBQztBQUN4QixNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsT0FBTztJQUkzQyxZQUNZLE9BQWdCLEVBQ2hCLE1BQWMsRUFDZCxVQUF5QixFQUFFO1FBRXJDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBSnJELFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFlBQU8sR0FBUCxPQUFPLENBQW9CO0lBR3ZDLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztTQUN0RTtRQUVELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xFLFlBQVksRUFBRSxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQztTQUNsRCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN0RCxNQUFNLElBQUksS0FBSyxDQUFD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