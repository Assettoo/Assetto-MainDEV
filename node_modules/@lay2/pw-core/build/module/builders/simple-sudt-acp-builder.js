import { Builder } from './builder';
import { Amount, AmountUnit, RawTransaction, Transaction, } from '../models';
import PWCore from '..';
import { SUDTCollector } from '../collectors/sudt-collector';
export class SimpleSUDTACPBuilder extends Builder {
    constructor(sudt, address, amount, options = {}) {
        super(options.feeRate, options.collector, options.witnessArgs);
        this.sudt = sudt;
        this.address = address;
        this.amount = amount;
        this.options = options;
    }
    async build() {
        if (!this.address.isAcp()) {
            throw new Error("The receiver's address is not anyone-can-pay cell");
        }
        if (!(this.collector instanceof SUDTCollector)) {
            throw new Error('this.collector is not a SUDTCollector instance');
        }
        const receiverSUDTCells = await this.collector.collectSUDT(this.sudt, this.address, { neededAmount: new Amount('1', AmountUnit.shannon) });
        if (!receiverSUDTCells || receiverSUDTCells.length === 0) {
            throw new Error('The receiver has no sudt cell');
        }
        const receiverInputCell = receiverSUDTCells[0];
        const receiverOuputCell = receiverInputCell.clone();
        receiverOuputCell.setSUDTAmount(this.amount.add(receiverOuputCell.getSUDTAmount()));
        let senderInputSUDTSum = new Amount('0');
        let senderInputCKBSum = new Amount('0');
        let minSenderOccupiedCKBSum = new Amount('0');
        let restNeededSUDT = new Amount(this.amount.toHexString(), AmountUnit.shannon);
        const inputCells = [];
        const outputCells = [];
        // fill the inputs and the outputs
        const unspentSUDTCells = await this.collector.collectSUDT(this.sudt, PWCore.provider.address, { neededAmount: this.amount });
        // First step: build a tx including sender and receiver sudt cell only
        for (const inputCell of unspentSUDTCells) {
            const outputCell = inputCell.clone();
            const inputSUDTAmount = inputCell.getSUDTAmount();
            senderInputSUDTSum = senderInputSUDTSum.add(inputSUDTAmount);
            senderInputCKBSum = senderInputCKBSum.add(inputCell.capacity);
            minSenderOccupiedCKBSum = minSenderOccupiedCKBSum.add(outputCell.occupiedCapacity());
            if (inputSUDTAmount.lt(restNeededSUDT)) {
                restNeededSUDT = restNeededSUDT.sub(inputSUDTAmount);
                outputCell.setSUDTAmount(new Amount('0'));
            }
            else {
                outputCell.setSUDTAmount(inputSUDTAmount.sub(restNeededSUDT));
                restNeededSUDT = new Amount('0');
            }
            inputCells.push(inputCell);
            outputCells.unshift(outputCell);
            if (senderInputSUDTSum.gte(this.amount))
                break;
        }
        if (senderInputSUDTSum.lt(this.amount)) {
            throw new Error(`input sudt amount not enough, need ${this.amount.toString(AmountUnit.ckb)}, got ${senderInputSUDTSum.toString(AmountUnit.ckb)}`);
        }
        inputCells.push(receiverInputCell);
        outputCells.unshift(receiverOuputCell);
        let tx = this.rectifyTx(inputCells, outputCells);
        const availableCKBFee = senderInputCKBSum.sub(minSenderOccupiedCKBSum);
        // Second step:  if sudt cell can not pay the transaction fee, fetch pure ckb cells to pay the fee.
        if (this.fee.gt(availableCKBFee)) {
            const unspentCKBCells = await this.collector.collect(PWCore.provider.address, { neededAmount: this.fee.sub(availableCKBFee).add(Builder.MIN_CHANGE) });
            if (!unspentCKBCells || unspentCKBCells.length === 0) {
                throw new Error('not enough CKB to pay the transaction fee');
            }
            // append the fee cell to tx's inputs and outputs
            const ckbFeeInputCell = unspentCKBCells[0];
            inputCells.push(ckbFeeInputCell);
            outputCells.push(ckbFeeInputCell.clone());
            tx = this.rectifyTx(inputCells, outputCells);
            // if fee change cell's capacity less than occuiped capacity, merge the fee cell to sender's input sudt cell.
            if (this.fee.gt(availableCKBFee.add(ckbFeeInputCell.availableFee()))) {
                outputCells.pop();
                const senderOutputCell = outputCells.pop();
                senderOutputCell.capacity = senderOutputCell.capacity.add(ckbFeeInputCell.capacity);
                outputCells.push(senderOutputCell);
                tx = this.rectifyTx(inputCells, outputCells);
            }
        }
        // Third step: subtract tx fee from outputs' capacity
        tx = this.subtractFee(inputCells, outputCells);
        return tx;
    }
    subtractFee(inputCells, outputCells) {
        let remainFee = new Amount(this.fee.toHexString(), AmountUnit.shannon);
        for (const cell of outputCells.slice(1)) {
            // throw new Error(`remainFee ${remainFee} ${cell.availableFee()}`);
            if (remainFee.gt(cell.availableFee())) {
                remainFee = remainFee.sub(cell.availableFee());
                cell.capacity = cell.occupiedCapacity();
            }
            else {
                cell.capacity = cell.capacity.sub(remainFee);
                break;
            }
        }
        return this.rectifyTx(inputCells, outputCells);
    }
    rectifyTx(inputCells, outputCells) {
        const sudtCellDeps = [
            PWCore.config.defaultLock.cellDep,
            PWCore.config.pwLock.cellDep,
            PWCore.config.sudtType.cellDep,
        ];
        const tx = new Transaction(new RawTransaction(inputCells, outputCells, sudtCellDeps), [this.witnessArgs]);
        this.fee = Builder.calcFee(tx, this.feeRate);
        return tx;
    }
    getCollector() {
        return this.collector;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXN1ZHQtYWNwLWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvc2ltcGxlLXN1ZHQtYWNwLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBaUIsTUFBTSxXQUFXLENBQUM7QUFDbkQsT0FBTyxFQUVMLE1BQU0sRUFDTixVQUFVLEVBRVYsY0FBYyxFQUNkLFdBQVcsR0FFWixNQUFNLFdBQVcsQ0FBQztBQUNuQixPQUFPLE1BQU0sTUFBTSxJQUFJLENBQUM7QUFDeEIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTdELE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxPQUFPO0lBQy9DLFlBQ1UsSUFBVSxFQUNWLE9BQWdCLEVBQ2hCLE1BQWMsRUFDWixVQUF5QixFQUFFO1FBRXJDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBTHZELFNBQUksR0FBSixJQUFJLENBQU07UUFDVixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDWixZQUFPLEdBQVAsT0FBTyxDQUFvQjtJQUd2QyxDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUs7UUFDVCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN6QixNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7U0FDdEU7UUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxZQUFZLGFBQWEsQ0FBQyxFQUFFO1lBQzlDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQztTQUNuRTtRQUVELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FDeEQs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