import { Builder } from '../builders/builder';
import { Amount, AmountUnit, Cell, RawTransaction, Transaction, } from '../models';
import PWCore from '../core';
import { SimpleACPBuilder } from './simple-acp-builder';
export class SimpleBuilder extends Builder {
    constructor(address, amount, options = {}) {
        super(options.feeRate, options.collector, options.witnessArgs);
        this.address = address;
        this.amount = amount;
        this.options = options;
        this.simpleACPBuilder = new SimpleACPBuilder(this.address, this.amount, this.options);
    }
    async build(fee = Amount.ZERO) {
        if (this.amount.lt(Builder.MIN_CHANGE)) {
            return this.simpleACPBuilder.build();
        }
        const outputCell = new Cell(this.amount, this.address.toLockScript());
        const data = this.options.data;
        if (data) {
            if (data.startsWith('0x')) {
                outputCell.setHexData(data);
            }
            else {
                outputCell.setData(data);
            }
        }
        const neededAmount = this.amount.add(Builder.MIN_CHANGE).add(fee);
        let inputSum = new Amount('0');
        const inputCells = [];
        // fill the inputs
        const cells = await this.collector.collect(PWCore.provider.address, {
            neededAmount,
        });
        for (const cell of cells) {
            inputCells.push(cell);
            inputSum = inputSum.add(cell.capacity);
            if (inputSum.gt(neededAmount))
                break;
        }
        if (inputSum.lt(neededAmount)) {
            throw new Error(`input capacity not enough, need ${neededAmount.toString(AmountUnit.ckb)}, got ${inputSum.toString(AmountUnit.ckb)}`);
        }
        const changeCell = new Cell(inputSum.sub(outputCell.capacity), PWCore.provider.address.toLockScript());
        const tx = new Transaction(new RawTransaction(inputCells, [outputCell, changeCell]), [this.witnessArgs]);
        this.fee = Builder.calcFee(tx, this.feeRate);
        if (changeCell.capacity.gte(Builder.MIN_CHANGE.add(this.fee))) {
            changeCell.capacity = changeCell.capacity.sub(this.fee);
            tx.raw.outputs.pop();
            tx.raw.outputs.push(changeCell);
            return tx;
        }
        return this.build(this.fee);
    }
    getCollector() {
        return this.collector;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvc2ltcGxlLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQzlDLE9BQU8sRUFFTCxNQUFNLEVBQ04sVUFBVSxFQUNWLElBQUksRUFDSixjQUFjLEVBQ2QsV0FBVyxHQUNaLE1BQU0sV0FBVyxDQUFDO0FBQ25CLE9BQU8sTUFBTSxNQUFNLFNBQVMsQ0FBQztBQUM3QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUd4RCxNQUFNLE9BQU8sYUFBYyxTQUFRLE9BQU87SUFHeEMsWUFDVSxPQUFnQixFQUNoQixNQUFjLEVBQ1osVUFBeUIsRUFBRTtRQUVyQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUp2RCxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDWixZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUdyQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxnQkFBZ0IsQ0FDMUMsSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLENBQUMsTUFBTSxFQUNYLElBQUksQ0FBQyxPQUFPLENBQ2IsQ0FBQztJQUNKLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQWMsTUFBTSxDQUFDLElBQUk7UUFDbkMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDdEMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDdEM7UUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFB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