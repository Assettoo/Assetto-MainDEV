import { SUDTCollector } from './sudt-collector';
import { Amount, AmountUnit } from '..';
import { CkbIndexer, IndexerCellToCell, ScriptType, } from '../helpers/ckb-indexer';
export class IndexerCollector extends SUDTCollector {
    constructor(apiBase) {
        super();
        this.apiBase = apiBase;
        this.indexer = new CkbIndexer(apiBase);
    }
    async getBalance(address) {
        const searchKey = {
            script: address.toLockScript().serializeJson(),
            script_type: ScriptType.lock,
            filter: {
                output_data_len_range: ['0x0', '0x1'],
            },
        };
        const cells = (await this.indexer.getCells(searchKey)).filter((cell) => cell.output.type === null);
        let balance = Amount.ZERO;
        cells.forEach((cell) => {
            const amount = new Amount(cell.output.capacity, AmountUnit.shannon);
            balance = balance.add(amount);
        });
        return balance;
    }
    async collect(address, options) {
        if (!options || !options.neededAmount) {
            throw new Error("'neededAmount' in options must be provided");
        }
        let accCapacity = Amount.ZERO;
        const terminator = (_index, cell) => {
            if (accCapacity.gte(options.neededAmount)) {
                return { stop: true, push: false };
            }
            if (cell.output_data.length / 2 - 1 > 0 || cell.output.type !== null) {
                return { stop: false, push: false };
            }
            else {
                accCapacity = accCapacity.add(new Amount(cell.output.capacity, AmountUnit.shannon));
                return { stop: false, push: true };
            }
        };
        const searchKey = {
            script: address.toLockScript().serializeJson(),
            script_type: ScriptType.lock,
            filter: {
                output_data_len_range: ['0x0', '0x1'],
            },
        };
        const cells = await this.indexer.getCells(searchKey, terminator);
        return cells.map((cell) => IndexerCellToCell(cell));
    }
    async getSUDTBalance(sudt, address) {
        const searchKey = {
            script: address.toLockScript().serializeJson(),
            script_type: ScriptType.lock,
            filter: {
                script: sudt.toTypeScript().serializeJson(),
            },
        };
        const cells = await this.indexer.getCells(searchKey);
        let balance = Amount.ZERO;
        cells.forEach((cell) => {
            const amount = Amount.fromUInt128LE(cell.output_data);
            balance = balance.add(amount);
        });
        return balance;
    }
    async collectSUDT(sudt, address, options) {
        if (!options || !options.neededAmount) {
            throw new Error("'neededAmount' in options must be provided");
        }
        const searchKey = {
            script: address.toLockScript().serializeJson(),
            script_type: ScriptType.lock,
            filter: {
                script: sudt.toTypeScript().serializeJson(),
            },
        };
        let accCapacity = Amount.ZERO;
        const terminator = (_index, cell) => {
            if (accCapacity.gte(options.neededAmount)) {
                return { stop: true, push: false };
            }
            accCapacity = accCapacity.add(Amount.fromUInt128LE(cell.output_data));
            return { stop: false, push: true };
        };
        const cells = await this.indexer.getCells(searchKey, terminator);
        return cells.map((cell) => IndexerCellToCell(cell));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXhlci1jb2xsZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29sbGVjdG9ycy9pbmRleGVyLWNvbGxlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFpQixNQUFNLEVBQUUsVUFBVSxFQUFRLE1BQU0sSUFBSSxDQUFDO0FBQzdELE9BQU8sRUFDTCxVQUFVLEVBRVYsaUJBQWlCLEVBRWpCLFVBQVUsR0FFWCxNQUFNLHdCQUF3QixDQUFDO0FBRWhDLE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxhQUFhO0lBRWpELFlBQW1CLE9BQWU7UUFDaEMsS0FBSyxFQUFFLENBQUM7UUFEUyxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBRWhDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBZ0I7UUFDL0IsTUFBTSxTQUFTLEdBQUc7WUFDaEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxhQUFhLEVBQWlCO1lBQzdELFdBQVcsRUFBRSxVQUFVLENBQUMsSUFBSTtZQUM1QixNQUFNLEVBQUU7Z0JBQ04scUJBQXFCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUEyQjthQUNoRTtTQUNGLENBQUM7UUFDRixNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQzNELENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLENBQ3BDLENBQUM7UUFDRixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQzFCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNyQixNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEUsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFnQixFQUFFLE9BQXlCO1FBQ3ZELElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztTQUMvRDtRQUNELElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDOUIsTUFBTSxVQUFVLEdBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDOUMsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDekMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO2FBQ3BDO1lBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ3BFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQzthQUNyQztpQkFBTTtnQkFDTCxXQUFXLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FDM0IsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUNyRCxDQUFDO2dCQUNGLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUNwQztRQUNILENBQUMsQ0FBQztRQUNGLE1BQU0sU0FBUyxHQUFHO1lBQ2hCLE1BQU0sRUFBRSxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsYUFBYSxFQUFpQjtZQUM3RCxXQUFXLEVBQUUsVUFBVSxDQUFDLElBQUk7WUFDNUIsTUFBTSxFQUFFO2dCQUNOLHFCQUFxQixFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBMkI7YUFDaEU7U0FDRixDQUFDO1FBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDakUsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxLQUFLLENBQUMsY0FBYyxDQUFDLElBQVUsRUFBRSxPQUFnQjtRQUMvQyxNQUFNLFNBQVMsR0FBRztZQUNoQixNQUFNLEVBQUUsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLGFBQWEsRUFBaUI7WUFDN0QsV0FBVyxFQUFFLFVBQVUsQ0FBQyxJQUFJO1lBQzVCLE1BQU0sRUFBRTtnQkFDTixNQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLGFBQWEsRUFBaUI7YUFDM0Q7U0FDRixDQUFDO1FBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyRCxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQzFCLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNyQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN0RCxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUNmLElBQVUsRUFDVixPQUFnQixFQUNoQixPQUF5QjtRQUV6QixJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtZQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7U0FDL0Q7UUFDRCxNQUFNLFNBQVMsR0FBRztZQUNoQixNQUFNLEVBQUUsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDLGFBQWEsRUFBaUI7WUFDN0QsV0FBVyxFQUFFLFVBQVUsQ0FBQyxJQUFJO1lBQzVCLE1BQU0sRUFBRTtnQkFDTixNQUFNLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLGFBQWEsRUFBaUI7YUFDM0Q7U0FDRixDQUFDO1FBQ0YsSUFBSSxXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUM5QixNQUFNLFVBQVUsR0FBZSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUM5QyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUM7YUFDcEM7WUFDRCxXQUFXLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3RFLE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUNyQyxDQUFDLENBQUM7UUFDRixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNqRSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztDQUNGIn0=