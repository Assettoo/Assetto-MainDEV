import axios from 'axios';
import { SUDTCollector } from './sudt-collector';
import { Cell, Amount, AmountUnit, OutPoint } from '..';
export class PwCollector extends SUDTCollector {
    constructor(apiBase) {
        super();
        this.apiBase = apiBase;
        this.apiBase = apiBase;
    }
    async getBalance(address) {
        const res = await axios.get(`${this.apiBase}/cell/getCapacityByLockHash?lockHash=${address
            .toLockScript()
            .toHash()}`);
        return new Amount(res.data.data, AmountUnit.shannon);
    }
    async collect(address, options) {
        if (!options || !options.neededAmount) {
            throw new Error("'neededAmount' in options must be provided");
        }
        const cells = [];
        const res = await axios.get(`${this.apiBase}/cell/unSpent?lockHash=${address
            .toLockScript()
            .toHash()}&capacity=${options.neededAmount.toHexString()}`);
        for (let { capacity, outPoint } of res.data.data) {
            capacity = new Amount(capacity, AmountUnit.shannon);
            outPoint = new OutPoint(outPoint.txHash, outPoint.index);
            cells.push(new Cell(capacity, address.toLockScript(), null, outPoint));
        }
        return cells;
    }
    async getSUDTBalance(sudt, address) {
        const lockHash = address.toLockScript().toHash();
        const typeHash = sudt.toTypeScript().toHash();
        const res = await axios.get(`${this.apiBase}/sudt/balance?lockHash=${lockHash}&typeHash=${typeHash}`);
        return new Amount(res.data.data.sudtAmount, AmountUnit.shannon);
    }
    async collectSUDT(sudt, address, options) {
        if (!options || !options.neededAmount) {
            throw new Error("'neededAmount' in options must be provided");
        }
        const cells = [];
        const lockHash = address.toLockScript().toHash();
        const typeHash = sudt.toTypeScript().toHash();
        const res = await axios.get(`${this.apiBase}/cell/unSpent?lockHash=${lockHash}&capacity=0x0&typeHash=${typeHash}&sudtAmount=${options.neededAmount.toHexString()}`);
        for (let { capacity, outPoint, type, data } of res.data.data) {
            capacity = new Amount(capacity, AmountUnit.shannon);
            outPoint = new OutPoint(outPoint.txHash, outPoint.index);
            cells.push(new Cell(capacity, address.toLockScript(), type, outPoint, data));
        }
        return cells;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHctY29sbGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbGxlY3RvcnMvcHctY29sbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUUxQixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLElBQUksRUFBVyxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBUSxNQUFNLElBQUksQ0FBQztBQUV2RSxNQUFNLE9BQU8sV0FBWSxTQUFRLGFBQWE7SUFDNUMsWUFBbUIsT0FBZTtRQUNoQyxLQUFLLEVBQUUsQ0FBQztRQURTLFlBQU8sR0FBUCxPQUFPLENBQVE7UUFFaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBZ0I7UUFDL0IsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUN6QixHQUFHLElBQUksQ0FBQyxPQUFPLHdDQUF3QyxPQUFPO2FBQzNELFlBQVksRUFBRTthQUNkLE1BQU0sRUFBRSxFQUFFLENBQ2QsQ0FBQztRQUNGLE9BQU8sSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQWdCLEVBQUUsT0FBeUI7UUFDdkQsSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUU7WUFDckMsTUFBTSxJQUFJLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1NBQy9EO1FBQ0QsTUFBTSxLQUFLLEdBQVcsRUFBRSxDQUFDO1FBQ3pCLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FDekIsR0FBRyxJQUFJLENBQUMsT0FB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