import JSBI from 'jsbi';
import { FormatOptions, Script } from '.';
import { AddressPrefix } from '@nervosnetwork/ckb-sdk-utils';
import { NervosAddressVersion } from './helpers/address';
export declare const shannonToCKB: (shannonAmount: string, options: FormatOptions) => string;
export declare const ckbToShannon: (ckbAmount: string) => string;
export declare const bnStringToRationalNumber: (bn: string, decimals: number, options: FormatOptions) => string;
export declare const rationalNumberToBnString: (rational: string, decimals: number) => string;
export declare const LumosConfigs: {
    PREFIX: string;
    SCRIPTS: {
        SECP256K1_BLAKE160: {
            SCRIPT: {
                code_hash: string;
                hash_type: string;
            };
            OUT_POINT: {
                tx_hash: string;
                index: string;
            };
            DEP_TYPE: string;
            SHORT_ID: number;
        };
        SECP256K1_BLAKE160_MULTISIG: {
            SCRIPT: {
                code_hash: string;
                hash_type: string;
            };
            OUT_POINT: {
                tx_hash: string;
                index: string;
            };
            DEP_TYPE: string;
            SHORT_ID: number;
        };
    };
}[];
export declare function byteArrayToHex(a: any): string;
export declare function hexToByteArray(h: string): any[];
export declare function getLumosConfigByNetworkPrefix(networkPrefix: AddressPrefix): {
    PREFIX: string;
    SCRIPTS: {
        SECP256K1_BLAKE160: {
            SCRIPT: {
                code_hash: string;
                hash_type: string;
            };
            OUT_POINT: {
                tx_hash: string;
                index: string;
            };
            DEP_TYPE: string;
            SHORT_ID: number;
        };
        SECP256K1_BLAKE160_MULTISIG: {
            SCRIPT: {
                code_hash: string;
                hash_type: string;
            };
            OUT_POINT: {
                tx_hash: string;
                index: string;
            };
            DEP_TYPE: string;
            SHORT_ID: number;
        };
    };
};
export declare function generateCkbAddressString(lockScript: Script, networkPrefix: AddressPrefix, addressVersion: NervosAddressVersion): string;
export declare function generatePre2021CkbAddress(script: any, { config }?: {
    config?: {
        PREFIX: string;
        SCRIPTS: {
            SECP256K1_BLAKE160: {
                SCRIPT: {
                    code_hash: string;
                    hash_type: string;
                };
                OUT_POINT: {
                    tx_hash: string;
                    index: string;
                };
                DEP_TYPE: string;
                SHORT_ID: number;
            };
            SECP256K1_BLAKE160_MULTISIG: {
                SCRIPT: {
                    code_hash: string;
                    hash_type: string;
                };
                OUT_POINT: {
                    tx_hash: string;
                    index: string;
                };
                DEP_TYPE: string;
                SHORT_ID: number;
            };
        };
    };
}): string;
export declare function parseAddress(address: string, { config }?: {
    config?: {
        PREFIX: string;
        SCRIPTS: {
            SECP256K1_BLAKE160: {
                SCRIPT: {
                    code_hash: string;
                    hash_type: string;
                };
                OUT_POINT: {
                    tx_hash: string;
                    index: string;
                };
                DEP_TYPE: string;
                SHORT_ID: number;
            };
            SECP256K1_BLAKE160_MULTISIG: {
                SCRIPT: {
                    code_hash: string;
                    hash_type: string;
                };
                OUT_POINT: {
                    tx_hash: string;
                    index: string;
                };
                DEP_TYPE: string;
                SHORT_ID: number;
            };
        };
    };
}): {
    args: string;
    code_hash: string;
    hash_type: string;
};
export declare function verifyCkbAddress(address: string): boolean;
export declare function verifyEthAddress(address: string): boolean;
export declare function verifyEosAddress(address: string): boolean;
export declare function verifyTronAddress(address: string): boolean;
export declare function spliceStr(original: string, idx: number, rem: number, str: string): string;
export declare const hexDataOccupiedBytes: (hexString: any) => number;
export declare const scriptOccupiedBytes: (script: any) => number;
export declare const cellOccupiedBytes: (cell: any) => number;
export declare function readBigUInt32LE(hex: any): JSBI;
export declare function toBigUInt64LE(num: any): string;
export declare function readBigUInt64LE(hex: any): JSBI;
export declare function toBigUInt128LE(u128: any): string;
export declare function readBigUInt128LE(hex: any): JSBI;
