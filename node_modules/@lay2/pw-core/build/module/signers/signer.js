import { Blake2bHasher } from '../hashers';
import { normalizers, Reader, transformers } from '../ckb-js-toolkit';
import { SerializeWitnessArgs, SerializeRawTransaction, } from '../ckb-lumos/core';
export class Signer {
    constructor(hasher) {
        this.hasher = hasher;
    }
    async sign(tx) {
        const messages = this.toMessages(tx);
        const witnesses = await this.signMessages(messages);
        for (let i = 0; i < messages.length; i++) {
            const { index } = messages[i];
            if (index < tx.witnessArgs.length &&
                typeof tx.witnessArgs[index] !== 'string') {
                witnesses[i] = new Reader(SerializeWitnessArgs(normalizers.NormalizeWitnessArgs({
                    ...tx.witnessArgs[index],
                    lock: witnesses[i],
                }))).serializeJson();
            }
        }
        tx = FillSignedWitnesses(tx, messages, witnesses);
        return tx;
    }
    toMessages(tx) {
        tx.validate();
        if (tx.raw.inputs.length !== tx.raw.inputCells.length) {
            throw new Error('Input number does not match!');
        }
        const txHash = new Blake2bHasher().hash(new Reader(SerializeRawTransaction(normalizers.NormalizeRawTransaction(transformers.TransformRawTransaction(tx.raw)))));
        const messages = [];
        const used = tx.raw.inputs.map((_input) => false);
        for (let i = 0; i < tx.raw.inputs.length; i++) {
            if (used[i]) {
                continue;
            }
            if (i >= tx.witnesses.length) {
                throw new Error(`Input ${i} starts a new script group, but witness is missing!`);
            }
            used[i] = true;
            this.hasher.update(txHash);
            const firstWitness = new Reader(tx.witnesses[i]);
            this.hasher.update(serializeBigInt(firstWitness.length()));
            this.hasher.update(firstWitness);
            for (let j = i + 1; j < tx.raw.inputs.length && j < tx.witnesses.length; j++) {
                if (tx.raw.inputCells[i].lock.sameWith(tx.raw.inputCells[j].lock)) {
                    used[j] = true;
                    const currentWitness = new Reader(tx.witnesses[j]);
                    this.hasher.update(serializeBigInt(currentWitness.length()));
                    this.hasher.update(currentWitness);
                }
            }
            messages.push({
                index: i,
                message: this.hasher.digest().serializeJson(),
                lock: tx.raw.inputCells[i].lock,
            });
            this.hasher.reset();
        }
        return messages;
    }
}
function FillSignedWitnesses(tx, messages, witnesses) {
    if (messages.length !== witnesses.length) {
        throw new Error('Invalid number of witnesses!');
    }
    for (let i = 0; i < messages.length; i++) {
        tx.witnesses[messages[i].index] = witnesses[i];
    }
    return tx;
}
function serializeBigInt(i) {
    const view = new DataView(new ArrayBuffer(8));
    view.setUint32(0, i, true);
    return view.buffer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NpZ25lcnMvc2lnbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBVSxhQUFhLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEUsT0FBTyxFQUNMLG9CQUFvQixFQUNwQix1QkFBdUIsR0FDeEIsTUFBTSxtQkFBbUIsQ0FBQztBQVMzQixNQUFNLE9BQWdCLE1BQU07SUFDMUIsWUFBdUMsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7SUFBRyxDQUFDO0lBSXpELEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBZTtRQUN4QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQ0UsS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTTtnQkFDN0IsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsRUFDekM7Z0JBQ0EsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUN2QixvQkFBb0IsQ0FDbEIsV0FBVyxDQUFDLG9CQUFvQixDQUFDO29CQUMvQixHQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFpQjtvQkFDekMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENB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