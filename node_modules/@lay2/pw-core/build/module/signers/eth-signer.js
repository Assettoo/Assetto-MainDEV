import { Signer } from './signer';
import { Keccak256Hasher } from '../hashers';
import { Platform } from '../providers';
import PWCore, { ChainID } from '../core';
// import {
//   ecsign,
//   bufferToHex,
//   toBuffer,
//   setLengthLeft,
//   hashPersonalMessage,
// } from 'ethereumjs-util';
// const a = '2A77A5C9DBA59D6F8B7A';
// const b = '2737A8A6D8E511CDC9439';
// const c = 'C97E919959D02502F8BCB50';
// function sendSync({ params }) {
//   const msg = hashPersonalMessage(toBuffer(params[0]))
//     .toString('hex')
//     .replace('0x', '');
//   const { r, s, v } = ecsign(
//     new Buffer(msg, 'hex'),
//     new Buffer(`${a}${b}${c}`, 'hex')
//   );
//   const hexsig = bufferToHex(
//     Buffer.concat([
//       setLengthLeft(r, 32),
//       setLengthLeft(s, 32),
//       toBuffer(v - 27),
//     ])
//   );
//   return hexsig;
// }
export class EthSigner extends Signer {
    constructor(from) {
        super(new Keccak256Hasher());
        this.from = from;
        this.currentPlatform = Platform.eth;
    }
    signMessages(messages) {
        return new Promise((resolve, reject) => {
            const from = this.from;
            const handleResult = (result) => {
                let v = Number.parseInt(result.slice(-2), 16);
                if (v >= 27)
                    v -= 27;
                result =
                    '0x' +
                        (PWCore.chainId === ChainID.ckb
                            ? ''
                            : this.currentPlatform.toString(16).padStart(2, '0')) +
                        result.slice(2, -2) +
                        v.toString(16).padStart(2, '0');
                return result;
            };
            if (typeof window.ethereum !== 'undefined') {
                window.ethereum
                    .request({
                    method: 'personal_sign',
                    params: [from, messages[0].message],
                })
                    .then((result) => {
                    resolve([handleResult(result)]);
                });
            }
            else if (!!window.web3) {
                window.web3.currentProvider.sendAsync({
                    method: 'personal_sign',
                    params: [messages[0].message, from],
                    from,
                }, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    if (result.error) {
                        reject(result.error);
                    }
                    resolve([handleResult(result.result)]);
                });
            }
            else {
                reject(new Error('window.ethereum/window.web3 is undefined, Ethereum environment is required.'));
            }
            // const from = this.from;
            // const params = [messages[0].message, from];
            // const method = 'personal_sign';
            // window.web3.currentProvider.sendAsync(
            //   { method, params, from },
            //   (err, result) => {
            //     if (err) {
            //       reject(err);
            //     }
            //     if (result.error) {
            //       reject(result.error);
            //     }
            //     result = result.result;
            //     let v = Number.parseInt(result.slice(-2), 16);
            //     if (v >= 27) v -= 27;
            //     result =
            //       '0x' +
            //       this.currentPlatform.toString(16).padStart(2, '0') +
            //       result.slice(2, -2) +
            //       v.toString(16).padStart(2, '0');
            //     resolve([result]);
            //   }
            // );
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoLXNpZ25lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zaWduZXJzL2V0aC1zaWduZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBVyxNQUFNLFVBQVUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDeEMsT0FBTyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDMUMsV0FBVztBQUNYLFlBQVk7QUFDWixpQkFBaUI7QUFDakIsY0FBYztBQUNkLG1CQUFtQjtBQUNuQix5QkFBeUI7QUFDekIsNEJBQTRCO0FBRTVCLG9DQUFvQztBQUNwQyxxQ0FBcUM7QUFDckMsdUNBQXVDO0FBRXZDLGtDQUFrQztBQUNsQyx5REFBeUQ7QUFDekQsdUJBQXVCO0FBQ3ZCLDBCQUEwQjtBQUUxQixnQ0FBZ0M7QUFDaEMsOEJBQThCO0FBQzlCLHdDQUF3QztBQUN4QyxPQUFPO0FBRVAsZ0NBQWdDO0FBQ2hDLHNCQUFzQjtBQUN0Qiw4QkFBOEI7QUFDOUIsOEJBQThCO0FBQzlCLDBCQUEwQjtBQUMxQixTQUFTO0FBQ1QsT0FBTztBQUVQLG1CQUFtQjtBQUNuQixJQUFJO0FBRUosTUFBTSxPQUFPLFNBQVUsU0FBUSxNQUFNO0lBR25DLFlBQTRCLElBQVk7UUFDdEMsS0FBSyxDQUFDLElBQUksZUFBZSxFQUFFLENBQUMsQ0FBQztRQURILFNBQUksR0FBSixJQUFJLENBQVE7UUFFdEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxZQUFZLENBQUMsUUFBbUI7UUFDOUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxNQUFNLElBQUksR0FBRyxJQUFJ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