import { RPC, transformers } from './ckb-js-toolkit';
import { CHAIN_SPECS } from './constants';
import { DefaultSigner } from './signers';
import { Collector } from './collectors';
import { SimpleBuilder, Builder, SimpleSUDTACPBuilder, SimpleSUDTBuilder, } from './builders';
import { Provider } from './providers';
export var ChainID;
(function (ChainID) {
    ChainID[ChainID["ckb"] = 0] = "ckb";
    ChainID[ChainID["ckb_testnet"] = 1] = "ckb_testnet";
    ChainID[ChainID["ckb_dev"] = 2] = "ckb_dev";
})(ChainID || (ChainID = {}));
/**
 * The default main class of pw-core
 */
export default class PWCore {
    constructor(nodeUrl) {
        this._rpc = new RPC(nodeUrl);
    }
    /**
     * set chain id for pw-core
     *
     * @param chainId chain id of ckb blockchain: 0 for mainnet, 1 for testnet, 2 for devnet
     * @param config chain config
     */
    static setChainId(chainId, config) {
        if (chainId !== ChainID.ckb && chainId !== ChainID.ckb_testnet && !config) {
            throw new Error('config must be provided for dev chain');
        }
        PWCore.chainId = chainId;
        PWCore.config = config ? config : CHAIN_SPECS[chainId];
    }
    /**
     * Initialize the environment required by pw-core
     */
    async init(provider, defaultCollector, chainId, config) {
        if (chainId !== undefined) {
            if (!(chainId in ChainID)) {
                throw new Error(`invalid chainId ${chainId}`);
            }
            PWCore.chainId = chainId;
        }
        else {
            const info = await this.rpc.get_blockchain_info();
            PWCore.chainId = {
                ckb: ChainID.ckb,
                ckb_testnet: ChainID.ckb_testnet,
                ckb_dev: ChainID.ckb_dev,
            }[info.chain];
        }
        if (PWCore.chainId === ChainID.ckb_dev) {
            if (!config) {
                throw new Error('config must be provided for dev chain');
            }
            PWCore.config = config;
        }
        else {
            // merge customized config to default one
            PWCore.config = {
                ...[CHAIN_SPECS.Lina, CHAIN_SPECS.Aggron][PWCore.chainId],
                ...config,
            };
        }
        if (provider instanceof Provider) {
            PWCore.provider = await provider.init();
        }
        else {
            throw new Error('provider must be provided');
        }
        if (defaultCollector instanceof Collector) {
            PWCore.defaultCollector = defaultCollector;
        }
        else {
            throw new Error('defaultCollector must be provided');
        }
        return this;
    }
    /**
     * Return a RPC instance defined in package 'ckb-js-toolkit'
     */
    get rpc() {
        return this._rpc;
    }
    /**
     * Transfer CKB to any address
     * @param address The receiver's address
     * @param amount The amount of CKB to send
     * @param options The transaction builder options for this transaction.
     */
    async send(address, amount, options) {
        const simpleBuilder = new SimpleBuilder(address, amount, options);
        return this.sendTransaction(simpleBuilder);
    }
    /**
     * Send an built transaction or a builder
     * @param toSend
     * @param signer
     */
    async sendTransaction(toSend, signer) {
        const tx = toSend instanceof Builder ? await toSend.build() : toSend;
        tx.validate();
        if (!signer) {
            signer = new DefaultSigner(PWCore.provider);
        }
        return this.rpc.send_transaction(transformers.TransformTransaction(await signer.sign(tx)), 'passthrough');
    }
    /**
     * Transfer sudt to any address
     * @param sudt The sudt definition
     * @param address the receiver's address
     * @param amount the aount of sudt to send
     * @param options The transaction builder options for this transaction.
     * @returns the transaction hash
     */
    async sendSUDT(sudt, address, amount, createAcp, signer, options) {
        const builder = createAcp
            ? new SimpleSUDTBuilder(sudt, address, amount, options)
            : new SimpleSUDTACPBuilder(sudt, address, amount, options);
        return this.sendTransaction(builder, signer);
    }
}
PWCore.config = CHAIN_SPECS[ChainID.ckb_testnet];
PWCore.chainId = ChainID.ckb_testnet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUcxQyxPQUFPLEVBQUUsYUFBYSxFQUFVLE1BQU0sV0FBVyxDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUNMLGFBQWEsRUFDYixPQUFPLEVBQ1Asb0JBQW9CLEVBQ3BCLGlCQUFpQixHQUdsQixNQUFNLFlBQVksQ0FBQztBQUNwQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3ZDLE1BQU0sQ0FBTixJQUFZLE9BSVg7QUFKRCxXQUFZLE9BQU87SUFDakIsbUNBQUcsQ0FBQTtJQUNILG1EQUFXLENBQUE7SUFDWCwyQ0FBTyxDQUFBO0FBQ1QsQ0FBQyxFQUpXLE9BQU8sS0FBUCxPQUFPLFFBSWxCO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsT0FBTyxPQUFPLE1BQU07SUFRekIsWUFBWSxPQUFlO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxPQUFnQixFQUFFLE1BQWU7UUFDakQsSUFBSSxPQUFPLEtBQUssT0FBTyxDQUFDLEdBQUcsSUFBSSxPQUFPLEtBQUssT0FBTyxDQUFDLFdBQVcsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUN6RSxNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7U0FDMUQ7UUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN6QixNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0s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