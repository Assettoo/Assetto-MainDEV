import JSBI from "jsbi";
import { Reader } from "./reader";
import { ValidateTransaction, ValidateOutPoint } from "./validators";
export class TransactionDumper {
    constructor(rpc, { validateTransaction = true, depGroupUnpacker = null } = {}) {
        this.rpc = rpc;
        this.validateTransaction = validateTransaction;
        this.depGroupUnpacker = depGroupUnpacker;
    }
    async dumpByHash(txHash) {
        const tx = (await this.rpc.get_transaction(txHash)).transaction;
        delete tx.hash;
        return await this.dump(tx);
    }
    async dump(tx) {
        if (this.validateTransaction) {
            ValidateTransaction(tx);
        }
        const mockInputs = [];
        for (const input of tx.inputs) {
            const { output, data, header } = await this._resolveOutPoint(input.previous_output);
            mockInputs.push({ input, output, data, header });
        }
        const mockCellDeps = [];
        for (const cellDep of tx.cell_deps) {
            const { output, data, header } = await this._resolveOutPoint(cellDep.out_point);
            mockCellDeps.push({
                cell_dep: cellDep,
                output,
                data,
                header
            });
            if (cellDep.dep_type === "dep_group") {
                if (!this.depGroupUnpacker) {
                    throw new Error("depGroupUnpacker must be provided when the transaction contains dep_group!");
                }
                const outPoints = this.depGroupUnpacker(new Reader(data));
                for (const outPoint of outPoints) {
                    ValidateOutPoint(outPoint);
                    const { output, data, header } = await this._resolveOutPoint(outPoint);
                    mockCellDeps.push({
                        cell_dep: {
                            out_point: outPoint,
                            dep_type: "code"
                        },
                        output,
                        data,
                        header
                    });
                }
            }
        }
        const mockHeaderDeps = [];
        for (const headerDep of tx.header_deps) {
            mockHeaderDeps.push(await this.rpc.get_header(headerDep));
        }
        return JSON.stringify({
            mock_info: {
                inputs: mockInputs,
                cell_deps: mockCellDeps,
                header_deps: mockHeaderDeps
            },
            tx
        });
    }
    async _resolveOutPoint(out_point) {
        const txStatus = await this.rpc.get_transaction(out_point.tx_hash);
        if (!txStatus || !txStatus.transaction) {
            throw new Error(`Transaction ${out_point.tx_hash} cannot be found!`);
        }
        const tx = txStatus.transaction;
        const index = JSBI.toNumber(JSBI.BigInt(out_point.index));
        if (index >= tx.outputs.length) {
            throw new Error(`Transaction ${out_point.tx_hash} does not have output ${index}!`);
        }
        const data = {
            output: tx.outputs[index],
            data: tx.outputs_data[index]
        };
        if (txStatus.tx_status.status === "committed") {
            data.header = txStatus.tx_status.block_hash;
        }
        return data;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb25fZHVtcGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NrYi1qcy10b29sa2l0L3RyYW5zYWN0aW9uX2R1bXBlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFckUsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUNFLEdBQUcsRUFDSCxFQUFFLG1CQUFtQixHQUFHLElBQUksRUFBRSxnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsR0FBRyxFQUFFO1FBRTVELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDO1FBQy9DLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztJQUMzQyxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNO1FBQ3JCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUNoRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDZixPQUFPLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ1gsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDNUIsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDekI7UUFDRCxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDdEIsS0FBSyxNQUFNLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQzdCLE1B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