import fetch from "cross-fetch";
import JSBI from "jsbi";
function mergeOptions(overrideOptions, defaultOptions) {
    defaultOptions = defaultOptions || {};
    const headers = Object.assign({}, defaultOptions.headers || {}, overrideOptions.headers || {});
    return Object.assign({}, defaultOptions, overrideOptions, {
        headers: headers
    });
}
const batchHandler = {
    get: (target, method, receiver) => {
        if (method === "send") {
            return async () => {
                const response = await fetch(target.uri, mergeOptions({
                    method: "post",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(target.payload)
                }, target.defaultOptions));
                return await response.json();
            };
        }
        return (...params) => {
            const id = target.id;
            target.id = target.id + 1;
            target.payload.push({
                jsonrpc: "2.0",
                id: id,
                method: method,
                params: params
            });
            return receiver;
        };
    }
};
const handler = {
    get: (target, method) => {
        if (method === "batch") {
            return () => {
                return new Proxy({
                    id: Math.round(Math.random() * 10000000),
                    payload: [],
                    uri: target.uri,
                    defaultOptions: target.defaultOptions
                }, batchHandler);
            };
        }
        return async (...params) => {
            const id = Math.round(Math.random() * 10000000);
            const response = await fetch(target.uri, mergeOptions({
                method: "post",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    jsonrpc: "2.0",
                    id: id,
                    method: method,
                    params: params
                })
            }, target.defaultOptions));
            const data = await response.json();
            if (data.id !== id) {
                throw new Error("JSONRPCError: response ID does not match request ID!");
            }
            if (data.error) {
                throw new Error(`JSONRPCError: server error ${JSON.stringify(data.error)}`);
            }
            return data.result;
        };
    }
};
export class RPC {
    constructor(uri, defaultOptions = {}) {
        this.uri = uri;
        this.defaultOptions = defaultOptions;
        return new Proxy(this, handler);
    }
    static create(uri) {
        return new RPC(uri);
    }
}
export function HexStringToBigInt(hexString) {
    return JSBI.BigInt(hexString);
}
export function BigIntToHexString(bigInt) {
    return "0x" + bigInt.toString(16);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NrYi1qcy10b29sa2l0L3JwYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxhQUFhLENBQUM7QUFDaEMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLFNBQVMsWUFBWSxDQUFDLGVBQWUsRUFBRSxjQUFjO0lBQ25ELGNBQWMsR0FBRyxjQUFjLElBQUksRUFBRSxDQUFDO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQzNCLEVBQUUsRUFDRixjQUFjLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFDNUIsZUFBZSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQzlCLENBQUM7SUFDRixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUU7UUFDeEQsT0FBTyxFQUFFLE9BQU87S0FDakIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sWUFBWSxHQUFHO0lBQ25CLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUU7UUFDaEMsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQ3JCLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQ2hCLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUMxQixNQUFNLENBQUMsR0FBRyxFQUNWLFlBQVksQ0FDVjtvQkFDRSxNQUFNLEVBQUUsTUFBTTtvQkFDZCxPQUFPLEVBQUU7d0JBQ1AsY0FBYyxFQUFFLGtCQUFrQjtxQkFDbkM7b0JBQ0QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztpQkFDckMsRUFDRCxNQUFNLENBQUMsY0FBYyxDQUN0QixDQUNGLENBQUM7Z0JBQ0YsT0FBTyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMvQixDQUFDLENBQUM7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