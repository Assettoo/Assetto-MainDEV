// This package provides validator functions that check JSON objects are
// following the correct format, so we can submit them to CKB via RPC
// directly
function assertObject(debugPath, object) {
    if (!(object instanceof Object)) {
        throw new Error(`${debugPath} is not an object!`);
    }
}
function assertObjectWithKeys(debugPath, object, expectedKeys, optionalKeys = []) {
    assertObject(debugPath, object);
    const providedKeys = Object.keys(object).sort();
    const requiredLength = expectedKeys.length;
    const maximalLength = expectedKeys.length + optionalKeys.length;
    const errorMessage = `${debugPath} does not have correct keys! Required keys: [${expectedKeys
        .sort()
        .join(', ')}], optional keys: [${optionalKeys
        .sort()
        .join(', ')}], actual keys: [${providedKeys.join(', ')}]`;
    if (providedKeys.length < requiredLength ||
        providedKeys.length > maximalLength) {
        throw new Error(errorMessage);
    }
    let optionalProvidedKeys = providedKeys.filter((key) => !expectedKeys.includes(key));
    if (providedKeys.length - optionalProvidedKeys.length !== requiredLength) {
        throw new Error(errorMessage);
    }
    if (optionalProvidedKeys.find((key) => !optionalKeys.includes(key))) {
        throw new Error(errorMessage);
    }
}
function assertHexString(debugPath, string) {
    if (!/^0x([0-9a-fA-F][0-9a-fA-F])*$/.test(string)) {
        throw new Error(`${debugPath} must be a hex string!`);
    }
}
function assertHash(debugPath, hash) {
    assertHexString(debugPath, hash);
    if (hash.length != 66) {
        throw new Error(`${debugPath} must be a hex string of 66 bytes long!`);
    }
}
function assertInteger(debugPath, i) {
    if (i === '0x0') {
        return;
    }
    if (!/^0x[1-9a-fA-F][0-9a-fA-F]*$/.test(i)) {
        throw new Error(`${debugPath} must be a hex integer!`);
    }
}
export function ValidateScript(script, { nestedValidation = true, debugPath = 'script' } = {}) {
    assertObjectWithKeys(debugPath, script, ['code_hash', 'hash_type', 'args'], []);
    assertHash(`${debugPath}.code_hash`, script.code_hash);
    assertHexString(`${debugPath}.args`, script.args);
    if (script.hash_type !== 'data' && script.hash_type !== 'type') {
        throw new Error(`${debugPath}.hash_type must be either data or type!`);
    }
}
export function ValidateOutPoint(outPoint, { nestedValidation = true, debugPath = 'out_point' } = {}) {
    assertObjectWithKeys(debugPath, outPoint, ['tx_hash', 'index'], []);
    assertHash(`${debugPath}.tx_hash`, outPoint.tx_hash);
    assertInteger(`${debugPath}.index`, outPoint.index);
}
export function ValidateCellInput(cellInput, { nestedValidation = true, debugPath = 'cell_input' } = {}) {
    assertObjectWithKeys(debugPath, cellInput, ['since', 'previous_output'], []);
    assertInteger(`${debugPath}.since`, cellInput.since);
    if (nestedValidation) {
        ValidateOutPoint(cellInput.previous_output, {
            debugPath: `${debugPath}.previous_output`,
        });
    }
}
export function ValidateCellOutput(cellOutput, { nestedValidation = true, debugPath = 'cell_output' } = {}) {
    assertObjectWithKeys(debugPath, cellOutput, ['capacity', 'lock'], ['type']);
    assertInteger(`${debugPath}.capacity`, cellOutput.capacity);
    if (nestedValidation) {
        ValidateScript(cellOutput.lock, {
            debugPath: `${debugPath}.lock`,
        });
        if (cellOutput.type) {
            ValidateScript(cellOutput.type, {
                debugPath: `${debugPath}.type`,
            });
        }
    }
}
export function ValidateCellDep(cellDep, { nestedValidation = true, debugPath = 'cell_dep' } = {}) {
    assertObjectWithKeys(debugPath, cellDep, ['out_point', 'dep_type'], []);
    if (cellDep.dep_type !== 'code' && cellDep.dep_type !== 'dep_group') {
        throw new Error(`${debugPath}.dep_type must be either code or dep_group!`);
    }
    if (nestedValidation) {
        ValidateOutPoint(cellDep.out_point, {
            debugPath: `${debugPath}.out_point`,
        });
    }
}
function assertArray(debugPath, array, validateFunction, nestedValidation) {
    if (!Array.isArray(array)) {
        throw new Error(`${debugPath} is not an array!`);
    }
    if (nestedValidation) {
        for (let i = 0; i < array.length; i++) {
            validateFunction(`${debugPath}[${i}]`, array[i]);
        }
    }
}
function toAssert(validateFunction, nestedValidation) {
    return function (debugPath, value) {
        validateFunction(value, {
            nestedValidation: nestedValidation,
            debugPath: debugPath,
        });
    };
}
function assertCommonTransaction(debugPath, rawTransaction, nestedValidation) {
    assertInteger(`${debugPath}.version`, rawTransaction.version);
    assertArray(`${debugPath}.cell_deps`, rawTransaction.cell_deps, toAssert(ValidateCellDep, nestedValidation), nestedValidation);
    assertArray(`${debugPath}.header_deps`, rawTransaction.header_deps, assertHash, nestedValidation);
    assertArray(`${debugPath}.inputs`, rawTransaction.inputs, toAssert(ValidateCellInput, nestedValidation), nestedValidation);
    assertArray(`${debugPath}.outputs`, rawTransaction.outputs, toAssert(ValidateCellOutput, nestedValidation), nestedValidation);
    assertArray(`${debugPath}.outputs_data`, rawTransaction.outputs_data, assertHexString, nestedValidation);
}
export function ValidateRawTransaction(rawTransaction, { nestedValidation = true, debugPath = 'raw_transaction' } = {}) {
    assertObjectWithKeys(debugPath, rawTransaction, [
        'version',
        'cell_deps',
        'header_deps',
        'inputs',
        'outputs',
        'outputs_data',
    ], []);
    assertCommonTransaction(debugPath, rawTransaction, nestedValidation);
}
export function ValidateTransaction(transaction, { nestedValidation = true, debugPath = 'transaction' } = {}) {
    assertObjectWithKeys(debugPath, transaction, [
        'version',
        'cell_deps',
        'header_deps',
        'inputs',
        'outputs',
        'outputs_data',
        'witnesses',
    ], []);
    assertCommonTransaction(debugPath, transaction, nestedValidation);
    assertArray(`${debugPath}.witnesses`, transaction.witnesses, assertHexString, nestedValidation);
}
function assertCommonHeader(debugPath, rawHeader) {
    assertInteger(`${debugPath}.version`, rawHeader.version);
    assertInteger(`${debugPath}.compact_target`, rawHeader.compact_target);
    assertInteger(`${debugPath}.timestamp`, rawHeader.timestamp);
    assertInteger(`${debugPath}.number`, rawHeader.number);
    assertInteger(`${debugPath}.epoch`, rawHeader.epoch);
    assertHash(`${debugPath}.parent_hash`, rawHeader.parent_hash);
    assertHash(`${debugPath}.transactions_root`, rawHeader.transactions_root);
    assertHash(`${debugPath}.proposals_hash`, rawHeader.proposals_hash);
    assertHash(`${debugPath}.uncles_hash`, rawHeader.uncles_hash);
    assertHash(`${debugPath}.dao`, rawHeader.dao);
}
export function ValidateRawHeader(rawHeader, { nestedValidation = true, debugPath = 'raw_header' } = {}) {
    assertObjectWithKeys(debugPath, rawHeader, [
        'version',
        'compact_target',
        'timestamp',
        'number',
        'epoch',
        'parent_hash',
        'transactions_root',
        'proposals_hash',
        'uncles_hash',
        'dao',
    ], []);
    assertCommonHeader(debugPath, rawHeader);
}
export function ValidateHeader(header, { nestedValidation = true, debugPath = 'header' } = {}) {
    assertObjectWithKeys(debugPath, header, [
        'version',
        'compact_target',
        'timestamp',
        'number',
        'epoch',
        'parent_hash',
        'transactions_root',
        'proposals_hash',
        'uncles_hash',
        'dao',
        'nonce',
    ], []);
    assertHexString(`${debugPath}.nonce`, header.nonce);
    if (header.nonce.length != 34) {
        throw new Error(`${debugPath}.nonce must be a hex string of 34 bytes long!`);
    }
}
function assertProposalShortId(debugPath, shortId) {
    assertHexString(debugPath, shortId);
    if (shortId.length != 22) {
        throw new Error(`${debugPath} must be a hex string of 22 bytes long!`);
    }
}
export function ValidateUncleBlock(uncleBlock, { nestedValidation = true, debugPath = 'uncle_block' } = {}) {
    assertObjectWithKeys(debugPath, uncleBlock, ['header', 'proposals'], []);
    if (nestedValidation) {
        ValidateHeader(uncleBlock.header, {
            debugPath: `${debugPath}.header`,
        });
    }
    assertArray(`${debugPath}.proposals`, uncleBlock.proposals, assertProposalShortId, nestedValidation);
}
export function ValidateBlock(block, { nestedValidation = true, debugPath = 'block' } = {}) {
    assertObjectWithKeys(debugPath, block, ['header', 'uncles', 'transactions', 'proposals'], []);
    if (nestedValidation) {
        ValidateHeader(block.header, {
            debugPath: `${debugPath}.header`,
        });
    }
    assertArray(`${debugPath}.uncles`, block.uncles, toAssert(ValidateUncleBlock, nestedValidation), nestedValidation);
    assertArray(`${debugPath}.transactions`, block.transactions, toAssert(ValidateTransaction, nestedValidation), nestedValidation);
    assertArray(`${debugPath}.proposals`, block.proposals, assertProposalShortId, nestedValidation);
}
export function ValidateCellbaseWitness(cellbaseWitness, { nestedValidation = true, debugPath = 'cellbase_witness' } = {}) {
    assertObjectWithKeys(debugPath, cellbaseWitness, ['lock', 'message'], []);
    assertHexString(`${debugPath}.message`, cellbaseWitness.message);
    if (nestedValidation) {
        ValidateScript(cellbaseWitness.lock, {
            debugPath: `${debugPath}.lock`,
        });
    }
}
export function ValidateWitnessArgs(witnessArgs, { nestedValidation = true, debugPath = 'witness_args' } = {}) {
    assertObjectWithKeys(debugPath, witnessArgs, [], ['lock', 'input_type', 'output_type']);
    if (witnessArgs.lock) {
        assertHexString(`${debugPath}.lock`, witnessArgs.lock);
    }
    if (witnessArgs.input_type) {
        assertHexString(`${debugPath}.input_type`, witnessArgs.input_type);
    }
    if (witnessArgs.output_type) {
        assertHexString(`${debugPath}.output_type`, witnessArgs.output_type);
    }
}
export const validators = {
    ValidateScript,
    ValidateOutPoint,
    ValidateCellInput,
    ValidateCellOutput,
    ValidateCellDep,
    ValidateRawTransaction,
    ValidateTransaction,
    ValidateRawHeader,
    ValidateHeader,
    ValidateUncleBlock,
    ValidateBlock,
    ValidateCellbaseWitness,
    ValidateWitnessArgs,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ja2ItanMtdG9vbGtpdC92YWxpZGF0b3JzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHdFQUF3RTtBQUN4RSxxRUFBcUU7QUFDckUsV0FBVztBQUVYLFNBQVMsWUFBWSxDQUFDLFNBQVMsRUFBRSxNQUFNO0lBQ3JDLElBQUksQ0FBQyxDQUFDLE1BQU0sWUFBWSxNQUFNLENBQUMsRUFBRTtRQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsU0FBUyxvQkFBb0IsQ0FBQyxDQUFDO0tBQ25EO0FBQ0gsQ0FBQztBQUVELFNBQVMsb0JBQW9CLENBQzNCLFNBQVMsRUFDVCxNQUFNLEVBQ04sWUFBWSxFQUNaLFlBQVksR0FBRyxFQUFFO0lBRWpCLFlBQVksQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoRCxNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQzNDLE1BQU0sYUFBYSxHQUFHLFlBQVksQ0FBQyxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztJQUNoRSxNQUFNLFlBQVksR0FBRyxHQUFHLFNBQVMsZ0RBQWdELFlBQVk7U0FDMUYsSUFBSSxFQUFFO1NBQ04sSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsWUFBWTtTQUM1QyxJQUFJLEVBQUU7U0FDTixJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDNUQsSUFDRSxZQUFZLENBQUMsTUFBTSxHQUFHLGNBQWM7UUFDcEMsWUFBWSxDQUFDLE1BQU0sR0FBRyxhQUFhLEVBQ25DO1FBQ0EsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztLQUMv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