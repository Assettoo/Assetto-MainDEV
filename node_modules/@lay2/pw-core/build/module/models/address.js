import { Script } from './script';
import PWCore, { ChainID } from '../core';
import { HashType } from '../interfaces';
import ecc from 'eosjs-ecc';
import { parseAddress, verifyCkbAddress, verifyEthAddress, verifyEosAddress, verifyTronAddress, cellOccupiedBytes, generateCkbAddressString, getLumosConfigByNetworkPrefix, } from '../utils';
import bs58 from 'bs58';
import axios from 'axios';
import ScatterJS from '@scatterjs/core';
import { AddressPrefix } from '@nervosnetwork/ckb-sdk-utils';
import { Keccak256Hasher } from '../hashers';
import { Reader } from '../ckb-js-toolkit';
import { Amount, AmountUnit } from './amount';
import { NervosAddressVersion } from '../helpers/address';
export { AddressPrefix } from '@nervosnetwork/ckb-sdk-utils';
export var AddressType;
(function (AddressType) {
    AddressType[AddressType["ckb"] = 0] = "ckb";
    AddressType[AddressType["eth"] = 1] = "eth";
    AddressType[AddressType["eos"] = 2] = "eos";
    AddressType[AddressType["tron"] = 3] = "tron";
    // libra,
})(AddressType || (AddressType = {}));
export var LockType;
(function (LockType) {
    LockType[LockType["default"] = 0] = "default";
    LockType[LockType["multisig"] = 1] = "multisig";
    LockType[LockType["pw"] = 2] = "pw";
})(LockType || (LockType = {}));
export function getDefaultPrefix() {
    return PWCore.chainId === ChainID.ckb
        ? AddressPrefix.Mainnet
        : AddressPrefix.Testnet;
}
export class Address {
    constructor(addressString, addressType, lockArgs) {
        this.addressString = addressString;
        this.addressType = addressType;
        this.lockArgs = lockArgs;
        if (!lockArgs) {
            switch (addressType) {
                case AddressType.eth:
                    this.addressString = addressString.toLowerCase();
                    this.lockArgs = this.addressString;
                    break;
                case AddressType.eos:
                    throw new Error('lock args must provided for eos address');
                case AddressType.tron:
                    this.lockArgs =
                        '0x' +
                            Buffer.from(bs58.decode(addressString)).toString('hex', 1, 21);
                    break;
                case AddressType.ckb:
                    const lock = parseAddress(this.addressString, {
                        config: getLumosConfigByNetworkPrefix(getDefaultPrefix()),
                    });
                    this.lockArgs = lock.args;
                    break;
            }
        }
    }
    static fromLockScript(lockScript, prefix = getDefaultPrefix(), addressVersion = NervosAddressVersion.latest) {
        return new Address(generateCkbAddressString(lockScript, prefix, addressVersion), AddressType.ckb);
    }
    static async getEosLockArgs(networkJSON, account) {
        const network = ScatterJS.Network.fromJson(networkJSON);
        const baseUrl = network.fullhost();
        const res = await axios.post(`${baseUrl}/v1/chain/get_account`, {
            account_name: account,
        });
        const data = res.data;
        const pubkey = data.permissions[0].required_auth.keys[0].key;
        const publicKeyHex = ecc.PublicKey(pubkey).toUncompressed().toHex();
        const publicHash = new Keccak256Hasher()
            .hash(new Reader(`0x${publicKeyHex.slice(2)}`))
            .serializeJson();
        const lockArgs = '0x' + publicHash.slice(-40);
        return lockArgs;
    }
    valid() {
        switch (this.addressType) {
            case AddressType.ckb:
                return verifyCkbAddress(this.addressString);
            case AddressType.eth:
                return verifyEthAddress(this.addressString);
            case AddressType.eos:
                return verifyEosAddress(this.addressString);
            case AddressType.tron:
                return verifyTronAddress(this.addressString);
            default:
                return true;
        }
    }
    minPaymentAmount() {
        if (this.isAcp()) {
            return new Amount('1', AmountUnit.shannon);
        }
        const bytes = cellOccupiedBytes({
            lock: this.toLockScript(),
            type: null,
            data: '0x',
        });
        return new Amount(bytes.toString());
    }
    isAcp() {
        const script = this.toLockScript();
        const { codeHash, hashType } = script;
        const acpLock = PWCore.config.acpLockList.filter((x) => x.codeHash === codeHash && x.hashType === hashType);
        return acpLock && acpLock.length > 0;
    }
    toCKBAddress(addressVersion = NervosAddressVersion.latest) {
        return generateCkbAddressString(this.toLockScript(), getDefaultPrefix(), addressVersion);
    }
    toLockScript() {
        if (this.addressType !== AddressType.ckb) {
            const { codeHash, hashType } = PWCore.config.pwLock.script;
            return new Script(codeHash, this.lockArgs, hashType);
        }
        const lock = parseAddress(this.addressString, {
            config: getLumosConfigByNetworkPrefix(getDefaultPrefix()),
        });
        return new Script(lock.code_hash, lock.args, HashType[lock.hash_type]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvYWRkcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxHQUFHLE1BQU0sV0FBVyxDQUFDO0FBQzVCLE9BQU8sRUFDTCxZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLGlCQUFpQixFQUNqQix3QkFBd0IsRUFDeEIsNkJBQTZCLEdBQzlCLE1BQU0sVUFBVSxDQUFDO0FBQ2xCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEtBQUssTUFBTSxPQUFPLENBQUM7QUFDMUIsT0FBTyxTQUFTLE1BQU0saUJBQWlCLENBQUM7QUFDeEMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTdELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDN0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTFELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUU3RCxNQUFNLENBQU4sSUFBWSxXQU1YO0FBTkQsV0FBWSxXQUFXO0lBQ3JCLDJDQUFHLENBQUE7SUFDSCwyQ0FBRyxDQUFBO0lBQ0gsMkNBQUcsQ0FBQTtJQUNILDZDQUFJLENBQUE7SUFDSixTQUFTO0FBQ1gsQ0FBQyxF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