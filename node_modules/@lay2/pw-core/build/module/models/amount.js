import JSBI from 'jsbi';
import { toBigUInt128LE, readBigUInt128LE, bnStringToRationalNumber, rationalNumberToBnString, } from '../utils';
export var AmountUnit;
(function (AmountUnit) {
    AmountUnit[AmountUnit["shannon"] = 0] = "shannon";
    AmountUnit[AmountUnit["ckb"] = 8] = "ckb";
})(AmountUnit || (AmountUnit = {}));
export class Amount {
    constructor(amount, decimals = AmountUnit.ckb) {
        if (!Number.isInteger(decimals) || decimals < 0) {
            throw new Error(`decimals ${decimals} must be a natural number`);
        }
        if (Number.isNaN(amount)) {
            throw new Error(`amount ${amount} must be a valid number`);
        }
        this.amount = rationalNumberToBnString(amount, decimals);
    }
    add(val) {
        return new Amount(JSBI.add(this.toBigInt(), val.toBigInt()).toString(), 0);
    }
    sub(val) {
        return new Amount(JSBI.subtract(this.toBigInt(), val.toBigInt()).toString(), 0);
    }
    gt(val) {
        return JSBI.GT(this.toBigInt(), val.toBigInt());
    }
    gte(val) {
        return JSBI.greaterThanOrEqual(this.toBigInt(), val.toBigInt());
    }
    lt(val) {
        return JSBI.LT(this.toBigInt(), val.toBigInt());
    }
    lte(val) {
        return JSBI.lessThanOrEqual(this.toBigInt(), val.toBigInt());
    }
    eq(val) {
        return JSBI.EQ(this.toBigInt(), val.toBigInt());
    }
    toString(decimals = AmountUnit.ckb, options) {
        return bnStringToRationalNumber(this.toBigInt().toString(), decimals, options);
    }
    toBigInt() {
        return JSBI.BigInt(this.amount);
    }
    toHexString() {
        return `0x${this.toBigInt().toString(16)}`;
    }
    toUInt128LE() {
        return toBigUInt128LE(JSBI.BigInt(this.toHexString()));
    }
    static fromUInt128LE(hex) {
        return new Amount(`0x${readBigUInt128LE(hex).toString(16)}`, AmountUnit.shannon);
    }
}
Amount.ZERO = new Amount('0');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1vdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9hbW91bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFDTCxjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLHdCQUF3QixFQUN4Qix3QkFBd0IsR0FDekIsTUFBTSxVQUFVLENBQUM7QUFFbEIsTUFBTSxDQUFOLElBQVksVUFHWDtBQUhELFdBQVksVUFBVTtJQUNwQixpREFBTyxDQUFBO0lBQ1AseUNBQU8sQ0FBQTtBQUNULENBQUMsRUFIVyxVQUFVLEtBQVYsVUFBVSxRQUdyQjtBQVNELE1BQU0sT0FBTyxNQUFNO0lBb0NqQixZQUFZLE1BQWMsRUFBRSxXQUFnQyxVQUFVLENBQUMsR0FBRztRQUN4RSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFO1lBQy9DLE1BQU0sSUFBSSxLQUFLLENBQUMsWUFBWSxRQUFRLDJCQUEyQixDQUFDLENBQUM7U0FDbEU7UUFFRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLE1BQU0seUJBQXlCLENBQUMsQ0FBQztTQUM1RDtRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUExQ0QsR0FBRyxDQUFDLEdBQVc7UUFDYixPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVztRQUNiLE9BQU8sSUFBSSxNQUFNLENBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQ3pELENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELEVBQUUsQ0FBQyxHQUFXO1FBQ1osT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVELEVBQUUsQ0FBQyxHQUFXO1FBQ1osT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxFQUFFLENBQUMsR0FBVztRQUNaLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQWVELFFBQVEsQ0FDTixXQUFnQyxVQUFVLENBQUMsR0FBRyxFQUM5QyxPQUF1QjtRQUV2QixPQUFPLHdCQUF3QixDQUM3QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQzFCLFFBQVEsRUFDUixPQUFPLENBQ1IsQ0FBQztJQUNKLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sS0FBSyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVELFdBQVc7UUFDVCxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRztRQUN0QixPQUFPLElBQUksTUFBTSxDQUNmLEtBQUssZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQ3pDLFVBQVUsQ0FBQyxPQUFPLENBQ25CLENBQUM7SUFDSixDQUFDOztBQTFFTSxXQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMifQ==