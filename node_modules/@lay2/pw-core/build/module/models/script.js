import { Address, AddressType, getDefaultPrefix } from './address';
import { generateCkbAddressString } from '../utils';
import { validators, transformers, normalizers } from '../ckb-js-toolkit';
import { SerializeScript } from '../ckb-lumos/core';
import { Blake2bHasher } from '../hashers';
import { NervosAddressVersion } from '../helpers/address';
export class Script {
    constructor(codeHash, args, hashType) {
        this.codeHash = codeHash;
        this.args = args;
        this.hashType = hashType;
    }
    static fromRPC(data) {
        if (!data)
            return undefined;
        validators.ValidateScript(data);
        return new Script(data.code_hash, data.args, data.hash_type);
    }
    sameWith(script) {
        validators.ValidateScript(transformers.TransformScript(script));
        return (this.args === script.args &&
            this.codeHash === script.codeHash &&
            this.hashType === script.hashType);
    }
    validate() {
        validators.ValidateScript(transformers.TransformScript(this));
        return true;
    }
    serializeJson() {
        return {
            code_hash: this.codeHash,
            args: this.args,
            hash_type: this.hashType,
        };
    }
    toHash() {
        return new Blake2bHasher()
            .update(SerializeScript(normalizers.NormalizeScript(transformers.TransformScript(this))))
            .digest()
            .serializeJson();
    }
    toAddress(prefix = getDefaultPrefix(), addressVersion = NervosAddressVersion.latest) {
        return new Address(generateCkbAddressString(this, prefix, addressVersion), AddressType.ckb);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9zY3JpcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRTFELE1BQU0sT0FBTyxNQUFNO0lBT2pCLFlBQ1MsUUFBZ0IsRUFDaEIsSUFBWSxFQUNaLFFBQWtCO1FBRmxCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNaLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDeEIsQ0FBQztJQVZKLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBUztRQUN0QixJQUFJLENBQUMsSUFBSTtZQUFFLE9BQU8sU0FBUyxDQUFDO1FBQzVCLFVBQVUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFRRCxRQUFRLENBQUMsTUFBYztRQUNyQixVQUFVLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNoRSxPQUFPLENBQ0wsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsSUFBSTtZQUN6QixJQUFJLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQyxRQUFRO1lBQ2pDLElBQUksQ0FBQyxRQUFRLEtBQUssTUFBTSxDQUFDLFFBQVEsQ0FDbEMsQ0FBQztJQUNKLENBQUM7SUFFRCxRQUFRO1FBQ04sVUFBVSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDOUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsYUFBYTtRQUNYLE9BQU87WUFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDeEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsU0FBUyxFQUFFLElBQUksQ0FBQyxRQUFRO1NBQ3pCLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sSUFBSSxhQUFhLEVBQUU7YUFDdkIsTUFBTSxDQUNMLGVBQWUsQ0FDYixXQUFXLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDaEUsQ0FDRjthQUNBLE1BQU0sRUFBRTthQUNSLGFBQWEsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxTQUFTLENBQ1AsTUFBTSxHQUFHLGdCQUFnQixFQUFFLEVBQzNCLGNBQWMsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNO1FBRTVDLE9BQU8sSUFBSSxPQUFPLENBQ2hCLHdCQUF3QixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsY0FBYyxDQUFDLEVBQ3RELFdBQVcsQ0FBQyxHQUFHLENBQ2hCLENBQUM7SUFDSixDQUFDO0NBQ0YifQ==