import { ECDSA_WITNESS_LEN } from '../constants';
import { validators, normalizers, transformers, Reader, } from '../ckb-js-toolkit';
import { SerializeTransaction, SerializeWitnessArgs } from '../ckb-lumos/core';
export class Transaction {
    constructor(raw, witnessArgs, _witnessLengths = [ECDSA_WITNESS_LEN]) {
        this.raw = raw;
        this.witnessArgs = witnessArgs;
        this.witnesses = raw.inputs.map((_) => '0x');
        // for (let i = 0; i < witnessLengths.length; i++) {
        //   this.witnesses[i] = '0x' + '0'.repeat(witnessLengths[i] - 2);
        // }
        if (!Array.isArray(witnessArgs))
            throw new Error('[Transaction] - witnessArgs must be an Array!');
        for (let i = 0; i < witnessArgs.length; i++) {
            if (typeof witnessArgs[i] !== 'string') {
                this.witnesses[i] = new Reader(SerializeWitnessArgs(normalizers.NormalizeWitnessArgs(this.witnessArgs[i]))).serializeJson();
            }
        }
    }
    sameWith(tx) {
        validators.ValidateTransaction(transformers.TransformTransaction(tx));
        return (tx.raw.sameWith(this.raw) &&
            tx.witnesses.join('-') === this.witnesses.join('-'));
    }
    getSize() {
        const tx = transformers.TransformTransaction(this);
        validators.ValidateTransaction(tx);
        // TODO: find out why the size is always smaller than the correct value by exact '4'
        return (SerializeTransaction(normalizers.NormalizeTransaction(tx)).byteLength + 4);
    }
    validate() {
        validators.ValidateTransaction(transformers.TransformTransaction(this));
        return this;
    }
    transform() {
        return transformers.TransformTransaction(this.serializeJson());
    }
    serializeJson() {
        return {
            ...this.raw,
            witnesses: this.witnesses,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNhY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kZWxzL3RyYW5zYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNqRCxPQUFPLEVBQ0wsVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLEVBQ1osTUFBTSxHQUNQLE1BQU0sbUJBQW1CLENBQUM7QUFDM0IsT0FBTyxFQUFFLG9CQUFvQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHL0UsTUFBTSxPQUFPLFdBQVc7SUFHdEIsWUFDUyxHQUFtQixFQUNuQixXQUFxQyxFQUM1QyxrQkFBNEIsQ0FBQyxpQkFBaUIsQ0FBQztRQUZ4QyxRQUFHLEdBQUgsR0FBRyxDQUFnQjtRQUNuQixnQkFBVyxHQUFYLFdBQVcsQ0FBMEI7UUFHNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0Msb0RBQW9EO1FBQ3BELGtFQUFrRTtRQUNsRSxJQUFJO1FBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0NBQStDLENBQUMsQ0FBQztRQUNuRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMzQyxJQUFJLE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtnQkFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FDNUIsb0JBQW9CLENBQ2xCLFdBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBZ0IsQ0FBQyxDQUNyRSxDQUNGLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDbkI7U0FDRjtJQUNILENBQUM7SUFFRCxRQUFRLENBQUMsRUFBZTtRQUN0QixVQUFVLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEUsT0FBTyxDQUNMLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDekIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQ3BELENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sRUFBRSxHQUFHLFlBQVksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuRCxVQUFVLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbkMsb0ZBQW9GO1FBQ3BGLE9BQU8sQ0FDTCxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUMxRSxDQUFDO0lBQ0osQ0FBQztJQUVELFFBQVE7UUFDTixVQUFVLENBQUMsbUJBQW1CLENBQUMsWUFBWSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDeEUsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sWUFBWSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO0lBQ2pFLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTztZQUNMLEdBQUcsSUFBSSxDQUFDLEdBQUc7WUFDWCxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7U0FDMUIsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9