"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Address = exports.getDefaultPrefix = exports.LockType = exports.AddressType = void 0;
const script_1 = require("./script");
const core_1 = __importStar(require("../core"));
const interfaces_1 = require("../interfaces");
const eosjs_ecc_1 = __importDefault(require("eosjs-ecc"));
const utils_1 = require("../utils");
const bs58_1 = __importDefault(require("bs58"));
const axios_1 = __importDefault(require("axios"));
const core_2 = __importDefault(require("@scatterjs/core"));
const ckb_sdk_utils_1 = require("@nervosnetwork/ckb-sdk-utils");
const hashers_1 = require("../hashers");
const ckb_js_toolkit_1 = require("../ckb-js-toolkit");
const amount_1 = require("./amount");
const address_1 = require("../helpers/address");
var ckb_sdk_utils_2 = require("@nervosnetwork/ckb-sdk-utils");
Object.defineProperty(exports, "AddressPrefix", { enumerable: true, get: function () { return ckb_sdk_utils_2.AddressPrefix; } });
var AddressType;
(function (AddressType) {
    AddressType[AddressType["ckb"] = 0] = "ckb";
    AddressType[AddressType["eth"] = 1] = "eth";
    AddressType[AddressType["eos"] = 2] = "eos";
    AddressType[AddressType["tron"] = 3] = "tron";
    // libra,
})(AddressType = exports.AddressType || (exports.AddressType = {}));
var LockType;
(function (LockType) {
    LockType[LockType["default"] = 0] = "default";
    LockType[LockType["multisig"] = 1] = "multisig";
    LockType[LockType["pw"] = 2] = "pw";
})(LockType = exports.LockType || (exports.LockType = {}));
function getDefaultPrefix() {
    return core_1.default.chainId === core_1.ChainID.ckb
        ? ckb_sdk_utils_1.AddressPrefix.Mainnet
        : ckb_sdk_utils_1.AddressPrefix.Testnet;
}
exports.getDefaultPrefix = getDefaultPrefix;
class Address {
    constructor(addressString, addressType, lockArgs) {
        this.addressString = addressString;
        this.addressType = addressType;
        this.lockArgs = lockArgs;
        if (!lockArgs) {
            switch (addressType) {
                case AddressType.eth:
                    this.addressString = addressString.toLowerCase();
                    this.lockArgs = this.addressString;
                    break;
                case AddressType.eos:
                    throw new Error('lock args must provided for eos address');
                case AddressType.tron:
                    this.lockArgs =
                        '0x' +
                            Buffer.from(bs58_1.default.decode(addressString)).toString('hex', 1, 21);
                    break;
                case AddressType.ckb:
                    const lock = utils_1.parseAddress(this.addressString, {
                        config: utils_1.getLumosConfigByNetworkPrefix(getDefaultPrefix()),
                    });
                    this.lockArgs = lock.args;
                    break;
            }
        }
    }
    static fromLockScript(lockScript, prefix = getDefaultPrefix(), addressVersion = address_1.NervosAddressVersion.latest) {
        return new Address(utils_1.generateCkbAddressString(lockScript, prefix, addressVersion), AddressType.ckb);
    }
    static async getEosLockArgs(networkJSON, account) {
        const network = core_2.default.Network.fromJson(networkJSON);
        const baseUrl = network.fullhost();
        const res = await axios_1.default.post(`${baseUrl}/v1/chain/get_account`, {
            account_name: account,
        });
        const data = res.data;
        const pubkey = data.permissions[0].required_auth.keys[0].key;
        const publicKeyHex = eosjs_ecc_1.default.PublicKey(pubkey).toUncompressed().toHex();
        const publicHash = new hashers_1.Keccak256Hasher()
            .hash(new ckb_js_toolkit_1.Reader(`0x${publicKeyHex.slice(2)}`))
            .serializeJson();
        const lockArgs = '0x' + publicHash.slice(-40);
        return lockArgs;
    }
    valid() {
        switch (this.addressType) {
            case AddressType.ckb:
                return utils_1.verifyCkbAddress(this.addressString);
            case AddressType.eth:
                return utils_1.verifyEthAddress(this.addressString);
            case AddressType.eos:
                return utils_1.verifyEosAddress(this.addressString);
            case AddressType.tron:
                return utils_1.verifyTronAddress(this.addressString);
            default:
                return true;
        }
    }
    minPaymentAmount() {
        if (this.isAcp()) {
            return new amount_1.Amount('1', amount_1.AmountUnit.shannon);
        }
        const bytes = utils_1.cellOccupiedBytes({
            lock: this.toLockScript(),
            type: null,
            data: '0x',
        });
        return new amount_1.Amount(bytes.toString());
    }
    isAcp() {
        const script = this.toLockScript();
        const { codeHash, hashType } = script;
        const acpLock = core_1.default.config.acpLockList.filter((x) => x.codeHash === codeHash && x.hashType === hashType);
        return acpLock && acpLock.length > 0;
    }
    toCKBAddress(addressVersion = address_1.NervosAddressVersion.latest) {
        return utils_1.generateCkbAddressString(this.toLockScript(), getDefaultPrefix(), addressVersion);
    }
    toLockScript() {
        if (this.addressType !== AddressType.ckb) {
            const { codeHash, hashType } = core_1.default.config.pwLock.script;
            return new script_1.Script(codeHash, this.lockArgs, hashType);
        }
        const lock = utils_1.parseAddress(this.addressString, {
            config: utils_1.getLumosConfigByNetworkPrefix(getDefaultPrefix()),
        });
        return new script_1.Script(lock.code_hash, lock.args, interfaces_1.HashType[lock.hash_type]);
    }
}
exports.Address = Address;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvYWRkcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEscUNBQWtDO0FBQ2xDLGdEQUEwQztBQUMxQyw4Q0FBeUM7QUFDekMsMERBQTRCO0FBQzVCLG9DQVNrQjtBQUNsQixnREFBd0I7QUFDeEIsa0RBQTBCO0FBQzFCLDJEQUF3QztBQUN4QyxnRUFBNkQ7QUFFN0Qsd0NBQTZDO0FBQzdDLHNEQUEyQztBQUMzQyxxQ0FBOEM7QUFDOUMsZ0RBQTBEO0FBRTFELDhEQUE2RDtBQUFwRCw4R0FBQSxhQUFhLE9BQUE7QUFFdEIsSUFBWSxXQU1YO0FBTkQsV0FBWSxXQUFXO0lBQ3JCLDJDQUFHLENBQUE7SUFDSCwyQ0FBRyxDQUFBO0lBQ0gsMkNBQUcsQ0FBQTtJQUNILDZDQUFJLENBQUE7SUFDSixTQUFTO0FBQ1gsQ0FBQyxFQU5XLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBTXRCO0FBRUQsSUFBWSxRQUlYO0FBSkQsV0FBWSxRQUFRO0lBQ2xCLDZDQUFPLENBQUE7SUFDUCwrQ0FBUSxDQUFBO0lBQ1IsbUNBQUUsQ0FBQTtBQUNKLENBQUMsRUFKVyxRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQUluQjtBQUVELFNBQWdCLGdCQUFnQjtJQUM5QixPQUFPLGNBQU0sQ0FBQyxPQUFPLEtBQUssY0FBTyxDQUFDLEdBQUc7UUFDbkMsQ0FBQyxDQUFDLDZCQUFhLENBQUMsT0FBTztRQUN2QixDQUFDLENBQUMsNkJBQWEsQ0FBQyxPQUFPLENBQUM7QUFDNUIsQ0FBQztBQUpELDRDQUlDO0FBRUQsTUFBYSxPQUFPO0lBK0JsQixZQUNXLGFBQXFCLEVBQ3JCLFdBQXdCLEVBQ3hCLFFBQWlCO1FBRmpCLGtCQUFhLEdBQWIsYUFBYSxDQUFRO1FBQ3JCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ3hCLGFB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