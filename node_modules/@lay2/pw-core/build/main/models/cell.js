"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cell = void 0;
const interfaces_1 = require("../interfaces");
const script_1 = require("./script");
const out_point_1 = require("./out-point");
const cell_input_1 = require("./cell-input");
// import { minimalCellCapacity } from '../utils';
const amount_1 = require("./amount");
const ckb_js_toolkit_1 = require("../ckb-js-toolkit");
const utils_1 = require("../utils");
class Cell {
    constructor(capacity, lock, type, outPoint, data = '0x') {
        this.capacity = capacity;
        this.lock = lock;
        this.type = type;
        this.outPoint = outPoint;
        this.data = data;
        this.spaceCheck();
    }
    static fromRPC(data) {
        if (!data) {
            throw new Error('Cannot create cell from empty data');
        }
        ckb_js_toolkit_1.validators.ValidateCellOutput(data);
        return new Cell(data.capacity, script_1.Script.fromRPC(data.lock), script_1.Script.fromRPC(data.type), out_point_1.OutPoint.fromRPC(data.out_point), data.data);
    }
    static async loadFromBlockchain(rpc, outPoint) {
        const index = Number(outPoint.index);
        const { transaction: { outputs, outputs_data }, } = await rpc.get_transaction(outPoint.txHash);
        const { capacity, lock, type } = outputs[index];
        return new Cell(new amount_1.Amount(capacity, amount_1.AmountUnit.shannon), new script_1.Script(lock.code_hash, lock.args, interfaces_1.HashType[lock.hash_type]), type
            ? new script_1.Script(type.code_hash, type.args, interfaces_1.HashType[type.hash_type])
            : null, outPoint, outputs_data[index]);
    }
    clone() {
        return new Cell(this.capacity, this.lock, this.type, this.outPoint, this.data);
    }
    sameWith(cell) {
        if (!cell || !cell.outPoint || !this.outPoint) {
            throw new Error('to be compared, cells must have outPoint value');
        }
        return cell.outPoint.sameWith(this.outPoint);
    }
    resize() {
        // const base = SerializeCellOutput(
        //   normalizers.NormalizeCellOutput(transformers.TransformCellOutput(this))
        // ).byteLength;
        const base = this.type ? 102 : 61;
        const extra = new Buffer(this.data.replace('0x', ''), 'hex').byteLength;
        const size = base + extra;
        this.capacity = new amount_1.Amount(size.toString());
        return size;
    }
    spaceCheck() {
        if (this.capacity.lt(this.occupiedCapacity())) {
            throw new Error(`cell capacity ${this.capacity.toString(amount_1.AmountUnit.ckb)} less than the min capacity ${this.occupiedCapacity().toString(amount_1.AmountUnit.ckb)}`);
        }
        return true;
    }
    occupiedCapacity() {
        return new amount_1.Amount(utils_1.cellOccupiedBytes(this).toString(), amount_1.AmountUnit.ckb);
    }
    availableFee() {
        return this.capacity.sub(this.occupiedCapacity());
    }
    toCellInput(since = '0x0') {
        return this.outPoint ? new cell_input_1.CellInput(this.outPoint, since) : undefined;
    }
    validate() {
        ckb_js_toolkit_1.validators.ValidateCellOutput(ckb_js_toolkit_1.transformers.TransformCellOutput(this));
        if (this.outPoint) {
            ckb_js_toolkit_1.validators.ValidateCellInput(ckb_js_toolkit_1.transformers.TransformCellInput(this.toCellInput()));
        }
        return this;
    }
    // CellOutput format
    serializeJson() {
        return {
            capacity: this.capacity.toHexString(),
            lock: this.lock,
            type: this.type,
        };
    }
    setData(data) {
        data = data.trim();
        const bytes = [];
        for (let i = 0; i < data.length; i++) {
            bytes.push(data.charCodeAt(i));
        }
        this.data = utils_1.byteArrayToHex(bytes);
        this.spaceCheck();
    }
    setHexData(data) {
        data = data.trim();
        if (!data.startsWith('0x')) {
            throw new Error('Hex data should start with 0x');
        }
        this.data = data;
        this.spaceCheck();
    }
    getData() {
        return utils_1.hexToByteArray(this.data.trim())
            .map((char) => String.fromCharCode(char))
            .join('');
    }
    getHexData() {
        return this.data.trim();
    }
    setSUDTAmount(amount) {
        this.data = amount.toUInt128LE() + this.data.slice(34);
    }
    getSUDTAmount() {
        const sudtAmountData = this.data.slice(0, 34);
        return amount_1.Amount.fromUInt128LE(sudtAmountData);
    }
    isEmpty() {
        return this.data.trim() === '0x';
    }
}
exports.Cell = Cell;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbHMvY2VsbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw4Q0FBbUQ7QUFDbkQscUNBQWtDO0FBQ2xDLDJDQUF1QztBQUN2Qyw2Q0FBeUM7QUFDekMsa0RBQWtEO0FBQ2xELHFDQUE4QztBQUM5QyxzREFBa0U7QUFDbEUsb0NBQTZFO0FBRTdFLE1BQWEsSUFBSTtJQW9DZixZQUNTLFFBQWdCLEVBQ2hCLElBQVksRUFDWixJQUFhLEVBQ2IsUUFBbUIsRUFDbEIsT0FBZSxJQUFJO1FBSnBCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNaLFNBQUksR0FBSixJQUFJLENBQVM7UUFDYixhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ2xCLFNBQUksR0FBSixJQUFJLENBQWU7UUFFM0IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUEzQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFTO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7U0FDdkQ7UUFDRCwyQkFBVSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxJQUFJLENBQ2IsSUFBSSxDQUFDLFFBQVEsRUFDYixlQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDekIsZUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3pCLG9CQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFDaEMsSUFBSSxDQUFDLElBQUksQ0FDVixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBUSxFQUFFLFFBQWtCO1FBQzFELE1BQU0s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