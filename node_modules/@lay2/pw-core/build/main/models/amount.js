"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Amount = exports.AmountUnit = void 0;
const jsbi_1 = __importDefault(require("jsbi"));
const utils_1 = require("../utils");
var AmountUnit;
(function (AmountUnit) {
    AmountUnit[AmountUnit["shannon"] = 0] = "shannon";
    AmountUnit[AmountUnit["ckb"] = 8] = "ckb";
})(AmountUnit = exports.AmountUnit || (exports.AmountUnit = {}));
class Amount {
    constructor(amount, decimals = AmountUnit.ckb) {
        if (!Number.isInteger(decimals) || decimals < 0) {
            throw new Error(`decimals ${decimals} must be a natural number`);
        }
        if (Number.isNaN(amount)) {
            throw new Error(`amount ${amount} must be a valid number`);
        }
        this.amount = utils_1.rationalNumberToBnString(amount, decimals);
    }
    add(val) {
        return new Amount(jsbi_1.default.add(this.toBigInt(), val.toBigInt()).toString(), 0);
    }
    sub(val) {
        return new Amount(jsbi_1.default.subtract(this.toBigInt(), val.toBigInt()).toString(), 0);
    }
    gt(val) {
        return jsbi_1.default.GT(this.toBigInt(), val.toBigInt());
    }
    gte(val) {
        return jsbi_1.default.greaterThanOrEqual(this.toBigInt(), val.toBigInt());
    }
    lt(val) {
        return jsbi_1.default.LT(this.toBigInt(), val.toBigInt());
    }
    lte(val) {
        return jsbi_1.default.lessThanOrEqual(this.toBigInt(), val.toBigInt());
    }
    eq(val) {
        return jsbi_1.default.EQ(this.toBigInt(), val.toBigInt());
    }
    toString(decimals = AmountUnit.ckb, options) {
        return utils_1.bnStringToRationalNumber(this.toBigInt().toString(), decimals, options);
    }
    toBigInt() {
        return jsbi_1.default.BigInt(this.amount);
    }
    toHexString() {
        return `0x${this.toBigInt().toString(16)}`;
    }
    toUInt128LE() {
        return utils_1.toBigUInt128LE(jsbi_1.default.BigInt(this.toHexString()));
    }
    static fromUInt128LE(hex) {
        return new Amount(`0x${utils_1.readBigUInt128LE(hex).toString(16)}`, AmountUnit.shannon);
    }
}
exports.Amount = Amount;
Amount.ZERO = new Amount('0');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1vdW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9hbW91bnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLG9DQUtrQjtBQUVsQixJQUFZLFVBR1g7QUFIRCxXQUFZLFVBQVU7SUFDcEIsaURBQU8sQ0FBQTtJQUNQLHlDQUFPLENBQUE7QUFDVCxDQUFDLEVBSFcsVUFBVSxHQUFWLGtCQUFVLEtBQVYsa0JBQVUsUUFHckI7QUFTRCxNQUFhLE1BQU07SUFvQ2pCLFlBQVksTUFBYyxFQUFFLFdBQWdDLFVBQVUsQ0FBQyxHQUFHO1FBQ3hFLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsR0FBRyxDQUFDLEVBQUU7WUFDL0MsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLFFBQVEsMkJBQTJCLENBQUMsQ0FBQztTQUNsRTtRQUVELElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN4QixNQUFNLElBQUksS0FBSyxDQUFDLFVBQVUsTUFBTSx5QkFBeUIsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxnQ0FBd0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQTFDRCxHQUFHLENBQUMsR0FBVztRQUNiLE9BQU8sSUFBSSxNQUFNLENBQUMsY0FBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELEdBQUcsQ0FBQyxHQUFXO1FBQ2IsT0FBTyxJQUFJLE1BQU0sQ0FDZixjQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFDekQsQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsRUFBRSxDQUFDLEdBQVc7UUFDWixPQUFPLGNBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVztRQUNiLE9BQU8sY0FBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRUQsRUFBRSxDQUFDLEdBQVc7UUFDWixPQUFPLGNBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxHQUFHLENBQUMsR0FBVztRQUNiLE9BQU8sY0FBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELEVBQUUsQ0FBQyxHQUFXO1FBQ1osT0FBTyxjQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBZUQsUUFBUSxDQUNOLFdBQWdDLFVBQVUsQ0FBQyxHQUFHLEVBQzlDLE9BQXVCO1FBRXZCLE9BQU8sZ0NBQXdCLENBQzdCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFDMUIsUUFBUSxFQUNSLE9BQU8sQ0FDUixDQUFDO0lBQ0osQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLGNBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxXQUFXO1FBQ1QsT0FBTyxLQUFLLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRUQsV0FBVztRQUNULE9BQU8sc0JBQWMsQ0FBQyxjQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRztRQUN0QixPQUFPLElBQUksTUFBTSxDQUNmLEtBQUssd0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQ3pDLFVBQVUsQ0FBQyxPQUFPLENBQ25CLENBQUM7SUFDSixDQUFDOztBQTNFSCx3QkE0RUM7QUEzRVEsV0FBSSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDIn0=