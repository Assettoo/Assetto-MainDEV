"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Script = void 0;
const address_1 = require("./address");
const utils_1 = require("../utils");
const ckb_js_toolkit_1 = require("../ckb-js-toolkit");
const core_1 = require("../ckb-lumos/core");
const hashers_1 = require("../hashers");
const address_2 = require("../helpers/address");
class Script {
    constructor(codeHash, args, hashType) {
        this.codeHash = codeHash;
        this.args = args;
        this.hashType = hashType;
    }
    static fromRPC(data) {
        if (!data)
            return undefined;
        ckb_js_toolkit_1.validators.ValidateScript(data);
        return new Script(data.code_hash, data.args, data.hash_type);
    }
    sameWith(script) {
        ckb_js_toolkit_1.validators.ValidateScript(ckb_js_toolkit_1.transformers.TransformScript(script));
        return (this.args === script.args &&
            this.codeHash === script.codeHash &&
            this.hashType === script.hashType);
    }
    validate() {
        ckb_js_toolkit_1.validators.ValidateScript(ckb_js_toolkit_1.transformers.TransformScript(this));
        return true;
    }
    serializeJson() {
        return {
            code_hash: this.codeHash,
            args: this.args,
            hash_type: this.hashType,
        };
    }
    toHash() {
        return new hashers_1.Blake2bHasher()
            .update(core_1.SerializeScript(ckb_js_toolkit_1.normalizers.NormalizeScript(ckb_js_toolkit_1.transformers.TransformScript(this))))
            .digest()
            .serializeJson();
    }
    toAddress(prefix = address_1.getDefaultPrefix(), addressVersion = address_2.NervosAddressVersion.latest) {
        return new address_1.Address(utils_1.generateCkbAddressString(this, prefix, addressVersion), address_1.AddressType.ckb);
    }
}
exports.Script = Script;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZGVscy9zY3JpcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsdUNBQW1FO0FBQ25FLG9DQUFvRDtBQUNwRCxzREFBMEU7QUFDMUUsNENBQW9EO0FBQ3BELHdDQUEyQztBQUMzQyxnREFBMEQ7QUFFMUQsTUFBYSxNQUFNO0lBT2pCLFlBQ1MsUUFBZ0IsRUFDaEIsSUFBWSxFQUNaLFFBQWtCO1FBRmxCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNaLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDeEIsQ0FBQztJQVZKLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBUztRQUN0QixJQUFJLENBQUMsSUFBSTtZQUFFLE9BQU8sU0FBUyxDQUFDO1FBQzVCLDJCQUFVLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hDLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBUUQsUUFBUSxDQUFDLE1BQWM7UUFDckIsMkJBQVUsQ0FBQyxjQUFjLENBQUMsNkJBQVksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNoRSxPQUFPLENBQ0wsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsSUFBSTtZQUN6QixJQUFJLENBQUMsUUFBUSxLQUFLLE1BQU0sQ0FBQyxRQUFRO1lBQ2pDLElBQUksQ0FBQyxRQUFRLEtBQUssTUFBTSxDQUFDLFFBQVEsQ0FDbEMsQ0FBQztJQUNKLENBQUM7SUFFRCxRQUFRO1FBQ04sMkJBQVUsQ0FBQyxjQUFjLENBQUMsNkJBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5RCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTztZQUNMLFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN4QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVE7U0FDekIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxJQUFJLHVCQUFhLEVBQUU7YUFDdkIsTUFBTSxDQUNMLHNCQUFlLENBQ2IsNEJBQVcsQ0FBQyxlQUFlLENBQUMsNkJBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FDaEUsQ0FDRjthQUNBLE1BQU0sRUFBRTthQUNSLGFBQWEsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxTQUFTLENBQ1AsTUFBTSxHQUFHLDBCQUFnQixFQUFFLEVBQzNCLGNBQWMsR0FBRyw4QkFBb0IsQ0FBQyxNQUFNO1FBRTVDLE9BQU8sSUFBSSxpQkFBTyxDQUNoQixnQ0FBd0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGNBQWMsQ0FBQyxFQUN0RCxxQkFBVyxDQUFDLEdBQUcsQ0FDaEIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXZERCx3QkF1REMifQ==