"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleBuilder = void 0;
const builder_1 = require("../builders/builder");
const models_1 = require("../models");
const core_1 = __importDefault(require("../core"));
const simple_acp_builder_1 = require("./simple-acp-builder");
class SimpleBuilder extends builder_1.Builder {
    constructor(address, amount, options = {}) {
        super(options.feeRate, options.collector, options.witnessArgs);
        this.address = address;
        this.amount = amount;
        this.options = options;
        this.simpleACPBuilder = new simple_acp_builder_1.SimpleACPBuilder(this.address, this.amount, this.options);
    }
    async build(fee = models_1.Amount.ZERO) {
        if (this.amount.lt(builder_1.Builder.MIN_CHANGE)) {
            return this.simpleACPBuilder.build();
        }
        const outputCell = new models_1.Cell(this.amount, this.address.toLockScript());
        const data = this.options.data;
        if (data) {
            if (data.startsWith('0x')) {
                outputCell.setHexData(data);
            }
            else {
                outputCell.setData(data);
            }
        }
        const neededAmount = this.amount.add(builder_1.Builder.MIN_CHANGE).add(fee);
        let inputSum = new models_1.Amount('0');
        const inputCells = [];
        // fill the inputs
        const cells = await this.collector.collect(core_1.default.provider.address, {
            neededAmount,
        });
        for (const cell of cells) {
            inputCells.push(cell);
            inputSum = inputSum.add(cell.capacity);
            if (inputSum.gt(neededAmount))
                break;
        }
        if (inputSum.lt(neededAmount)) {
            throw new Error(`input capacity not enough, need ${neededAmount.toString(models_1.AmountUnit.ckb)}, got ${inputSum.toString(models_1.AmountUnit.ckb)}`);
        }
        const changeCell = new models_1.Cell(inputSum.sub(outputCell.capacity), core_1.default.provider.address.toLockScript());
        const tx = new models_1.Transaction(new models_1.RawTransaction(inputCells, [outputCell, changeCell]), [this.witnessArgs]);
        this.fee = builder_1.Builder.calcFee(tx, this.feeRate);
        if (changeCell.capacity.gte(builder_1.Builder.MIN_CHANGE.add(this.fee))) {
            changeCell.capacity = changeCell.capacity.sub(this.fee);
            tx.raw.outputs.pop();
            tx.raw.outputs.push(changeCell);
            return tx;
        }
        return this.build(this.fee);
    }
    getCollector() {
        return this.collector;
    }
}
exports.SimpleBuilder = SimpleBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvc2ltcGxlLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaURBQThDO0FBQzlDLHNDQU9tQjtBQUNuQixtREFBNkI7QUFDN0IsNkRBQXdEO0FBR3hELE1BQWEsYUFBYyxTQUFRLGlCQUFPO0lBR3hDLFlBQ1UsT0FBZ0IsRUFDaEIsTUFBYyxFQUNaLFVBQXlCLEVBQUU7UUFFckMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFKdkQsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ1osWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFHckMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUkscUNBQWdCLENBQzFDLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsT0FBTyxDQUNiLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFjLGVBQU0sQ0FBQyxJQUFJO1FBQ25DLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsaUJBQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0QyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN0QztRQUVELE1BQU0sVUFBVSxHQUFHLElBQUksYUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO1FBRXRFLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQy9CLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxJQUFJLENBQUMsVUFBVSxD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