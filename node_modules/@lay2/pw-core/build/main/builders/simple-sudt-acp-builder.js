"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleSUDTACPBuilder = void 0;
const builder_1 = require("./builder");
const models_1 = require("../models");
const __1 = __importDefault(require(".."));
const sudt_collector_1 = require("../collectors/sudt-collector");
class SimpleSUDTACPBuilder extends builder_1.Builder {
    constructor(sudt, address, amount, options = {}) {
        super(options.feeRate, options.collector, options.witnessArgs);
        this.sudt = sudt;
        this.address = address;
        this.amount = amount;
        this.options = options;
    }
    async build() {
        if (!this.address.isAcp()) {
            throw new Error("The receiver's address is not anyone-can-pay cell");
        }
        if (!(this.collector instanceof sudt_collector_1.SUDTCollector)) {
            throw new Error('this.collector is not a SUDTCollector instance');
        }
        const receiverSUDTCells = await this.collector.collectSUDT(this.sudt, this.address, { neededAmount: new models_1.Amount('1', models_1.AmountUnit.shannon) });
        if (!receiverSUDTCells || receiverSUDTCells.length === 0) {
            throw new Error('The receiver has no sudt cell');
        }
        const receiverInputCell = receiverSUDTCells[0];
        const receiverOuputCell = receiverInputCell.clone();
        receiverOuputCell.setSUDTAmount(this.amount.add(receiverOuputCell.getSUDTAmount()));
        let senderInputSUDTSum = new models_1.Amount('0');
        let senderInputCKBSum = new models_1.Amount('0');
        let minSenderOccupiedCKBSum = new models_1.Amount('0');
        let restNeededSUDT = new models_1.Amount(this.amount.toHexString(), models_1.AmountUnit.shannon);
        const inputCells = [];
        const outputCells = [];
        // fill the inputs and the outputs
        const unspentSUDTCells = await this.collector.collectSUDT(this.sudt, __1.default.provider.address, { neededAmount: this.amount });
        // First step: build a tx including sender and receiver sudt cell only
        for (const inputCell of unspentSUDTCells) {
            const outputCell = inputCell.clone();
            const inputSUDTAmount = inputCell.getSUDTAmount();
            senderInputSUDTSum = senderInputSUDTSum.add(inputSUDTAmount);
            senderInputCKBSum = senderInputCKBSum.add(inputCell.capacity);
            minSenderOccupiedCKBSum = minSenderOccupiedCKBSum.add(outputCell.occupiedCapacity());
            if (inputSUDTAmount.lt(restNeededSUDT)) {
                restNeededSUDT = restNeededSUDT.sub(inputSUDTAmount);
                outputCell.setSUDTAmount(new models_1.Amount('0'));
            }
            else {
                outputCell.setSUDTAmount(inputSUDTAmount.sub(restNeededSUDT));
                restNeededSUDT = new models_1.Amount('0');
            }
            inputCells.push(inputCell);
            outputCells.unshift(outputCell);
            if (senderInputSUDTSum.gte(this.amount))
                break;
        }
        if (senderInputSUDTSum.lt(this.amount)) {
            throw new Error(`input sudt amount not enough, need ${this.amount.toString(models_1.AmountUnit.ckb)}, got ${senderInputSUDTSum.toString(models_1.AmountUnit.ckb)}`);
        }
        inputCells.push(receiverInputCell);
        outputCells.unshift(receiverOuputCell);
        let tx = this.rectifyTx(inputCells, outputCells);
        const availableCKBFee = senderInputCKBSum.sub(minSenderOccupiedCKBSum);
        // Second step:  if sudt cell can not pay the transaction fee, fetch pure ckb cells to pay the fee.
        if (this.fee.gt(availableCKBFee)) {
            const unspentCKBCells = await this.collector.collect(__1.default.provider.address, { neededAmount: this.fee.sub(availableCKBFee).add(builder_1.Builder.MIN_CHANGE) });
            if (!unspentCKBCells || unspentCKBCells.length === 0) {
                throw new Error('not enough CKB to pay the transaction fee');
            }
            // append the fee cell to tx's inputs and outputs
            const ckbFeeInputCell = unspentCKBCells[0];
            inputCells.push(ckbFeeInputCell);
            outputCells.push(ckbFeeInputCell.clone());
            tx = this.rectifyTx(inputCells, outputCells);
            // if fee change cell's capacity less than occuiped capacity, merge the fee cell to sender's input sudt cell.
            if (this.fee.gt(availableCKBFee.add(ckbFeeInputCell.availableFee()))) {
                outputCells.pop();
                const senderOutputCell = outputCells.pop();
                senderOutputCell.capacity = senderOutputCell.capacity.add(ckbFeeInputCell.capacity);
                outputCells.push(senderOutputCell);
                tx = this.rectifyTx(inputCells, outputCells);
            }
        }
        // Third step: subtract tx fee from outputs' capacity
        tx = this.subtractFee(inputCells, outputCells);
        return tx;
    }
    subtractFee(inputCells, outputCells) {
        let remainFee = new models_1.Amount(this.fee.toHexString(), models_1.AmountUnit.shannon);
        for (const cell of outputCells.slice(1)) {
            // throw new Error(`remainFee ${remainFee} ${cell.availableFee()}`);
            if (remainFee.gt(cell.availableFee())) {
                remainFee = remainFee.sub(cell.availableFee());
                cell.capacity = cell.occupiedCapacity();
            }
            else {
                cell.capacity = cell.capacity.sub(remainFee);
                break;
            }
        }
        return this.rectifyTx(inputCells, outputCells);
    }
    rectifyTx(inputCells, outputCells) {
        const sudtCellDeps = [
            __1.default.config.defaultLock.cellDep,
            __1.default.config.pwLock.cellDep,
            __1.default.config.sudtType.cellDep,
        ];
        const tx = new models_1.Transaction(new models_1.RawTransaction(inputCells, outputCells, sudtCellDeps), [this.witnessArgs]);
        this.fee = builder_1.Builder.calcFee(tx, this.feeRate);
        return tx;
    }
    getCollector() {
        return this.collector;
    }
}
exports.SimpleSUDTACPBuilder = SimpleSUDTACPBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXN1ZHQtYWNwLWJ1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYnVpbGRlcnMvc2ltcGxlLXN1ZHQtYWNwLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQW1EO0FBQ25ELHNDQVFtQjtBQUNuQiwyQ0FBd0I7QUFDeEIsaUVBQTZEO0FBRTdELE1BQWEsb0JBQXFCLFNBQVEsaUJBQU87SUFDL0MsWUFDVSxJQUFVLEVBQ1YsT0FBZ0IsRUFDaEIsTUFBYyxFQUNaLFVBQXlCLEVBQUU7UUFFckMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFMdkQsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUNWLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNaLFlBQU8sR0FBUCxPQUFPLENBQW9CO0lBR3ZDLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBSztRQUNULElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztTQUN0RTtRQUNELElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLFlBQVksOEJBQWEsQ0FBQyxFQUFFO1lBQzlDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQztTQUNuRTtRQUVELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FDeEQsSUFBSSxDQUFDLElBQUksRUFDVCxJQUFJLENBQUMsT0FBTyxFQUNaLEVBQUUsWUFBWSxFQUFFLElBQUksZUFBTSxDQUFDLEdBQUcsRUFBRSxtQkFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQ3RELENBQUM7UUFDRixJQUFJLENBQUMs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