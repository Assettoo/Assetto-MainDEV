"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleACPBuilder = void 0;
const builder_1 = require("../builders/builder");
const models_1 = require("../models");
const __1 = __importDefault(require(".."));
class SimpleACPBuilder extends builder_1.Builder {
    constructor(address, amount, options = {}) {
        super(options.feeRate, options.collector, options.witnessArgs);
        this.address = address;
        this.amount = amount;
        this.options = options;
    }
    async build() {
        if (!this.address.isAcp()) {
            throw new Error("The Receiver's address is not anyone-can-pay cell");
        }
        const receiverACPCells = await this.collector.collect(this.address, {
            neededAmount: new models_1.Amount('1', models_1.AmountUnit.shannon),
        });
        if (!receiverACPCells || receiverACPCells.length === 0) {
            throw new Error('The receiver has no sudt cell');
        }
        this.receiverInputCell = receiverACPCells[0];
        this.receiverOutputCell = this.receiverInputCell.clone();
        this.receiverOutputCell.capacity = this.receiverOutputCell.capacity.add(this.amount);
        return this.buildSenderCells();
    }
    async buildSenderCells(fee = models_1.Amount.ZERO) {
        const neededAmount = this.amount.add(builder_1.Builder.MIN_CHANGE).add(fee);
        let inputSum = new models_1.Amount('0');
        const inputCells = [];
        // fill the inputs
        const cells = await this.collector.collect(__1.default.provider.address, {
            neededAmount,
        });
        for (const cell of cells) {
            inputCells.push(cell);
            inputSum = inputSum.add(cell.capacity);
            if (inputSum.gt(neededAmount))
                break;
        }
        if (inputSum.lt(neededAmount)) {
            throw new Error(`input capacity not enough, need ${neededAmount.toString(models_1.AmountUnit.ckb)}, got ${inputSum.toString(models_1.AmountUnit.ckb)}`);
        }
        const changeCell = new models_1.Cell(inputSum.sub(this.amount), __1.default.provider.address.toLockScript());
        const tx = new models_1.Transaction(new models_1.RawTransaction([...inputCells, this.receiverInputCell], [this.receiverOutputCell, changeCell]), [this.witnessArgs]);
        this.fee = builder_1.Builder.calcFee(tx, this.feeRate);
        if (changeCell.capacity.gte(builder_1.Builder.MIN_CHANGE.add(this.fee))) {
            changeCell.capacity = changeCell.capacity.sub(this.fee);
            tx.raw.outputs.pop();
            tx.raw.outputs.push(changeCell);
            return tx;
        }
        return this.buildSenderCells(this.fee);
    }
    getCollector() {
        return this.collector;
    }
}
exports.SimpleACPBuilder = SimpleACPBuilder;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWFjcC1idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2J1aWxkZXJzL3NpbXBsZS1hY3AtYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxpREFBNkQ7QUFDN0Qsc0NBT21CO0FBQ25CLDJDQUF3QjtBQUN4QixNQUFhLGdCQUFpQixTQUFRLGlCQUFPO0lBSTNDLFlBQ1ksT0FBZ0IsRUFDaEIsTUFBYyxFQUNkLFVBQXlCLEVBQUU7UUFFckMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFKckQsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7SUFHdkMsQ0FBQztJQUVELEtBQUssQ0FBQyxLQUFLO1FBQ1QsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDekIsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDbEUsWUFBWSxFQUFFLElBQUksZUFBTSxDQUFDLEdBQUcsRUFBRSxtQkFBVSxDQUFDLE9BQU8sQ0FBQztTQUNsRCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN0RCxNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7U0FDbEQ7UUFFRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FB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