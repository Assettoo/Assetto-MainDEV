"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleSUDTBuilder = void 0;
const builder_1 = require("./builder");
const models_1 = require("../models");
const __1 = __importStar(require(".."));
const sudt_collector_1 = require("../collectors/sudt-collector");
class SimpleSUDTBuilder extends builder_1.Builder {
    constructor(sudt, address, amount, options = {}) {
        super(options.feeRate, options.collector, options.witnessArgs);
        this.sudt = sudt;
        this.address = address;
        this.amount = amount;
        this.options = options;
        this.inputCells = [];
        this.outputCells = [];
        this.autoCalculateCapacity = false;
        this.minimumOutputCellCapacity = new models_1.Amount('142', models_1.AmountUnit.ckb);
        this.maximumOutputCellCapacity = new models_1.Amount('1000', models_1.AmountUnit.ckb);
        this.fee = new models_1.Amount('0');
        if (typeof options.autoCalculateCapacity === 'boolean') {
            this.autoCalculateCapacity = options.autoCalculateCapacity;
        }
        if (typeof options.minimumOutputCellCapacity !== 'undefined') {
            this.minimumOutputCellCapacity = options.minimumOutputCellCapacity;
        }
        if (typeof options.maximumOutputCellCapacity !== 'undefined') {
            this.maximumOutputCellCapacity = options.maximumOutputCellCapacity;
        }
    }
    async build() {
        const { tx, neededCKB } = await this.buildSudtCells();
        if (tx)
            return tx;
        const tx2 = await this.buildCKBCells(neededCKB);
        return tx2;
    }
    /**
     * build a transaction with only sudt cells
     */
    async buildSudtCells() {
        let senderInputSUDTSum = new models_1.Amount('0');
        let senderInputCKBSum = new models_1.Amount('0');
        let minSenderOccupiedCKBSum = new models_1.Amount('0');
        let receiverAmount = new models_1.Amount('0');
        if (this.autoCalculateCapacity) {
            const receiverOutputCellSetup = {
                lock: this.address.toLockScript(),
                type: this.sudt.toTypeScript(),
                data: this.amount.toUInt128LE(),
            };
            receiverAmount = new models_1.Amount(__1.cellOccupiedBytes(receiverOutputCellSetup).toString(), models_1.AmountUnit.ckb);
        }
        if (this.minimumOutputCellCapacity &&
            receiverAmount.lt(this.minimumOutputCellCapacity)) {
            receiverAmount = this.minimumOutputCellCapacity;
        }
        if (this.maximumOutputCellCapacity &&
            receiverAmount.gt(this.maximumOutputCellCapacity)) {
            receiverAmount = this.maximumOutputCellCapacity;
        }
        const receiverOutputCell = new models_1.Cell(receiverAmount, this.address.toLockScript(), this.sudt.toTypeScript(), null, this.amount.toUInt128LE());
        // acp cell with zero sudt
        if (this.amount.eq(new models_1.Amount('0'))) {
            this.outputCells.push(receiverOutputCell);
            return { tx: null, neededCKB: receiverAmount };
        }
        let restNeededSUDT = new models_1.Amount(this.amount.toHexString(), models_1.AmountUnit.shannon);
        if (!(this.collector instanceof sudt_collector_1.SUDTCollector)) {
            throw new Error('this.collector is not a SUDTCollector instance');
        }
        const unspentSUDTCells = await this.collector.collectSUDT(this.sudt, __1.default.provider.address, { neededAmount: this.amount });
        // build a tx including sender and receiver sudt cell only
        for (const inputCell of unspentSUDTCells) {
            const outputCell = inputCell.clone();
            const inputSUDTAmount = inputCell.getSUDTAmount();
            senderInputSUDTSum = senderInputSUDTSum.add(inputSUDTAmount);
            senderInputCKBSum = senderInputCKBSum.add(inputCell.capacity);
            minSenderOccupiedCKBSum = minSenderOccupiedCKBSum.add(outputCell.occupiedCapacity());
            if (inputSUDTAmount.lt(restNeededSUDT)) {
                restNeededSUDT = restNeededSUDT.sub(inputSUDTAmount);
                outputCell.setSUDTAmount(new models_1.Amount('0'));
            }
            else {
                outputCell.setSUDTAmount(inputSUDTAmount.sub(restNeededSUDT));
                restNeededSUDT = new models_1.Amount('0');
            }
            this.inputCells.push(inputCell);
            this.outputCells.unshift(outputCell);
            if (senderInputSUDTSum.gte(this.amount))
                break;
        }
        if (senderInputSUDTSum.lt(this.amount)) {
            throw new Error(`input sudt amount not enough, need ${this.amount.toString(models_1.AmountUnit.ckb)}, got ${senderInputSUDTSum.toString(models_1.AmountUnit.ckb)}`);
        }
        this.outputCells.unshift(receiverOutputCell);
        this.rectifyTx();
        const availableCKB = senderInputCKBSum.sub(minSenderOccupiedCKBSum);
        if (receiverAmount.add(this.fee).lt(availableCKB)) {
            const tx = this.extractCKBFromOutputs(receiverAmount.add(this.fee));
            return { tx, neededCKB: new models_1.Amount('0') };
        }
        else {
            this.extractCKBFromOutputs(receiverAmount);
            return { tx: null, neededCKB: receiverAmount.sub(availableCKB) };
        }
    }
    /**
     * Fetch pure CKB cells to fullfill the need CKB amount
     * @param ckbAmount  needed CKB amount
     */
    async buildCKBCells(ckbAmount) {
        // fetch pure ckb cells to pay the fee.
        const neededAmount = ckbAmount.add(builder_1.Builder.MIN_CHANGE).add(this.fee);
        let inputSum = new models_1.Amount('0');
        const unspentCKBCells = await this.collector.collect(__1.default.provider.address, { neededAmount });
        if (!unspentCKBCells || unspentCKBCells.length === 0) {
            throw new Error('no avaiable CKB');
        }
        for (const ckbCell of unspentCKBCells) {
            this.inputCells.push(ckbCell);
            inputSum = inputSum.add(ckbCell.capacity);
            if (inputSum.gt(neededAmount))
                break;
        }
        if (inputSum.lt(ckbAmount.add(this.fee))) {
            throw new Error('no enough CKB to create acp cell 1');
        }
        // with changeCell
        if (inputSum.gt(neededAmount)) {
            const changeCell = new models_1.Cell(inputSum.sub(ckbAmount), __1.default.provider.address.toLockScript());
            this.outputCells.push(changeCell);
            this.rectifyTx();
            if (this.fee.add(builder_1.Builder.MIN_CHANGE).lte(changeCell.capacity)) {
                changeCell.capacity = changeCell.capacity.sub(this.fee);
                return this.rectifyTx();
            }
            else {
                // pop changeCell
                this.outputCells.pop();
            }
        }
        // no change cell, merge rest CKB to last output cell
        const lastCell = this.outputCells.pop();
        lastCell.capacity = lastCell.capacity.add(inputSum.sub(ckbAmount));
        this.outputCells.push(lastCell);
        this.rectifyTx();
        if (this.fee.add(lastCell.occupiedCapacity()).gt(lastCell.capacity)) {
            throw new Error('no enough CKB to create acp cell 2');
        }
        lastCell.capacity = lastCell.capacity.sub(this.fee);
        return this.rectifyTx();
    }
    /**
     * subtract specified ckb amount from sender's outputs
     * @param ckbAmount
     */
    extractCKBFromOutputs(ckbAmount) {
        for (const cell of this.outputCells.slice(1)) {
            if (ckbAmount.gt(cell.availableFee())) {
                ckbAmount = ckbAmount.sub(cell.availableFee());
                cell.capacity = cell.occupiedCapacity();
            }
            else {
                cell.capacity = cell.capacity.sub(ckbAmount);
                break;
            }
        }
        return this.rectifyTx();
    }
    /**
     * build tx based on inputs and outputs, and calculate the tx fee
     */
    rectifyTx() {
        const sudtCellDeps = [
            __1.default.config.defaultLock.cellDep,
            __1.default.config.pwLock.cellDep,
            __1.default.config.sudtType.cellDep,
        ];
        const tx = new models_1.Transaction(new models_1.RawTransaction(this.inputCells, this.outputCells, sudtCellDeps), [this.witnessArgs]);
        this.fee = builder_1.Builder.calcFee(tx, this.feeRate);
        return tx;
    }
    getCollector() {
        return this.collector;
    }
}
exports.SimpleSUDTBuilder = SimpleSUDTBuilder;
//# sourceMappingURL=data:application/json;base64,