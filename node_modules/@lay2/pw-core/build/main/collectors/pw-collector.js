"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PwCollector = void 0;
const axios_1 = __importDefault(require("axios"));
const sudt_collector_1 = require("./sudt-collector");
const __1 = require("..");
class PwCollector extends sudt_collector_1.SUDTCollector {
    constructor(apiBase) {
        super();
        this.apiBase = apiBase;
        this.apiBase = apiBase;
    }
    async getBalance(address) {
        const res = await axios_1.default.get(`${this.apiBase}/cell/getCapacityByLockHash?lockHash=${address
            .toLockScript()
            .toHash()}`);
        return new __1.Amount(res.data.data, __1.AmountUnit.shannon);
    }
    async collect(address, options) {
        if (!options || !options.neededAmount) {
            throw new Error("'neededAmount' in options must be provided");
        }
        const cells = [];
        const res = await axios_1.default.get(`${this.apiBase}/cell/unSpent?lockHash=${address
            .toLockScript()
            .toHash()}&capacity=${options.neededAmount.toHexString()}`);
        for (let { capacity, outPoint } of res.data.data) {
            capacity = new __1.Amount(capacity, __1.AmountUnit.shannon);
            outPoint = new __1.OutPoint(outPoint.txHash, outPoint.index);
            cells.push(new __1.Cell(capacity, address.toLockScript(), null, outPoint));
        }
        return cells;
    }
    async getSUDTBalance(sudt, address) {
        const lockHash = address.toLockScript().toHash();
        const typeHash = sudt.toTypeScript().toHash();
        const res = await axios_1.default.get(`${this.apiBase}/sudt/balance?lockHash=${lockHash}&typeHash=${typeHash}`);
        return new __1.Amount(res.data.data.sudtAmount, __1.AmountUnit.shannon);
    }
    async collectSUDT(sudt, address, options) {
        if (!options || !options.neededAmount) {
            throw new Error("'neededAmount' in options must be provided");
        }
        const cells = [];
        const lockHash = address.toLockScript().toHash();
        const typeHash = sudt.toTypeScript().toHash();
        const res = await axios_1.default.get(`${this.apiBase}/cell/unSpent?lockHash=${lockHash}&capacity=0x0&typeHash=${typeHash}&sudtAmount=${options.neededAmount.toHexString()}`);
        for (let { capacity, outPoint, type, data } of res.data.data) {
            capacity = new __1.Amount(capacity, __1.AmountUnit.shannon);
            outPoint = new __1.OutPoint(outPoint.txHash, outPoint.index);
            cells.push(new __1.Cell(capacity, address.toLockScript(), type, outPoint, data));
        }
        return cells;
    }
}
exports.PwCollector = PwCollector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHctY29sbGVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbGxlY3RvcnMvcHctY29sbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUEwQjtBQUUxQixxREFBaUQ7QUFDakQsMEJBQXVFO0FBRXZFLE1BQWEsV0FBWSxTQUFRLDhCQUFhO0lBQzVDLFlBQW1CLE9BQWU7UUFDaEMsS0FBSyxFQUFFLENBQUM7UUFEUyxZQUFPLEdBQVAsT0FBTyxDQUFRO1FBRWhDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQWdCO1FBQy9CLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBSyxDQUFDLEdBQUcsQ0FDekIsR0FBRyxJQUFJLENBQUMsT0FBTyx3Q0FBd0MsT0FBTzthQUMzRCxZQUFZLEVBQUU7YUFDZCxNQUFNLEVBQUUsRUFBRSxDQUNkLENBQUM7UUFDRixPQUFPLElBQUksVUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLGNBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFnQixFQUFFLE9BQXlCO1FBQ3ZELElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQ3JDLE1BQU0sSUFBSSxLQUFLLENBQUMsNENBQTRDLENBQUMsQ0FBQztTQUMvRDtRQUNELE1BQU0sS0FBSyxHQUFXLEVBQUUsQ0FBQztRQUN6QixNQUFNLEdBQUcsR0FBRyxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQ3pCLEdBQUcsSUFBSSxDQUFDLE9BQU8sMEJBQTBCLE9BQU87YUFDN0MsWUFBWSxFQUFFO2FBQ2QsTUFBTSxFQUFFLGFBQWEsT0FBTyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUM3RCxDQUFDO1FBRUYsS0FB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