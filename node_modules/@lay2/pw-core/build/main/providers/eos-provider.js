"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EosProvider = void 0;
const provider_1 = require("./provider");
const models_1 = require("../models");
const core_1 = __importDefault(require("@scatterjs/core"));
const eosjs2_1 = __importDefault(require("@scatterjs/eosjs2"));
const eosjs_ecc_1 = __importDefault(require("eosjs-ecc"));
const ckb_js_toolkit_1 = require("../ckb-js-toolkit");
const hashers_1 = require("../hashers");
const utils_1 = require("../utils");
const axios_1 = __importDefault(require("axios"));
class EosProvider extends provider_1.Provider {
    constructor(eosNetwork, onAddressChanged) {
        super(provider_1.Platform.eos);
        this.eosNetwork = eosNetwork;
        this.onAddressChanged = onAddressChanged;
    }
    async init() {
        console.log('[eos-provider] try scatterjs');
        const network = core_1.default.Network.fromJson(this.eosNetwork);
        core_1.default.plugins(new eosjs2_1.default());
        const connected = await core_1.default.scatter.connect('pwcore-app', {
            network,
        });
        if (!connected) {
            throw new Error('eos not connected');
        }
        console.log('[eos-provider] scatter connected');
        const scatter = core_1.default.scatter;
        await scatter.login();
        console.log('[eos-provider] scatter login');
        const account = scatter.identity.accounts.find((x) => x.blockchain === 'eos');
        const { name } = account;
        console.log('eos account', name);
        const lockArgs = await this.getCKBLockArgsForEosAccount(name);
        console.log('eos lock args', lockArgs);
        this.address = new models_1.Address(name, models_1.AddressType.eos, lockArgs);
        window.scatter = scatter;
        return this;
    }
    async getEosPublicKey(account) {
        const network = core_1.default.Network.fromJson(this.eosNetwork);
        const baseUrl = network.fullhost();
        const res = await axios_1.default.post(`${baseUrl}/v1/chain/get_account`, {
            account_name: account,
        });
        const data = res.data;
        const pubkey = data.permissions[0].required_auth.keys[0].key;
        return pubkey;
    }
    async getCKBLockArgsForEosAccount(account) {
        const pubkey = await this.getEosPublicKey(account);
        const publicKeyHex = eosjs_ecc_1.default.PublicKey(pubkey).toUncompressed().toHex();
        const publicHash = new hashers_1.Keccak256Hasher()
            .hash(new ckb_js_toolkit_1.Reader(`0x${publicKeyHex.slice(2)}`))
            .serializeJson();
        const address = '0x' + publicHash.slice(-40);
        return address;
    }
    processEosHash(a) {
        let str = a.replace('0x', '');
        str = utils_1.spliceStr(str, 12, 0, ' ');
        str = utils_1.spliceStr(str, 12 * 2 + 1, 0, ' ');
        str = utils_1.spliceStr(str, 12 * 3 + 2, 0, ' ');
        str = utils_1.spliceStr(str, 12 * 4 + 3, 0, ' ');
        str = utils_1.spliceStr(str, 12 * 5 + 4, 0, ' ');
        return str;
    }
    async sign(message) {
        const pubkey = await this.getEosPublicKey(this.address.addressString);
        const sig = await window.scatter.getArbitrarySignature(pubkey, this.processEosHash(message));
        const sigHex = eosjs_ecc_1.default.Signature.from(sig).toHex().replace('0x', '');
        let v = Number.parseInt(sigHex.slice(0, 2), 16);
        if (v >= 27)
            v = (v - 27) % 4;
        const result = '0x' +
            this.platform.toString(16).padStart(2, '0') +
            sigHex.slice(2) +
            v.toString(16).padStart(2, '0');
        return result;
    }
    close() {
        throw new Error('Method not implemented.');
    }
}
exports.EosProvider = EosProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW9zLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy9lb3MtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEseUNBQWdEO0FBQ2hELHNDQUFpRDtBQUNqRCwyREFBd0M7QUFDeEMsK0RBQTJDO0FBQzNDLDBEQUE0QjtBQUM1QixzREFBMkM7QUFDM0Msd0NBQTZDO0FBQzdDLG9DQUFxQztBQUNyQyxrREFBMEI7QUFFMUIsTUFBYSxXQUFZLFNBQVEsbUJBQVE7SUFFdkMsWUFDVyxVQUFlLEVBQ3hCLGdCQUFnRDtRQUVoRCxLQUFLLENBQUMsbUJBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUhYLGVBQVUsR0FBVixVQUFVLENBQUs7UUFJeEIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0lBQzNDLENBQUM7SUFDRCxLQUFLLENBQUMsSUFBSTtRQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUU1QyxNQUFNLE9BQU8sR0FBRyxjQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUQsY0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLGdCQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sU0FBUyxHQUFHLE1BQU0sY0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQzlELE9BQU87U0FDUixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBRWhELE1BQU0sT0FBTyxHQUFHLGNBQVMsQ0FBQyxPQUFPLENBQUM7UUFFbEMsTUFBTSxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7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