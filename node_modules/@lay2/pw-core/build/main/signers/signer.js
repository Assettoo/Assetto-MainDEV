"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Signer = void 0;
const hashers_1 = require("../hashers");
const ckb_js_toolkit_1 = require("../ckb-js-toolkit");
const core_1 = require("../ckb-lumos/core");
class Signer {
    constructor(hasher) {
        this.hasher = hasher;
    }
    async sign(tx) {
        const messages = this.toMessages(tx);
        const witnesses = await this.signMessages(messages);
        for (let i = 0; i < messages.length; i++) {
            const { index } = messages[i];
            if (index < tx.witnessArgs.length &&
                typeof tx.witnessArgs[index] !== 'string') {
                witnesses[i] = new ckb_js_toolkit_1.Reader(core_1.SerializeWitnessArgs(ckb_js_toolkit_1.normalizers.NormalizeWitnessArgs(Object.assign(Object.assign({}, tx.witnessArgs[index]), { lock: witnesses[i] })))).serializeJson();
            }
        }
        tx = FillSignedWitnesses(tx, messages, witnesses);
        return tx;
    }
    toMessages(tx) {
        tx.validate();
        if (tx.raw.inputs.length !== tx.raw.inputCells.length) {
            throw new Error('Input number does not match!');
        }
        const txHash = new hashers_1.Blake2bHasher().hash(new ckb_js_toolkit_1.Reader(core_1.SerializeRawTransaction(ckb_js_toolkit_1.normalizers.NormalizeRawTransaction(ckb_js_toolkit_1.transformers.TransformRawTransaction(tx.raw)))));
        const messages = [];
        const used = tx.raw.inputs.map((_input) => false);
        for (let i = 0; i < tx.raw.inputs.length; i++) {
            if (used[i]) {
                continue;
            }
            if (i >= tx.witnesses.length) {
                throw new Error(`Input ${i} starts a new script group, but witness is missing!`);
            }
            used[i] = true;
            this.hasher.update(txHash);
            const firstWitness = new ckb_js_toolkit_1.Reader(tx.witnesses[i]);
            this.hasher.update(serializeBigInt(firstWitness.length()));
            this.hasher.update(firstWitness);
            for (let j = i + 1; j < tx.raw.inputs.length && j < tx.witnesses.length; j++) {
                if (tx.raw.inputCells[i].lock.sameWith(tx.raw.inputCells[j].lock)) {
                    used[j] = true;
                    const currentWitness = new ckb_js_toolkit_1.Reader(tx.witnesses[j]);
                    this.hasher.update(serializeBigInt(currentWitness.length()));
                    this.hasher.update(currentWitness);
                }
            }
            messages.push({
                index: i,
                message: this.hasher.digest().serializeJson(),
                lock: tx.raw.inputCells[i].lock,
            });
            this.hasher.reset();
        }
        return messages;
    }
}
exports.Signer = Signer;
function FillSignedWitnesses(tx, messages, witnesses) {
    if (messages.length !== witnesses.length) {
        throw new Error('Invalid number of witnesses!');
    }
    for (let i = 0; i < messages.length; i++) {
        tx.witnesses[messages[i].index] = witnesses[i];
    }
    return tx;
}
function serializeBigInt(i) {
    const view = new DataView(new ArrayBuffer(8));
    view.setUint32(0, i, true);
    return view.buffer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NpZ25lcnMvc2lnbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHdDQUFtRDtBQUNuRCxzREFBc0U7QUFDdEUsNENBRzJCO0FBUzNCLE1BQXNCLE1BQU07SUFDMUIsWUFBdUMsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7SUFBRyxDQUFDO0lBSXpELEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBZTtRQUN4QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN4QyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQ0UsS0FBSyxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTTtnQkFDN0IsT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsRUFDekM7Z0JBQ0EsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksdUJBQU0sQ0FDdkIsMkJBQW9CLENBQ2xCLDRCQUFXLENBQUMsb0JBQW9CLGlDQUMxQixFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBaUIsS0FDekMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFDbEIsQ0FDSCxDQUNGLENBQUMsYUFBYSxFQUFFLENBQUM7YUFDbkI7U0FDRjtRQUNELEVBQUUsR0FBRyxtQkFBbUIsQ0FBQyxFQUFFLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBRWxELE9BQU8sRUFBRSxDQUFDO0lB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