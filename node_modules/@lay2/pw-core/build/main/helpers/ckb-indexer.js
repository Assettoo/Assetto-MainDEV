"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IndexerCellToCell = exports.CkbIndexer = exports.DefaultTerminator = exports.Order = exports.ScriptType = void 0;
const axios_1 = __importDefault(require("axios"));
const __1 = require("..");
var ScriptType;
(function (ScriptType) {
    ScriptType["type"] = "type";
    ScriptType["lock"] = "lock";
})(ScriptType = exports.ScriptType || (exports.ScriptType = {}));
var Order;
(function (Order) {
    Order["asc"] = "asc";
    Order["desc"] = "desc";
})(Order = exports.Order || (exports.Order = {}));
exports.DefaultTerminator = (_index, _cell) => {
    return { stop: false, push: true };
};
class CkbIndexer {
    constructor(ckbIndexerUrl) {
        this.ckbIndexerUrl = ckbIndexerUrl;
    }
    async request(method, params) {
        const data = {
            id: 0,
            jsonrpc: '2.0',
            method,
            params,
        };
        const res = await axios_1.default.post(this.ckbIndexerUrl, data);
        if (res.status !== 200) {
            throw new Error(`indexer request failed with HTTP code ${res.status}`);
        }
        if (res.data.error !== undefined) {
            throw new Error(`indexer request rpc failed with error: ${JSON.stringify(res.data.error)}`);
        }
        return res.data.result;
    }
    async getCells(searchKey, terminator = exports.DefaultTerminator, { sizeLimit = 0x100, order = Order.asc, } = {}) {
        const infos = [];
        let cursor = null;
        let index = 0;
        const params = [searchKey, order, `0x${sizeLimit.toString(16)}`, cursor];
        while (true) {
            const res = await this.request('get_cells', params);
            const liveCells = res.objects;
            cursor = res.lastCursor;
            for (const cell of liveCells) {
                const { stop, push } = terminator(index, cell);
                if (push) {
                    infos.push(cell);
                }
                if (stop) {
                    return infos;
                }
                index++;
            }
            if (liveCells.length < sizeLimit) {
                break;
            }
        }
        return infos;
    }
}
exports.CkbIndexer = CkbIndexer;
function IndexerCellToCell(cell) {
    return new __1.Cell(new __1.Amount(cell.output.capacity, __1.AmountUnit.shannon), __1.Script.fromRPC(cell.output.lock), __1.Script.fromRPC(cell.output.type), __1.OutPoint.fromRPC(cell.out_point), cell.output_data);
}
exports.IndexerCellToCell = IndexerCellToCell;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2tiLWluZGV4ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVycy9ja2ItaW5kZXhlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBMEI7QUFDMUIsMEJBT1k7QUFFWixJQUFZLFVBR1g7QUFIRCxXQUFZLFVBQVU7SUFDcEIsMkJBQWEsQ0FBQTtJQUNiLDJCQUFhLENBQUE7QUFDZixDQUFDLEVBSFcsVUFBVSxHQUFWLGtCQUFVLEtBQVYsa0JBQVUsUUFHckI7QUFFRCxJQUFZLEtBR1g7QUFIRCxXQUFZLEtBQUs7SUFDZixvQkFBVyxDQUFBO0lBQ1gsc0JBQWEsQ0FBQTtBQUNmLENBQUMsRUFIVyxLQUFLLEdBQUwsYUFBSyxLQUFMLGFBQUssUUFHaEI7QUFnRFksUUFBQSxpQkFBaUIsR0FBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRTtJQUM3RCxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUM7QUFDckMsQ0FBQyxDQUFDO0FBRUYsTUFBYSxVQUFVO0lBQ3JCLFlBQW1CLGFBQXFCO1FBQXJCLGtCQUFhLEdBQWIsYUFBYSxDQUFRO0lBQUcsQ0FBQztJQUU1QyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQWMsRUFBRSxNQUFZO1FBQ3hDLE1BQU0sSUFBSSxHQUFHO1lBQ1gsRUFBRSxFQUFFLENBQUM7WUFDTCxPQUFPLEVBQUUsS0FBSztZQUNkLE1BQU07WUFDTixNQUFNO1NBQ1AsQ0FBQztRQUNGLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7U0FDeEU7UUFDRCxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUNoQyxNQUFNLElBQUksS0FBSyxDQUNiLDBDQUEwQyxJQUFJLENBQUMsU0FBUyxDQUN0RCxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FDZixFQUFFLENBQ0osQ0FBQztTQUNIO1FBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBRU0sS0FBSyxDQUFDLFFBQVEsQ0FDbkIsU0FBb0IsRUFDcEIsYUFBeUIseUJBQWlCLEVBQzFDLEVBQ0UsU0FBUyxHQUFHLEtBQUssRUFDakIsS0FBSyxHQUFHLEtBQUssQ0FBQyxHQUFHLE1BQ3dCLEVBQUU7UUFFN0MsTUFBTSxLQUFLLEdBQWtCLEVBQUUsQ0FBQztRQUNoQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsTUFBTSxNQUFNLEdBQUcsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLEtBQUssU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pFLE9BQU8sSUFBSSxFQUFFO1lBQ1gsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNwRCxNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDO1lBQzlCLE1BQU0sR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO1lBQ3hCLEtBQUssTUFBTSxJQUFJLElBQUksU0FBUyxFQUFFO2dCQUM1QixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7Z0JBQy9DLElBQUksSUFBSSxFQUFFO29CQUNSLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2xCO2dCQUNELElBQUksSUFBSSxFQUFFO29CQUNSLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELEtBQUssRUFBRSxDQUFDO2FBQ1Q7WUFDRCxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsU0FBUyxFQUFFO2dCQUNoQyxNQUFNO2FBQ1A7U0FDRjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBeERELGdDQXdEQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLElBQWlCO0lBQ2pELE9BQU8sSUFBSSxRQUFJLENBQ2IsSUFBSSxVQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsY0FBVSxDQUFDLE9BQU8sQ0FBQyxFQUNwRCxVQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQ2xDLFVBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFDbEMsWUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQ2hDLElBQUksQ0FBQyxXQUFXLENBQ2pCLENBQUM7QUFDSixDQUFDO0FBUkQsOENBUUMifQ==