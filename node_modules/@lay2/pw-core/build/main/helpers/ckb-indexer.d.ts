import { Cell, HashType } from '..';
export declare enum ScriptType {
    type = "type",
    lock = "lock"
}
export declare enum Order {
    asc = "asc",
    desc = "desc"
}
export declare type HexString = string;
export declare type Hash = HexString;
export interface SnakeScript {
    code_hash: Hash;
    hash_type: HashType;
    args: HexString;
}
export interface SearchKey {
    script: SnakeScript;
    script_type: ScriptType;
    filter?: {
        script?: SnakeScript;
        output_data_len_range?: [HexString, HexString];
        output_capacity_range?: [HexString, HexString];
        block_range?: [HexString, HexString];
    };
}
export interface IndexerCell {
    block_number: HexString;
    out_point: {
        index: HexString;
        tx_hash: Hash;
    };
    output: {
        capacity: HexString;
        lock: SnakeScript;
        type?: SnakeScript;
    };
    output_data: HexString;
    tx_index: HexString;
}
export interface TerminatorResult {
    stop: boolean;
    push: boolean;
}
export declare type Terminator = (index: number, cell: IndexerCell) => TerminatorResult;
export declare const DefaultTerminator: Terminator;
export declare class CkbIndexer {
    ckbIndexerUrl: string;
    constructor(ckbIndexerUrl: string);
    request(method: string, params?: any): Promise<any>;
    getCells(searchKey: SearchKey, terminator?: Terminator, { sizeLimit, order, }?: {
        sizeLimit?: number;
        order?: Order;
    }): Promise<IndexerCell[]>;
}
export declare function IndexerCellToCell(cell: IndexerCell): Cell;
