"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigIntToHexString = exports.HexStringToBigInt = exports.RPC = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const jsbi_1 = __importDefault(require("jsbi"));
function mergeOptions(overrideOptions, defaultOptions) {
    defaultOptions = defaultOptions || {};
    const headers = Object.assign({}, defaultOptions.headers || {}, overrideOptions.headers || {});
    return Object.assign({}, defaultOptions, overrideOptions, {
        headers: headers
    });
}
const batchHandler = {
    get: (target, method, receiver) => {
        if (method === "send") {
            return async () => {
                const response = await cross_fetch_1.default(target.uri, mergeOptions({
                    method: "post",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(target.payload)
                }, target.defaultOptions));
                return await response.json();
            };
        }
        return (...params) => {
            const id = target.id;
            target.id = target.id + 1;
            target.payload.push({
                jsonrpc: "2.0",
                id: id,
                method: method,
                params: params
            });
            return receiver;
        };
    }
};
const handler = {
    get: (target, method) => {
        if (method === "batch") {
            return () => {
                return new Proxy({
                    id: Math.round(Math.random() * 10000000),
                    payload: [],
                    uri: target.uri,
                    defaultOptions: target.defaultOptions
                }, batchHandler);
            };
        }
        return async (...params) => {
            const id = Math.round(Math.random() * 10000000);
            const response = await cross_fetch_1.default(target.uri, mergeOptions({
                method: "post",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    jsonrpc: "2.0",
                    id: id,
                    method: method,
                    params: params
                })
            }, target.defaultOptions));
            const data = await response.json();
            if (data.id !== id) {
                throw new Error("JSONRPCError: response ID does not match request ID!");
            }
            if (data.error) {
                throw new Error(`JSONRPCError: server error ${JSON.stringify(data.error)}`);
            }
            return data.result;
        };
    }
};
class RPC {
    constructor(uri, defaultOptions = {}) {
        this.uri = uri;
        this.defaultOptions = defaultOptions;
        return new Proxy(this, handler);
    }
    static create(uri) {
        return new RPC(uri);
    }
}
exports.RPC = RPC;
function HexStringToBigInt(hexString) {
    return jsbi_1.default.BigInt(hexString);
}
exports.HexStringToBigInt = HexStringToBigInt;
function BigIntToHexString(bigInt) {
    return "0x" + bigInt.toString(16);
}
exports.BigIntToHexString = BigIntToHexString;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NrYi1qcy10b29sa2l0L3JwYy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSw4REFBZ0M7QUFDaEMsZ0RBQXdCO0FBRXhCLFNBQVMsWUFBWSxDQUFDLGVBQWUsRUFBRSxjQUFjO0lBQ25ELGNBQWMsR0FBRyxjQUFjLElBQUksRUFBRSxDQUFDO0lBQ3RDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQzNCLEVBQUUsRUFDRixjQUFjLENBQUMsT0FBTyxJQUFJLEVBQUUsRUFDNUIsZUFBZSxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQzlCLENBQUM7SUFDRixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUU7UUFDeEQsT0FBTyxFQUFFLE9BQU87S0FDakIsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELE1BQU0sWUFBWSxHQUFHO0lBQ25CLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUU7UUFDaEMsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQ3JCLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQ2hCLE1BQU0sUUFBUSxHQUFHLE1BQU0scUJBQUssQ0FDMUIsTUFBTSxDQUFDLEdBQUcsRUFDVixZQUFZLENBQ1Y7b0JBQ0UsTUFBTSxFQUFFLE1BQU07b0JBQ2QsT0FBTyxFQUFFO3dCQUNQLGNBQWMsRUFBRSxrQkFBa0I7cUJBQ25DO29CQUNELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7aUJBQ3JDLEVBQ0QsTUFBTSxDQUFDLGNBQWMsQ0FDdEIsQ0FDRixDQUFDO2dCQUNGLE9BQU8sTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDL0IsQ0FBQyxDQUFDO1NBQ0g7UUFDRCxPQUFPLENBQUMsR0FBRyxNQUFN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